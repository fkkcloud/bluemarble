angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,t,n){}]),angular.module("app").controller("DataVizCtrl",["$rootScope","$scope","$window",function(e,t,n){function a(){$(".data-visibility").addClass("active")}a()}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,t,n){function a(){$(".data-visibility").removeClass("active")}function r(e){function t(e,t,n,a,r){function o(t){e.html(s(t,p))}function l(e,t){var n=".",a=e+"";if(a.length<t)for(var r=t-a.length,o=0;r>o;o++)a="0"+a;var l=(l=a.length)>2?l%2:0;return(l?a.substr(0,l)+n:"")+a.substr(l).replace(/(\d{2})(?=\d)/g,"$1"+n)}function i(){n++;var e=n/c;e>=1?o(parseInt(t)):(o(parseInt(e*t)),setTimeout(i,d))}function s(e,t){for(var n=l(e,t),a=n.split(""),r=[],o=0;o<a.length;o++)r+="."==a[o]?"<span>.</span>":"<em>"+a[o]+"</em>";return r}var c=100,u=a,n=0,d=u/c,p=(t+"").length;e.html(s(0,p)),setTimeout(i,r)}var n=0,a=parseInt(e.attr("data-num")),r=parseInt(e.attr("time-duration")),o=parseInt(e.attr("time-delay"));t(e,a,n,r,o)}a();var o=$(".slide"),l=$(".slide-group"),i=$(".bullet"),s=o.length-1,c=0,u=!1;i.first().addClass("current");var d=function(){var e=$(".slide-node").clone();$(".slide-node").html("Loading! If you see this message for a while, please refresh the page"),$(".slide-node").replaceWith(e);var t=$(".slide-lines").clone();$(".slide-lines").html("Loading! If you see this message for a while, please refresh the page"),$(".slide-lines").replaceWith(t)},p=function(){window.clearInterval(m),u=!1;var e=i.index($(this));f(e),d()},f=function(e){u?c===s?c=0:c++:c=e,i.removeClass("current"),i.eq(c).addClass("current"),h(c)},h=function(e){l.animate({top:"-"+e+"00%"}),d()};i.on("click",p);var m=window.setInterval(f,8e4);$("[data-num]").each(function(){r($(this))})}]),angular.module("app").config(["$routeProvider",function(e){e.when("/dataviz",{templateUrl:"/templates/dataviz.html",controller:"DataVizCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]);
//# sourceMappingURL=data:application/json;base64,