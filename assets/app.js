angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,a,l){function t(){EdgeManagerCluster.hideAll(),NodeManagerCluster.hideAll()}function s(){EdgeManagerCluster.showAll(),NodeManagerCluster.showAll()}function i(){var e=function(){this.AdditiveColor=!0,this.Restart=function(){location.reload()},this.HideNodes=!1,this.HideNames=!1,this.Data="US"};RENDEROPTIONS=new e;var l=new dat.GUI,t=l.add(RENDEROPTIONS,"Data",["US","KOR"]),s=l.addFolder("Clusters"),i=s.add(RENDEROPTIONS,"HideNodes"),r=s.add(RENDEROPTIONS,"HideNames"),n=l.addFolder("MergePaths"),u=n.add(RENDEROPTIONS,"HideNodes"),o=n.add(RENDEROPTIONS,"HideNames");t.onFinishChange(function(e){"US"==e?(dataManager.start("US"),a.clusterids=[{value:1,displayName:"1"},{value:2,displayName:"2"},{value:3,displayName:"3"},{value:4,displayName:"4"},{value:5,displayName:"5"},{value:6,displayName:"6"},{value:7,displayName:"7"},{value:8,displayName:"8"},{value:9,displayName:"9"},{value:10,displayName:"10"},{value:11,displayName:"11"},{value:12,displayName:"12"},{value:13,displayName:"13"},{value:14,displayName:"14"},{value:15,displayName:"15"},{value:16,displayName:"16"},{value:17,displayName:"Not Clustered"},{value:18,displayName:"All"}],1==PAGE_NUM.value?a.resetClusters():2==PAGE_NUM.value&&a.resetMergePaths(),a.mergePathIds.value="acute myocardial infarction",a.$apply()):"KOR"==e&&(dataManager.start("KOR"),a.clusterids=[{value:0,displayName:"0"},{value:1,displayName:"1"},{value:2,displayName:"2"},{value:3,displayName:"Not Clustered"},{value:4,displayName:"All"}],1==PAGE_NUM.value?a.resetClusters():2==PAGE_NUM.value&&a.resetMergePaths(),a.mergePathIds.value="chronic viral hepatitis",a.$apply())}),i.onFinishChange(function(e){NodeManagerCluster.toggleNodeVisibilityByCluster(1==e?!1:!0)}),r.onFinishChange(function(e){NodeManagerCluster.toggleNodeTextVisibilityByCluster(1==e?!1:!0)}),u.onFinishChange(function(e){NodeManagerMergePaths[SELECTED_MERGEPATHID].toggleNodeVisibility(1==e?!1:!0)}),o.onFinishChange(function(e){NodeManagerMergePaths[SELECTED_MERGEPATHID].toggleNodeTextVisibility(1==e?!1:!0)}),l.add(RENDEROPTIONS,"Restart")}a.meanAge={value:0},a.mergePathIds={value:"acute myocardial infarction"},a.getMenuShow=function(){return a.show_menu},$(window).resize(function(){this.resizeTO&&clearTimeout(this.resizeTO),this.resizeTO=setTimeout(function(){$(this).trigger("resizeEnd")},200)}),$(window).bind("resizeEnd",function(){location.reload()}),a.clusterids=[{value:1,displayName:"1"},{value:2,displayName:"2"},{value:3,displayName:"3"},{value:4,displayName:"4"},{value:5,displayName:"5"},{value:6,displayName:"6"},{value:7,displayName:"7"},{value:8,displayName:"8"},{value:9,displayName:"9"},{value:10,displayName:"10"},{value:11,displayName:"11"},{value:12,displayName:"12"},{value:13,displayName:"13"},{value:14,displayName:"14"},{value:15,displayName:"15"},{value:16,displayName:"16"},{value:17,displayName:"Not Clustered"},{value:18,displayName:"All"}],a.cleanMergePaths=function(){NodeManagerMergePaths[SELECTED_MERGEPATHID].clean()},a.resetMergePaths=function(){FRAME.value=0,PAGE_NUM.value=2,TWEEN.removeAll(),NodeManagerMergePaths[SELECTED_MERGEPATHID].reset(),EdgeManagerMergePaths[SELECTED_MERGEPATHID].reset()},a.resetClusters=function(){FRAME.value=0,PAGE_NUM.value=1,a.meanAge.value=0,TWEEN.removeAll(),EdgeManagerCluster.reset(),NodeManagerCluster.reset(),a.setClusterID(SELECTED_CLUSTER),a.updateMeanAge()},a.setClusterID=function(e){return SELECTED_CLUSTER=e,e==NOT_CLUSTER_ID?(SELECTED_CLUSTER=NOT_CLUSTER_ID,t(),EdgeManagerCluster.toggleShowByCluster(NOT_CLUSTER_ID),void NodeManagerCluster.toggleShowByCluster(NOT_CLUSTER_ID)):e==ALL_CLUSTER_ID?(SELECTED_CLUSTER=ALL_CLUSTER_ID,t(),void s()):(t(),EdgeManagerCluster.toggleShowByCluster(SELECTED_CLUSTER),void NodeManagerCluster.toggleShowByCluster(SELECTED_CLUSTER))},a.updateMeanAge=function(){if(!(FRAME.value>620||1!=PAGE_NUM.value)){var e=mapRange([0,620],[35.4,90.5],FRAME.value);a.meanAge.value=Math.ceil(e),a.$apply(),requestAnimationFrame(a.updateMeanAge)}},i()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/mergepaths",{templateUrl:"/templates/mergepaths.html",controller:"MergePathCtrl"}).when("/clusters",{templateUrl:"/templates/clusters.html",controller:"ClusterCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]),angular.module("app").controller("ClusterCtrl",["$rootScope","$scope","$window",function(e,a,l){function t(){PAGE_NUM.value=1,bCanvasLoaded&&$("#options-clusters").css("visibility","visible")}function s(){$(".data-visibility").addClass("active")}t(),a.selectedid={value:SELECTED_CLUSTER},s(),$("#btn-reset-clusters").click(function(){a.resetClusters()}),a.updateMeanAge(),$("#clusterid").change(function(){var e=$("#clusterid").val();SELECTED_CLUSTER=e,a.setClusterID(e)})}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,a,l){function t(){PAGE_NUM.value=0}function s(){$(".data-visibility").removeClass("active")}t(),s()}]),angular.module("app").controller("MergePathCtrl",["$rootScope","$scope","$window",function(e,a,l){function t(e){return e.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")}function s(){PAGE_NUM.value=2,bCanvasLoaded&&$("#options-mergepaths").css("visibility","visible")}function i(){$(".data-visibility").addClass("active")}a.diseases=MERGEPATH_INITNODE_REF,a.search="";var r;a.$watch("search",function(e){r=new RegExp("\\b"+t(e),"i")}),a.filterBySearch=function(e){return a.search?r.test(e):!1},a.runName=function(e){var l=e;a.search=l},s(),i(),$("#btn-reset-mergepaths").click(function(){a.resetMergePaths()}),$("#btn-run-mergepaths").click(function(){var e=document.getElementById("textinfo-mergepathids").value;try{var l=parseInt(e);if(isNaN(l))for(var t=e.toLowerCase(),s=0;s<MERGEPATH_INITNODE_REF.length;s++){var i=MERGEPATH_INITNODE_REF[s];if(i==t){e=s;break}}}catch(r){return void console.log(r)}a.cleanMergePaths(),SELECTED_MERGEPATHID=e,a.mergePathIds.value=MERGEPATH_INITNODE_REF[e],a.$apply(),a.resetMergePaths()})}]);
//# sourceMappingURL=data:application/json;base64,