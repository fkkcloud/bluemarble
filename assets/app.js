angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,c,o){function t(){var e=function(){this.AdditiveColor=!0,this.Restart=function(){location.reload()},this.HideNodes=!1,this.HideNames=!1};RENDEROPTIONS=new e;var c=new dat.GUI,o=c.addFolder("Clusters"),t=o.add(RENDEROPTIONS,"HideNodes"),g=c.addFolder("MergePaths"),r=g.add(RENDEROPTIONS,"HideNodes"),a=g.add(RENDEROPTIONS,"HideNames"),n=c.add(RENDEROPTIONS,"AdditiveColor");n.onFinishChange(function(e){}),t.onFinishChange(function(e){NodeManagerCluster.toggleNodeVisibility(1==e?!1:!0)}),r.onFinishChange(function(e){if(1==e)for(var c=0;c<NodeManagerMergePaths.length;c++)for(var o=0;o<SELECTED_MERGEPATHIDS.length;o++)SELECTED_MERGEPATHIDS[o]===c&&NodeManagerMergePaths[c].toggleNodeVisibility(!1);else for(var c=0;c<NodeManagerMergePaths.length;c++)for(var o=0;o<SELECTED_MERGEPATHIDS.length;o++)SELECTED_MERGEPATHIDS[o]===c&&NodeManagerMergePaths[c].toggleNodeVisibility(!0)}),a.onFinishChange(function(e){if(1==e)for(var c=0;c<NodeManagerMergePaths.length;c++)for(var o=0;o<SELECTED_MERGEPATHIDS.length;o++)SELECTED_MERGEPATHIDS[o]===c&&NodeManagerMergePaths[c].toggleNodeTextVisibility(!1);else for(var c=0;c<NodeManagerMergePaths.length;c++)for(var o=0;o<SELECTED_MERGEPATHIDS.length;o++)SELECTED_MERGEPATHIDS[o]===c&&NodeManagerMergePaths[c].toggleNodeTextVisibility(!0)}),c.add(RENDEROPTIONS,"Restart")}c.meanAge={value:0},c.mergePathIds={value:[0]},$(window).resize(function(){this.resizeTO&&clearTimeout(this.resizeTO),this.resizeTO=setTimeout(function(){$(this).trigger("resizeEnd")},200)}),$(window).bind("resizeEnd",function(){location.reload()}),c.resetClusters=function(){FRAME.value=0,PAGE_NUM.value=1,c.meanAge=48,TWEEN.removeAll(),EdgeManagerCluster.reset(),NodeManagerCluster.reset()},c.resetMergePaths=function(){FRAME.value=0,PAGE_NUM.value=2,TWEEN.removeAll();for(var e=0;e<NodeManagerMergePaths.length;e++)for(var c=0;c<SELECTED_MERGEPATHIDS.length;c++)SELECTED_MERGEPATHIDS[c]==e&&(NodeManagerMergePaths[e].reset(),EdgeManagerMergePaths[e].reset())},t()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/mergepaths",{templateUrl:"/templates/mergepaths.html",controller:"MergePathCtrl"}).when("/clusters",{templateUrl:"/templates/clusters.html",controller:"ClusterCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]),angular.module("app").controller("ClusterCtrl",["$rootScope","$scope","$window",function(e,c,o){function t(){PAGE_NUM.value=1}function g(){$(".data-visibility").addClass("active")}t(),g(),c.updateMeanAge=function(){if(!(FRAME.value>400||1!=PAGE_NUM.value)){var e=mapRange([0,400],[48,78],FRAME.value);c.meanAge.value=e,c.$apply(),requestAnimationFrame(c.updateMeanAge)}},c.updateMeanAge(),$("#btn-reset-clusters").click(function(){c.resetClusters()}),$("#checkbox_c_all").change(function(){var e=$(this).is(":checked");$("#checkbox_c0").prop("checked",e),$("#checkbox_c0").trigger("change"),$("#checkbox_c1").prop("checked",e),$("#checkbox_c1").trigger("change"),$("#checkbox_c2").prop("checked",e),$("#checkbox_c2").trigger("change"),$("#checkbox_c3").prop("checked",e),$("#checkbox_c3").trigger("change"),$("#checkbox_c4").prop("checked",e),$("#checkbox_c4").trigger("change"),$("#checkbox_c5").prop("checked",e),$("#checkbox_c5").trigger("change"),$("#checkbox_c6").prop("checked",e),$("#checkbox_c6").trigger("change"),$("#checkbox_c7").prop("checked",e),$("#checkbox_c7").trigger("change"),$("#checkbox_c8").prop("checked",e),$("#checkbox_c8").trigger("change"),$("#checkbox_c9").prop("checked",e),$("#checkbox_c9").trigger("change"),$("#checkbox_c10").prop("checked",e),$("#checkbox_c10").trigger("change"),$("#checkbox_c11").prop("checked",e),$("#checkbox_c11").trigger("change"),$("#checkbox_c12").prop("checked",e),$("#checkbox_c12").trigger("change"),$("#checkbox_c13").prop("checked",e),$("#checkbox_c13").trigger("change"),$("#checkbox_c14").prop("checked",e),$("#checkbox_c14").trigger("change"),$("#checkbox_c15").prop("checked",e),$("#checkbox_c15").trigger("change"),$("#checkbox_c16").prop("checked",e),$("#checkbox_c16").trigger("change"),$("#checkbox_c17").prop("checked",e),$("#checkbox_c17").trigger("change")}),$("#checkbox_c0").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(0,!0):EdgeManagerCluster.toggleShowByCluster(0,!1)}),$("#checkbox_c1").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(1,!0):EdgeManagerCluster.toggleShowByCluster(1,!1)}),$("#checkbox_c2").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(2,!0):EdgeManagerCluster.toggleShowByCluster(2,!1)}),$("#checkbox_c3").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(3,!0):EdgeManagerCluster.toggleShowByCluster(3,!1)}),$("#checkbox_c4").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(4,!0):EdgeManagerCluster.toggleShowByCluster(4,!1)}),$("#checkbox_c5").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(5,!0):EdgeManagerCluster.toggleShowByCluster(5,!1)}),$("#checkbox_c6").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(6,!0):EdgeManagerCluster.toggleShowByCluster(6,!1)}),$("#checkbox_c7").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(7,!0):EdgeManagerCluster.toggleShowByCluster(7,!1)}),$("#checkbox_c8").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(8,!0):EdgeManagerCluster.toggleShowByCluster(8,!1)}),$("#checkbox_c9").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(9,!0):EdgeManagerCluster.toggleShowByCluster(9,!1)}),$("#checkbox_c10").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(10,!0):EdgeManagerCluster.toggleShowByCluster(10,!1)}),$("#checkbox_c11").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(11,!0):EdgeManagerCluster.toggleShowByCluster(11,!1)}),$("#checkbox_c12").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(12,!0):EdgeManagerCluster.toggleShowByCluster(12,!1)}),$("#checkbox_c13").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(13,!0):EdgeManagerCluster.toggleShowByCluster(13,!1)}),$("#checkbox_c14").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(14,!0):EdgeManagerCluster.toggleShowByCluster(14,!1)}),$("#checkbox_c15").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(15,!0):EdgeManagerCluster.toggleShowByCluster(15,!1)}),$("#checkbox_c16").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(16,!0):EdgeManagerCluster.toggleShowByCluster(16,!1)}),$("#checkbox_c17").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManagerCluster.toggleShowByCluster(17,!0):EdgeManagerCluster.toggleShowByCluster(17,!1)})}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,c,o){function t(){PAGE_NUM.value=0}function g(){$(".data-visibility").removeClass("active")}t(),g()}]),angular.module("app").controller("MergePathCtrl",["$rootScope","$scope","$window",function(e,c,o){function t(){PAGE_NUM.value=2}function g(){$(".data-visibility").addClass("active")}t(),g(),c.updateMeanAge=function(){if(!(FRAME.value>400||1!=PAGE_NUM.value)){var e=mapRange([0,400],[48,78],FRAME.value);c.meanAge.value=e,c.$apply(),requestAnimationFrame(c.updateMeanAge)}},c.updateMeanAge(),$("#btn-reset-mergepaths").click(function(){c.resetMergePaths()}),$("#btn-run-mergepaths").click(function(){for(var e=document.getElementById("textinfo-mergepathids").value,o=e.split(" "),t=0;t<o.length;t++)try{var g=parseInt(o[t]);isNaN(g)?delete o[t]:o[t]=g}catch(r){return void console.log(r)}console.log("Show mergepathids : ",o),SELECTED_MERGEPATHIDS=o,c.mergePathIds.value=o,c.$apply(),c.resetMergePaths()}),$("#checkbox-hide-names-mergepaths").change(function(){if($(this).is(":checked"))for(var e=0;e<NodeManagerMergePaths.length;e++)for(var c=0;c<SELECTED_MERGEPATHIDS.length;c++)SELECTED_MERGEPATHIDS[c]===e&&NodeManagerMergePaths[e].toggleNodeTextVisibility(!0);else for(var e=0;e<NodeManagerMergePaths.length;e++)for(var c=0;c<SELECTED_MERGEPATHIDS.length;c++)SELECTED_MERGEPATHIDS[c]===e&&NodeManagerMergePaths[e].toggleNodeTextVisibility(!1)})}]);
//# sourceMappingURL=data:application/json;base64,