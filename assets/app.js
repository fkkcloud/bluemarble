angular.module("app",["ngRoute","duScroll","infinite-scroll"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window","UserSvc",function(e,o,t,n){o.pageId={post:0,register:1,login:2,account:3},o.navCollapsed=!0,o.collapse=function(){o.navCollapsed=!0},o.moveToCurrentLocation=function(){function e(e){if(o.currentPageId==o.pageId.post){var t=e.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var n=new google.maps.LatLng(t.latitude,t.longitude);google.maps.event.trigger(o.map,"heading_changed",n),o.map.panTo(n),o.map.setZoom(15)}}function t(e){console.warn("ERROR("+e.code+"): "+e.message)}navigator.geolocation.getCurrentPosition(e,t),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},o.logout=function(){o.collapse(),o.currentUser=void 0,n.logout(),swal("","Successfully logged out")},e.$on("login",function(e,t){o.currentUser=t}),o.$on("loc",function(e,t){console.log(t);var n=t.lat(),a=t.lng();o.postLocation={lat:n,lon:a},console.log(o.postLocation)}),o.$on("pagechange",function(e,t){o.currentPageId=t}),o.$on("place",function(e,t){o.$$phase||o.$apply(function(){o.sexPlaceAutocompleted=t})}),o.$on("mapInit",function(e,t){o.map=t}),n.remainLogin()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/account",{controller:"AccountCtrl",templateUrl:"/templates/account.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc",function(e,o){var t=function(o,t,n){function a(e){for(var o,t=0;o=P[t];t++)o.setMap(null);P=[];var o=new google.maps.Marker({position:e,map:f,icon:h});P.push(o)}function l(){for(var e,o=0;e=P[o];o++)e.setMap(null);P=[]}function r(e){if(o.currentUser){S&&S.close();var t=new google.maps.Geocoder;o.$emit("loc",e),a(e),t.geocode({latLng:e},function(e,t){try{o.$emit("place",e[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),o.$emit("place","Location does not exists")}})}}function s(){var o=void 0;e.fetchAll().success(function(e){o=e;for(var t=0;t<o.length;t++){var n=o[t];if(n.hasOwnProperty("sexLocation")){var a=angular.fromJson(n.sexLocation),l=new google.maps.LatLng(a.lat,a.lon),r={position:l,map:f,title:"Sex",icon:w},s=new google.maps.Marker(r);$.push(s),google.maps.event.addListener(s,"click",function(e,o){return function(){void 0!==S&&S.close();var t='<div id="sexplace"><p> Target: '+o.sexTarget+"</p><p> Age: "+o.userAge+"</p></div>",n={content:t,pixelOffset:new google.maps.Size(-37.5,0)};S=new google.maps.InfoWindow(n),S.open(f,e)}}(s,n)),google.maps.event.addListener(s,"mouseout",function(){S&&S.close()})}}})}function i(){for(var e,o=0;e=$[o];o++)e.setMap(null);$=[]}function c(){var e=document.getElementById("pac-input"),o=document.getElementById("btn-curr");f.controls[google.maps.ControlPosition.TOP_LEFT].push(e),f.controls[google.maps.ControlPosition.TOP_RIGHT].push(o);var t=new google.maps.places.SearchBox(e);google.maps.event.addListener(t,"places_changed",function(){var e=t.getPlaces();if(0!=e.length){var o=e[0];r(o.geometry.location),window.localStorage.latitude=o.geometry.location.latitude,window.localStorage.longitude=o.geometry.location.longitude,f.panTo(o.geometry.location),f.setZoom(16)}})}function g(){google.maps.event.addListener(f,"click",function(e){r(e.latLng)})}function u(){google.maps.event.addListener(f,"heading_changed",function(e){r(e)})}function p(){google.maps.event.addListener(f,"center_changed",function(){window.localStorage.latitude=f.getCenter().lat(),window.localStorage.longitude=f.getCenter().lng()})}function d(){google.maps.event.addListener(f,"maptypeid_changed",function(){l(),i(),s()})}function m(){void 0===f&&(f=new google.maps.Map(t[0],L)),d(),o.$emit("mapInit",f),g(),c(),p(),u(),s()}var f,w={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,25)},h={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)};console.log("window.localStorage.latitude ",window.localStorage.latitude);var v=new google.maps.LatLng(34.05,-118.24);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(v=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),console.log("window.localStorage.latitude ",window.localStorage.latitude),console.log(v);var S,L={center:v,zoom:15,MapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1,streetViewControl:!1},P=[],$=[];m()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:t}}]),angular.module("app").service("UtilSvc",function(){var e=this;e.deg2rad=function(e){return e*(Math.PI/180)},e.getDistanceFromLatLonInKm=function(o,t,n,a){var l=6371,r=e.deg2rad(n-o),s=e.deg2rad(a-t),i=Math.sin(r/2)*Math.sin(r/2)+Math.cos(e.deg2rad(o))*Math.cos(e.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),c=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)),g=l*c;return g}}),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc","$window","$document",function(e,o,t,n){e.$emit("pagechange",e.pageId.post),e.posts=[];var a=0,l=10;e.moveToLoc=function(o){var t=e.posts[o],a=angular.fromJson(t.sexLocation),l=new google.maps.LatLng(a.lat,a.lon);e.map.panTo(l),e.map.setZoom(16);var r=0,s=480;n.scrollTop(r,s).then(function(){console&&console.log("You just scrolled to the top!")})},e.addPost=function(){var t=e.sexPlaceAutocompleted,n=e.postLocation;console.log("location:"+n.lat+","+n.lon+"\n place:"+t);var a=JSON.stringify(n);console.log(e.sexTime),o.create({userName:void 0,userAge:void 0,sexPlace:t,sexTime:e.sexTime,sexTarget:e.sexTarget,sexLocation:a}).success(function(o){var t="You wanted to have sex with "+o.sexTarget;swal("Great!",t,"success"),google.maps.event.trigger(e.map,"maptypeid_changed"),e.posts.unshift(o),e.sexTime=null,e.sexTarget=null}).error(function(e,o){401==o?swal("Log-in failed","Please log in","error"):swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){o.fetch(a,l).success(function(o){a++,console.log("Posts have been loaded successfully for front page"),e.posts=e.posts.concat(o)})},e.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetchAll=function(){return e.get("/api/posts")},this.fetch=function(o,t){var n="/api/posts/"+o+"?perpage="+t;return e.get(n)},this.create=function(o){return e.post("/api/posts",o)}}]),angular.module("app").controller("AccountCtrl",["$scope","$location","UserSvc",function(e,o,t){e.$emit("pagechange",e.pageId.account),e.changePassword=function(e,n){t.changePassword(e,n).then(function(){swal("","Password have been changed","success"),o.path("/")},function(e){401==e.status?swal("","Original password is wrong.","error"):swal("","Can not change password.","error")})}}]),angular.module("app").controller("LoginCtrl",["$rootScope","$scope","$location","UserSvc",function(e,o,t,n){o.$emit("pagechange",o.pageId.login),o.login=function(o,a){n.login(o,a).then(function(o){t.path("/"),e.$emit("login",o)},function(e){swal("Log-in failed!","Password/ID wrong","error")})}}]),angular.module("app").controller("RegisterCtrl",["$scope","$location","UserSvc",function(e,o,t){e.$emit("pagechange",e.pageId.register),e.register=function(n,a,l,r){t.register(n,a,l,r).then(function(t){swal("OK!","Successfully registered","success"),o.path("/"),e.$emit("login",t)},function(e){swal("Register failed!","Username already exists","error")})}}]),angular.module("app").service("UserSvc",["$http","$rootScope",function(e,o){var t=this;t.getUser=function(){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(e){return e.data},function(e){currentUser=void 0})},t.remainLogin=function(){if(console.log("Token:",localStorage.getItem("token")),console.log("Application has been launched"),"undefined"!=window.localStorage.getItem("token")&&"null"!=window.localStorage.getItem("token")&&window.localStorage.getItem("token")){e.defaults.headers.common["X-Auth"]=window.localStorage.getItem("token"),console.log("Remain Login in process..");t.getUser().then(function(e){o.$emit("login",e)},function(e){console.log(e),currentUser=void 0})}},t.changePassword=function(o,t){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(n){return e.post("/api/users/password_change",{password:t,newPassword:o,username:n.data.userName})})},t.login=function(o,n){return e.post("/api/sessions",{username:o,password:n}).then(function(o){return window.localStorage.token=o.data,e.defaults.headers.common["X-Auth"]=o.data,t.getUser()})},t.register=function(o,n,a,l){return e.post("/api/users",{userName:o,password:n,userdob:a,sexPos:l}).then(function(){return t.login(o,n)})},t.logout=function(){window.localStorage.longitude=void 0,window.localStorage.latitude=void 0,window.localStorage.token=void 0,e.defaults.headers.common["X-Auth"]=void 0}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJtYXAvbWFwLmRpcmVjdGl2ZS5qcyIsIm1hcC91dGlsLnN2Yy5qcyIsInBvc3RzL3Bvc3RzLmN0cmwuanMiLCJwb3N0cy9wb3N0cy5zdmMuanMiLCJ1c2VyL2FjY291bnQuY3RybC5qcyIsInVzZXIvbG9naW4uY3RybC5qcyIsImFwcC5qcyIsInVzZXIvcmVnaXN0ZXIuY3RybC5qcyIsInVzZXIvdXNlci5zdmMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkcm9vdFNjb3BlIiwiJHNjb3BlIiwiJHdpbmRvdyIsIlVzZXJTdmMiLCJwYWdlSWQiLCJwb3N0IiwicmVnaXN0ZXIiLCJsb2dpbiIsImFjY291bnQiLCJuYXZDb2xsYXBzZWQiLCJjb2xsYXBzZSIsIm1vdmVUb0N1cnJlbnRMb2NhdGlvbiIsImdldEN1cnJMb2NTdWNjZXNzIiwicG9zIiwiY3VycmVudFBhZ2VJZCIsImNyZCIsImNvb3JkcyIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiZ29vZ2xlTG9jIiwiZ29vZ2xlIiwibWFwcyIsIkxhdExuZyIsImV2ZW50IiwidHJpZ2dlciIsIm1hcCIsInBhblRvIiwic2V0Wm9vbSIsImdldEN1cnJMb2NFcnJvciIsImVyciIsImNvbnNvbGUiLCJ3YXJuIiwiY29kZSIsIm1lc3NhZ2UiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInN3YWwiLCJ0aXRsZSIsInRleHQiLCJ0aW1lciIsInNob3dDb25maXJtQnV0dG9uIiwibG9nb3V0IiwiY3VycmVudFVzZXIiLCJ1bmRlZmluZWQiLCIkb24iLCJfIiwidXNlciIsImxvY2F0aW9uIiwibG9nIiwibGF0IiwibG9uIiwibG5nIiwicG9zdExvY2F0aW9uIiwicGxhY2UiLCIkJHBoYXNlIiwiJGFwcGx5Iiwic2V4UGxhY2VBdXRvY29tcGxldGVkIiwicmVtYWluTG9naW4iLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJkaXJlY3RpdmUiLCJQb3N0c1N2YyIsIlV0aWxTdmMiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJkcmF3SGVscGVyTWFya2VyIiwibWFya2VyIiwiaSIsImhlbHBlck1hcmtlcnMiLCJzZXRNYXAiLCJNYXJrZXIiLCJwb3NpdGlvbiIsImljb24iLCJpbWFnZVRhcmdldCIsInB1c2giLCJyZW1vdmVIZWxwZXJNYXJrZXIiLCJkcmF3QW5kU2V0UGxhY2UiLCJpbmZvV2luZG93IiwiY2xvc2UiLCJnZW9jb2RlciIsIkdlb2NvZGVyIiwiJGVtaXQiLCJnZW9jb2RlIiwibGF0TG5nIiwicmVzdWx0cyIsInN0YXR1cyIsImZvcm1hdHRlZF9hZGRyZXNzIiwiZHJhd1Bvc3RNYXJrZXJzIiwicG9zdHMiLCJmZXRjaEFsbCIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsImxlbmd0aCIsImhhc093blByb3BlcnR5IiwiZnJvbUpzb24iLCJzZXhMb2NhdGlvbiIsIm1hcmtlck9wdGlvbnMiLCJpbWFnZVBvc3QiLCJtYXJrZXJzIiwiYWRkTGlzdGVuZXIiLCJodG1sIiwic2V4VGFyZ2V0IiwidXNlckFnZSIsImluZm9XaW5kb3dPcHRpb25zIiwiY29udGVudCIsInBpeGVsT2Zmc2V0IiwiU2l6ZSIsIkluZm9XaW5kb3ciLCJvcGVuIiwicmVtb3ZlUG9zdE1hcmtlciIsInNldFNlYXJjaEJveCIsImlucHV0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImN1cnJMb2NCdG4iLCJjb250cm9scyIsIkNvbnRyb2xQb3NpdGlvbiIsIlRPUF9MRUZUIiwiVE9QX1JJR0hUIiwic2VhcmNoQm94IiwicGxhY2VzIiwiU2VhcmNoQm94IiwiZ2V0UGxhY2VzIiwiZ2VvbWV0cnkiLCJzZXRDbGlja01hcCIsInNldE1vdmVUb0N1cnJlbnRMb2NhdGlvbiIsInNldENlbnRlckNoYW5nZWQiLCJnZXRDZW50ZXIiLCJzZXRMb2FkUG9zdE1hcmtlcnMiLCJpbml0TWFwIiwiTWFwIiwibWFwT3B0aW9ucyIsInVybCIsInNpemUiLCJvcmlnaW4iLCJQb2ludCIsImFuY2hvciIsInNjYWxlZFNpemUiLCJpbml0aWFsTWFwQ2VudGVyIiwiaXNOYU4iLCJjZW50ZXIiLCJ6b29tIiwiTWFwVHlwZUlkIiwiUk9BRE1BUCIsInNjcm9sbHdoZWVsIiwic3RyZWV0Vmlld0NvbnRyb2wiLCJyZXN0cmljdCIsInRlbXBsYXRlIiwicmVwbGFjZSIsInNlcnZpY2UiLCJzdmMiLCJ0aGlzIiwiZGVnMnJhZCIsImRlZyIsIk1hdGgiLCJQSSIsImdldERpc3RhbmNlRnJvbUxhdExvbkluS20iLCJsYXQxIiwibG9uMSIsImxhdDIiLCJsb24yIiwiUiIsImRMYXQiLCJkTG9uIiwiYSIsInNpbiIsImNvcyIsImMiLCJhdGFuMiIsInNxcnQiLCJkIiwiJGRvY3VtZW50IiwiX3BhZ2UiLCJfcGVyUGFnZSIsIm1vdmVUb0xvYyIsImlkIiwidG9wIiwiZHVyYXRpb24iLCJzY3JvbGxUb3AiLCJ0aGVuIiwiYWRkUG9zdCIsImxvY2F0aW9uSlNPTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXhUaW1lIiwiY3JlYXRlIiwidXNlck5hbWUiLCJzZXhQbGFjZSIsIm1zZyIsInVuc2hpZnQiLCJlcnJvciIsImRhdGEiLCJyZXF1ZXN0RmV0Y2giLCJmZXRjaCIsImNvbmNhdCIsIiRodHRwIiwiZ2V0IiwicGFnZSIsInBlcnBhZ2UiLCIkbG9jYXRpb24iLCJjaGFuZ2VQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwicGFzc3dvcmQiLCJwYXRoIiwidXNlcm5hbWUiLCJ1c2VyZG9iIiwic2V4cG9zIiwiZ2V0VXNlciIsImhlYWRlcnMiLCJYLUF1dGgiLCJkZWZhdWx0cyIsImNvbW1vbiIsImdldEl0ZW0iLCJ0b2tlbiIsInNleFBvcyJdLCJtYXBwaW5ncyI6IkFBQ0FBLFFBQUFD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QSxRQUFBekMsSUFFSixTQUFDbEIsR0FDQUMsUUFBUW1CLElBQUlwQixHQUNiYyxZQUFhQyxXQUtmaUgsRUFBSWtELGVBQWlCLFNBQVNDLEVBQWFDLEdBQzFDLE1BQU9QLEdBQU1DLElBQUksY0FFakJZLFNBQU9DLFNBQVVkLEVBQUFlLFNBQUFGLFFBQUFHLE9BQUEsYUFFaEJoQyxLQUFBLFNBQVUzSSxHQUNWLE1BQU8ySixHQUFNdk0sS0FBSyw4QkFFbEI4TSxTQUFhQSxFQUNiRCxZQUFBQSxFQUNDRyxTQUFjcEssRUFBQXVKLEtBQUFMLGNBU2pCcEMsRUFBSXhKLE1BQVEsU0FBUzhNLEVBQVVGLEdBQzlCLE1BQU9QLEdBQU12TSxLQUFLLGlCQUVsQmdOLFNBQU9BLEVBQ1BGLFNBQUFBLElBRUN2QixLQUFBLFNBQVV4RixHQUdWLE1BRkFuRixRQUFPQyxhQUFhNE0sTUFBUTFILEVBQVNvRyxLQUNyQ0ksRUFBS2UsU0FBVUYsUUFBQUcsT0FBUyxVQUFBeEgsRUFBQW9HLEtBQ2pCekMsRUFBQXlELGFBSVR6RCxFQUFJekosU0FBVyxTQUFTK00sRUFBVUYsRUFBVUcsRUFBU0MsR0FDcEQsTUFBT1gsR0FBTXZNLEtBQUssY0FFbEI4TCxTQUFPa0IsRUFDUEYsU0FBQUEsRUFDQ0csUUFBVUEsRUFDVlMsT0FBVVIsSUFFVjNCLEtBQUEsV0FDQSxNQUFPN0IsR0FBSXhKLE1BQU04TSxFQUFVRixNQUk3QnBELEVBQUluSCxPQUFTLFdBQ1ozQixPQUFPQyxhQUFhRSxVQUFZMEIsT0FDakM3QixPQUFJQyxhQUFTQyxTQUFVMkIsT0FDdEI3QixPQUFPQyxhQUFhNE0sTUFBQWhMLE9BQ3BCOEosRUFBQWUsU0FBT0YsUUFBYUcsT0FBQSxVQUFXOUsiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuXHQnbmdSb3V0ZScsXG5cdCdkdVNjcm9sbCcsXG5cdCdpbmZpbml0ZS1zY3JvbGwnXG5dKTtcbiIsIlxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkd2luZG93LCBVc2VyU3ZjKXtcblx0JHNjb3BlLnBhZ2VJZCA9IHsgXG5cdFx0cG9zdCAgICAgOiAwLFxuXHRcdHJlZ2lzdGVyIDogMSxcblx0XHRsb2dpbiAgICA6IDIsXG5cdFx0YWNjb3VudCAgOiAzLCBcblx0fTtcblxuXHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0JHNjb3BlLmNvbGxhcHNlID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0fTtcblxuXHQvKiBtb3ZlIHRvIGN1cnJlbnQgbG9jYXRpb24gKi9cblx0JHNjb3BlLm1vdmVUb0N1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG5cdFx0ZnVuY3Rpb24gZ2V0Q3VyckxvY1N1Y2Nlc3MocG9zKSB7XG4gICAgICAgICAgICAvKiBtYWtlIHN1cmUgdG8gY2hlY2sgd2UgYXJlIG9uIHBvc3QgcGFnZSB3aXRoIG1hcCBmaXJzdCAqL1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50UGFnZUlkICE9ICRzY29wZS5wYWdlSWQucG9zdClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciBjcmQgPSBwb3MuY29vcmRzO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gY3JkLmxhdGl0dWRlO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBjcmQubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdMYXRpdHVkZSA6ICcgKyBjcmQubGF0aXR1ZGUpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTG9uZ2l0dWRlOiAnICsgY3JkLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdNb3JlIG9yIGxlc3MgJyArIGNyZC5hY2N1cmFjeSArICcgbWV0ZXJzLicpO1xuICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoY3JkLmxhdGl0dWRlLCBjcmQubG9uZ2l0dWRlKTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcigkc2NvcGUubWFwLCAnaGVhZGluZ19jaGFuZ2VkJywgZ29vZ2xlTG9jKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJHNjb3BlLm1hcC5wYW5Ubyhnb29nbGVMb2MpXG4gICAgICAgICAgICAkc2NvcGUubWFwLnNldFpvb20oMTUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3VyckxvY0Vycm9yKGVycikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdFUlJPUignICsgZXJyLmNvZGUgKyAnKTogJyArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGluaXQgbWFwIGFuZCBwbGFjZSBzb21lIG1hcmtlcnMsIHNvIGV2ZXJ5dGhpbmcgc3RhcnQgd2l0aCB0aGlzIGZ1bmN0aW9uLiAqL1xuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGdldEN1cnJMb2NTdWNjZXNzLCBnZXRDdXJyTG9jRXJyb3IpO1xuXG4gICAgICAgIHN3YWwoeyAgIHRpdGxlOiBcIlwiLCAgIHRleHQ6IFwiTW92aW5nIHRvIGN1cnJlbnQgbG9jYXRpb24uLlwiLCAgIHRpbWVyOiAxNTAwLCAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSB9KTtcblx0fTtcblxuXHQkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUuY29sbGFwc2UoKTtcblxuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcblxuXHRcdFVzZXJTdmMubG9nb3V0KCk7XG5cblx0XHRzd2FsKCcnLFwiU3VjY2Vzc2Z1bGx5IGxvZ2dlZCBvdXRcIik7XG5cdH07XG5cblx0LyogdXNpbmcgcm9vdFNjb3BlIHNvIHRoYXQgVXNlclN2YyBjYW4gZW1pdCBhIGJyb2FkY2FzdCAqL1xuXHQkcm9vdFNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKXtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHR9KTtcblxuXHQkc2NvcGUuJG9uKCdsb2MnLCBmdW5jdGlvbihfLCBsb2NhdGlvbil7XG5cdFx0Y29uc29sZS5sb2cobG9jYXRpb24pO1xuXHRcdHZhciBsYXQgPSBsb2NhdGlvbi5sYXQoKTtcblx0XHR2YXIgbG9uID0gbG9jYXRpb24ubG5nKCk7XG5cdFx0JHNjb3BlLnBvc3RMb2NhdGlvbiA9IHtcblx0XHRcdGxhdDogbGF0LFxuXHRcdFx0bG9uOiBsb25cblx0XHR9O1xuXHRcdGNvbnNvbGUubG9nKCRzY29wZS5wb3N0TG9jYXRpb24pO1xuXHR9KTtcblxuXHQkc2NvcGUuJG9uKCdwYWdlY2hhbmdlJywgZnVuY3Rpb24oXywgcGFnZUlkKXtcblx0XHQkc2NvcGUuY3VycmVudFBhZ2VJZCA9IHBhZ2VJZDtcblx0fSk7XG5cblx0JHNjb3BlLiRvbigncGxhY2UnLCBmdW5jdGlvbihfLCBwbGFjZSl7XG5cdFx0Ly8gRm9yY2luZyB0aGUgdXBkYXRlIHdpdGggJGFwcGx5KCkgbWV0aG9kIG9uICRzY29wZVxuXHRcdC8vIHByb2JsZW0gcmVsYXRlZCBub3RlOiBodHRwOi8vd3d3LmplZmZyeWhvdXNlci5jb20vaW5kZXguY2ZtLzIwMTQvNi8yL0hvdy1kby1JLXJ1bi1jb2RlLXdoZW4tYS12YXJpYWJsZS1jaGFuZ2VzLXdpdGgtQW5ndWxhckpTXG5cdFx0aWYoISRzY29wZS4kJHBoYXNlKSB7IC8vIGNoZWNrIGlmIGEgJGRpZ2VzdCBpcyBhbHJlYWR5IGluIHByb2dyZXNzIGJ5IGNoZWNraW5nICRzY29wZS4kJHBoYXNlLlxuXHRcdFx0JHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuXHRcdFx0XHRcdCRzY29wZS5zZXhQbGFjZUF1dG9jb21wbGV0ZWQgPSBwbGFjZTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9XG5cblx0fSk7XG5cblx0JHNjb3BlLiRvbignbWFwSW5pdCcsIGZ1bmN0aW9uKF8sIG1hcCl7XG5cdFx0JHNjb3BlLm1hcCA9IG1hcDtcblx0fSk7XG5cblx0VXNlclN2Yy5yZW1haW5Mb2dpbigpO1xufSk7IiwiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKXtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oJy8nLCBcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgXG5cdFx0XHR0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcG9zdHMuaHRtbCdcblx0XHR9KVxuXHQud2hlbignL3JlZ2lzdGVyJywgXG5cdFx0e1xuXHRcdFx0Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcmVnaXN0ZXIuaHRtbCdcblx0XHR9KVxuXHQud2hlbignL2xvZ2luJyxcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnTG9naW5DdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9sb2dpbi5odG1sJ1xuXHRcdH0pXG5cdC53aGVuKCcvYWNjb3VudCcsXG5cdFx0e1xuXHRcdFx0Y29udHJvbGxlcjogJ0FjY291bnRDdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9hY2NvdW50Lmh0bWwnXG5cdFx0fSlcblx0Ly8gUmVkaXJlY3QgdG8gdGhlIHJvb3QgcGFnZS5cblx0Lm90aGVyd2lzZShcblx0XHR7XG4gICBcdFx0XHRyZWRpcmVjdFRvOiAnLydcblx0XHR9KTtcbn0pO1xuIiwiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5kaXJlY3RpdmUoJ2FwcE1hcCcsIGZ1bmN0aW9uKFBvc3RzU3ZjLCBVdGlsU3ZjKSB7XG4gICAgLy8gZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb25cbiAgICB2YXIgbGluayA9IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgbWFwO1xuICAgICAgICBcbiAgICAgICAgdmFyIGltYWdlUG9zdCA9IHtcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vY2F0Y2htZS5pZnlvdWNhbi5jb20vaW1hZ2VzL3BpY3R1cmVzL0lZQ19JY29ucy9JWUNfTG9jYXRpb25fSWNvbl9TbWFsbC5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTAwLCAxMDApLFxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBhbmNob3I6IG5ldyBnb29nbGUubWFwcy5Qb2ludCgxNywgMzQpLFxuICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTcsIDI1KVxuICAgICAgICB9O1xuXG4gICAgICAgICB2YXIgaW1hZ2VUYXJnZXQgPSB7XG4gICAgICAgICAgICB1cmw6ICdodHRwOi8vd3d3LmNsa2VyLmNvbS9jbGlwYXJ0cy9VL1Avai9NL0kvaS94LW1hcmsteWVsbG93LW1kLnBuZycsXG4gICAgICAgICAgICBzaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgxMDAsIDEwMCksXG4gICAgICAgICAgICBvcmlnaW46IG5ldyBnb29nbGUubWFwcy5Qb2ludCgwLCAwKSxcbiAgICAgICAgICAgIGFuY2hvcjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDE3LCAzNCksXG4gICAgICAgICAgICBzY2FsZWRTaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgyNSwgMjUpXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gbWFwIGNvbmZpZ1xuICAgICAgICBjb25zb2xlLmxvZygnd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSAnLCB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlICk7XG5cbiAgICAgICAgdmFyIGluaXRpYWxNYXBDZW50ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKDM0LjA1LCAtMTE4LjI0KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghaXNOYU4od2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSkgJiYgIWlzTmFOKHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlKSlcbiAgICAgICAge1xuICAgICAgICAgICAgaW5pdGlhbE1hcENlbnRlciA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcod2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSwgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ3dpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgJywgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSApO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coaW5pdGlhbE1hcENlbnRlcik7XG5cbiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgY2VudGVyICAgICAgOiBpbml0aWFsTWFwQ2VudGVyLFxuICAgICAgICAgICAgICAgIHpvb20gICAgICAgIDogMTUsXG4gICAgICAgICAgICAgICAgTWFwVHlwZUlkICAgOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCxcbiAgICAgICAgICAgICAgICBzY3JvbGx3aGVlbCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHN0cmVldFZpZXdDb250cm9sOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIGRyYXcgbWFwIHdpdGggaGVscGVyIG1hcmtlcnNcbiAgICAgICAgdmFyIGhlbHBlck1hcmtlcnMgPSBbXTtcbiAgICAgICAgZnVuY3Rpb24gZHJhd0hlbHBlck1hcmtlcihsb2NhdGlvbil7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSBoZWxwZXJNYXJrZXJzW2ldOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVscGVyTWFya2VycyA9IFtdO1xuICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsb2NhdGlvbiwgXG4gICAgICAgICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgICAgICAgaWNvbjogaW1hZ2VUYXJnZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaGVscGVyTWFya2Vycy5wdXNoKG1hcmtlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVIZWxwZXJNYXJrZXIoKXtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IGhlbHBlck1hcmtlcnNbaV07IGkrKykge1xuICAgICAgICAgICAgICAgIG1hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWxwZXJNYXJrZXJzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkcmF3QW5kU2V0UGxhY2UobG9jYXRpb24pXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIG9ubHkgZW5hYmxlIHdoZW4gbG9nZ2VkIGluXG4gICAgICAgICAgICBpZiAoIXNjb3BlLmN1cnJlbnRVc2VyKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGluZm9XaW5kb3cpXG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5jbG9zZSgpO1xuXG4gICAgICAgICAgICB2YXIgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYnJvYWRjYXN0IGxvY2F0aW9uIGluZm9yKGxvbixsYXQpXG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnbG9jJywgbG9jYXRpb24pO1xuXG4gICAgICAgICAgICBkcmF3SGVscGVyTWFya2VyKGxvY2F0aW9uKTtcblxuICAgICAgICAgICAgLy8gYnJvYWRjYXN0IHBsYWNlIGZvcm1hdHRlZF9hZGRyZXNzIGFuZCBkcmF3IGljb25cbiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoIHsgJ2xhdExuZyc6IGxvY2F0aW9uIH0sIGZ1bmN0aW9uKHJlc3VsdHMsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgIC8vIGFzIHVzZXIgY2xpY2tzIG9uIHRoZSBtYXAsXG4gICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byBzYXZlIHRoZSBmb3JtYXR0ZWQgYWRkcmVzcyBpbiAkc2NvcGUgYW5kXG4gICAgICAgICAgICAgICAgLy8gaXQgd2lsbCBiZSB1c2VkIHRocm91Z2ggcG9zdHMuY3RybFxuICAgICAgICAgICAgICAgIC8vIGVtaXQgYnJvYWRjYXNlICdwbGFjZScgYW5kIHNlbmQgdGhpcyB0byBhcHBsaWNhdGlvbi5jdHJsXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYnJvYWRjYXN0IGZvcm1hdHRlZF9hZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdwbGFjZScsIHJlc3VsdHNbMV0uZm9ybWF0dGVkX2FkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHN3YWwoXCJcIixcIkxvY2F0aW9uIGRvZXMgbm90IGV4aXN0c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3BsYWNlJywgXCJMb2NhdGlvbiBkb2VzIG5vdCBleGlzdHNcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAgLy8gcGxhY2UgYSBtYXJrZXIgYW5kIGluZm9XaW5kb3dcbiAgICAgICAgdmFyIGluZm9XaW5kb3c7XG4gICAgICAgIHZhciBtYXJrZXJzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIGRyYXdQb3N0TWFya2VycygpIHtcbiAgICAgICAgICAgIHZhciBwb3N0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIFBvc3RzU3ZjLmZldGNoQWxsKClcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICBwb3N0cyA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3N0ID0gcG9zdHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3N0Lmhhc093blByb3BlcnR5KCdzZXhMb2NhdGlvbicpKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gYW5ndWxhci5mcm9tSnNvbihwb3N0LnNleExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0LCBsb2NhdGlvbi5sb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGdvb2dsZUxvYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiU2V4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpbWFnZVBvc3RcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihtYXJrZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBtYXJrZXIgdG8gYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKG1hcmtlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbW91c2Ugb3ZlciB0byB2aWV3IHRoZSBwb3N0IGluZm9ybWF0aW9uIC0gY2xvc3VyZVxuICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIChmdW5jdGlvbihtYXJrZXIsIHBvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSB3aW5kb3cgaWYgbm90IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvV2luZG93ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXYgaWQ9XCJzZXhwbGFjZVwiPjxwPiBUYXJnZXQ6ICcgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0LnNleFRhcmdldCArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3A+PHA+IEFnZTogJyArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3QudXNlckFnZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvcD48L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb1dpbmRvd09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGh0bWwsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbE9mZnNldDogbmV3IGdvb2dsZS5tYXBzLlNpemUoLTM3LjUsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KGluZm9XaW5kb3dPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93Lm9wZW4obWFwLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KShtYXJrZXIsIHBvc3QpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBtb3VzZSBvdXQgdG8gY2xvc2UgdGhlIHBvc3QgaW5mbyB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnbW91c2VvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mb1dpbmRvdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlUG9zdE1hcmtlcigpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gbWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcmtlcnMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFNlYXJjaEJveCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgc2VhcmNoIGJveCBhbmQgbGluayBpdCB0byB0aGUgVUkgZWxlbWVudC5cbiAgICAgICAgICAgIHZhciBpbnB1dCA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFjLWlucHV0JykpOyAvLyBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gIFxuICAgICAgICAgICAgdmFyIGN1cnJMb2NCdG4gPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1jdXJyJykpOyAgICAgIFxuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaChpbnB1dCk7XG4gICAgICAgICAgICBtYXAuY29udHJvbHNbZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLlRPUF9SSUdIVF0ucHVzaChjdXJyTG9jQnRuKTtcblxuICAgICAgICAgICAgdmFyIHNlYXJjaEJveCA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuU2VhcmNoQm94KChpbnB1dCkpOyAvLyBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gXG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgdGhlIGV2ZW50IGZpcmVkIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhbiBpdGVtIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBwaWNrIGxpc3QuIFJldHJpZXZlIHRoZSBtYXRjaGluZyBwbGFjZXMgZm9yIHRoYXQgaXRlbS5cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKHNlYXJjaEJveCwgJ3BsYWNlc19jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlcyA9IHNlYXJjaEJveC5nZXRQbGFjZXMoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwbGFjZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0YWtlIG9ubHkgMSBzcG90XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlID0gcGxhY2VzWzBdO1xuXG4gICAgICAgICAgICAgICAgLy8gd2hlbiBzZWFyY2ggaGFwcGVucywgbG9jYXRpb24gd2lsbCBiZSB1cGRhdGVkIGFzIHdlbGwgZm9yIHBvc3RcbiAgICAgICAgICAgICAgICAvLyBzY29wZS4kZW1pdCgncGxhY2UnLCBwbGFjZS5mb3JtYXR0ZWRfYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uKTtcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgPSBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sYXRpdHVkZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSA9IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxvbmdpdHVkZTtcblxuICAgICAgICAgICAgICAgIG1hcC5wYW5UbyhwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgbWFwLnNldFpvb20oMTYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRDbGlja01hcCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGNsaWNrIGV2ZW50IG9uIG1hcFxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShldmVudC5sYXRMbmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRNb3ZlVG9DdXJyZW50TG9jYXRpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBjbGljayBldmVudCBvbiBtYXBcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ2hlYWRpbmdfY2hhbmdlZCcsIGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0Q2VudGVyQ2hhbmdlZCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ2NlbnRlcl9jaGFuZ2VkJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gbWFwLmdldENlbnRlcigpLmxhdCgpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gbWFwLmdldENlbnRlcigpLmxuZygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gc2V0TG9hZFBvc3RNYXJrZXJzKClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gbWFudWFsbHkgcmVsb2FkIG1hcmtlcnNcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ21hcHR5cGVpZF9jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlSGVscGVyTWFya2VyKCk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlUG9zdE1hcmtlcigpO1xuICAgICAgICAgICAgICAgIGRyYXdQb3N0TWFya2VycygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbml0IHRoZSBtYXBcbiAgICAgICAgZnVuY3Rpb24gaW5pdE1hcCgpIHtcbiAgICAgICAgICAgIGlmIChtYXAgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZWxlbWVudFswXSwgbWFwT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldExvYWRQb3N0TWFya2VycygpO1xuXG4gICAgICAgICAgICAvLyBicm9hZGNhc3QgdG8gc2VuZCBtYXAgdG8gYXBwbGljYXRpb24gY3RybFxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ21hcEluaXQnLCBtYXApO1xuXG4gICAgICAgICAgICBzZXRDbGlja01hcCgpO1xuXG4gICAgICAgICAgICBzZXRTZWFyY2hCb3goKTtcblxuICAgICAgICAgICAgc2V0Q2VudGVyQ2hhbmdlZCgpO1xuXG4gICAgICAgICAgICBzZXRNb3ZlVG9DdXJyZW50TG9jYXRpb24oKTtcblxuICAgICAgICAgICAgZHJhd1Bvc3RNYXJrZXJzKCk7XG4gICAgICAgIH0gXG5cbiAgICAgICAgaW5pdE1hcCgpO1xuXG4gICAgICAgIC8qXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJMb2NTdWNjZXNzKHBvcykge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIGNoZWNrIHdlIGFyZSBvbiBwb3N0IHBhZ2Ugd2l0aCBtYXAgZmlyc3RcbiAgICAgICAgICAgIGlmIChzY29wZS5jdXJyZW50UGFnZUlkICE9IHNjb3BlLnBhZ2VJZC5wb3N0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgc3dhbCh7ICAgXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiV2UgZm91bmQgeW91IVwiLCAgIFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiRG8geW91IHdhbnQgdG8gbW92ZSB0byB5b3VyIGxvY2F0aW9uPyFcIiwgICBcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLCAgIFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMwMEIyRUUnLCAgIFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgbW92ZSBtZSFcIiwgICBcbiAgICAgICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2UgLFxuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICBmdW5jdGlvbigpeyAgXG4gICAgICAgICAgICAgICAgc3dhbCh7dGl0bGU6IFwiXCIsIHRleHQ6IFwiWW91IGhhdmUgYmVlbiBtb3ZlZCFcIiwgdGltZXI6IDgwMCwgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB1c2VyIHdhbnRzIHRvIG1vdmUsIGxldCBpdCBoYXBwZW4hXG4gICAgICAgICAgICAgICAgdmFyIGNyZCA9IHBvcy5jb29yZHM7XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gY3JkLmxhdGl0dWRlO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gY3JkLmxvbmdpdHVkZTtcblxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0xhdGl0dWRlIDogJyArIGNyZC5sYXRpdHVkZSk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTG9uZ2l0dWRlOiAnICsgY3JkLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTW9yZSBvciBsZXNzICcgKyBjcmQuYWNjdXJhY3kgKyAnIG1ldGVycy4nKTtcbiAgICAgICAgICAgICAgICB2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhjcmQubGF0aXR1ZGUsIGNyZC5sb25naXR1ZGUpO1xuXG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKGdvb2dsZUxvYyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbWFwLnBhblRvKGdvb2dsZUxvYylcbiAgICAgICAgICAgICAgICBtYXAuc2V0Wm9vbSgxNSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJMb2NFcnJvcihlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRVJST1IoJyArIGVyci5jb2RlICsgJyk6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbml0IG1hcCBhbmQgcGxhY2Ugc29tZSBtYXJrZXJzLCBzbyBldmVyeXRoaW5nIHN0YXJ0IHdpdGggdGhpcyBmdW5jdGlvbi5cbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihnZXRDdXJyTG9jU3VjY2VzcywgZ2V0Q3VyckxvY0Vycm9yKTtcblxuICAgICAgICAvLyBzd2FsKHsgICB0aXRsZTogXCJcIiwgICB0ZXh0OiBcIkdldHRpbmcgY3VycmVudCBsb2NhdGlvbi4uXCIsICAgdGltZXI6IDIwMDAsICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlIH0pO1xuICAgICAgICAqL1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwibWFwLWNhbnZhc1wiPjwvZGl2PicsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIGxpbms6IGxpbmtcbiAgICB9O1xufSk7XG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1V0aWxTdmMnLCBmdW5jdGlvbigpe1xuXHR2YXIgc3ZjID0gdGhpcztcblxuXHRzdmMuZGVnMnJhZCA9IGZ1bmN0aW9uKGRlZykge1xuXHQgIHJldHVybiBkZWcgKiAoTWF0aC5QSS8xODApO1xuXHR9O1xuXG5cdHN2Yy5nZXREaXN0YW5jZUZyb21MYXRMb25JbkttID0gZnVuY3Rpb24gKGxhdDEsbG9uMSxsYXQyLGxvbjIpIHtcblx0ICB2YXIgUiA9IDYzNzE7XG5cdCAgdmFyIGRMYXQgPSBzdmMuZGVnMnJhZChsYXQyLWxhdDEpO1xuXHQgIHZhciBkTG9uID0gc3ZjLmRlZzJyYWQobG9uMi1sb24xKTsgXG5cdCAgdmFyIGEgPSBcblx0ICAgIE1hdGguc2luKGRMYXQvMikgKiBNYXRoLnNpbihkTGF0LzIpICtcblx0ICAgIE1hdGguY29zKHN2Yy5kZWcycmFkKGxhdDEpKSAqIE1hdGguY29zKHN2Yy5kZWcycmFkKGxhdDIpKSAqIFxuXHQgICAgTWF0aC5zaW4oZExvbi8yKSAqIE1hdGguc2luKGRMb24vMilcblx0ICAgIDsgXG5cdCAgdmFyIGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxLWEpKTsgXG5cdCAgdmFyIGQgPSBSICogYztcblx0ICByZXR1cm4gZDtcblx0fTtcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU3ZjLCAkd2luZG93LCAkZG9jdW1lbnQpe1xyXHJcdC8qIGVtaXQgYnJvYWRjYXN0IGZvciBjdXJyZW50IHBhZ2VJZCAqL1xyXHQkc2NvcGUuJGVtaXQoJ3BhZ2VjaGFuZ2UnLCAkc2NvcGUucGFnZUlkLnBvc3QpO1xyXHJcdCRzY29wZS5wb3N0cyA9IFtdO1xyXHJcdHZhciBfcGFnZSA9IDA7XHJcdHZhciBfcGVyUGFnZSA9IDEwO1xyXHJcdC8qIG1vdmUgdG8gcG9zdCdzIGxvY2F0aW9uICovXHJcdCRzY29wZS5tb3ZlVG9Mb2MgPSBmdW5jdGlvbihpZCl7XHJcdFx0dmFyIHBvc3QgPSAoJHNjb3BlLnBvc3RzW2lkXSk7XHJcclx0XHR2YXIgbG9jYXRpb24gPSBhbmd1bGFyLmZyb21Kc29uKHBvc3Quc2V4TG9jYXRpb24pO1xyXHRcdHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCwgbG9jYXRpb24ubG9uKTtcclxyXHRcdCRzY29wZS5tYXAucGFuVG8oZ29vZ2xlTG9jKTtcclx0XHQkc2NvcGUubWFwLnNldFpvb20oMTYpO1xyXHJcdFx0LyogdXNpbmcgYW5ndWxhci1zY3JvbGwgdG8gbW92ZSB0byB0aGUgdG9wIHNtb290aGx5ICovXHJcdFx0dmFyIHRvcCA9IDA7XHIgICAgXHR2YXIgZHVyYXRpb24gPSA0ODA7XHIgICAgXHQkZG9jdW1lbnQuc2Nyb2xsVG9wKHRvcCwgZHVyYXRpb24pLnRoZW4oZnVuY3Rpb24oKSB7XHIgICAgIFx0XHRjb25zb2xlICYmIGNvbnNvbGUubG9nKCdZb3UganVzdCBzY3JvbGxlZCB0byB0aGUgdG9wIScpO1xyICAgIFx0fSk7XHJcclx0XHQvKiR3aW5kb3cuc2Nyb2xsKDAsIDApOyovXHJcdH07XHJcclx0JHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpIHtcclx0XHQvKiBnZXQgYXV0b2NvbXBsZXRlZCBwbGFjZSBhbmQgcmVzZXQoc2V0IHRvIHVuZGVmaW5lZCkgKi9cclx0XHR2YXIgcGxhY2UgPSAkc2NvcGUuc2V4UGxhY2VBdXRvY29tcGxldGVkO1xyXHRcdHZhciBsb2NhdGlvbiA9ICRzY29wZS5wb3N0TG9jYXRpb247XHJcclx0XHRjb25zb2xlLmxvZyhcImxvY2F0aW9uOlwiICsgbG9jYXRpb24ubGF0ICsgJywnICsgbG9jYXRpb24ubG9uICsgJ1xcbiBwbGFjZTonICsgcGxhY2UpO1xyXHRcdHZhciBsb2NhdGlvbkpTT04gPSBKU09OLnN0cmluZ2lmeShsb2NhdGlvbik7XHJcclx0XHRjb25zb2xlLmxvZygkc2NvcGUuc2V4VGltZSk7XHJcclx0XHRQb3N0c1N2Yy5jcmVhdGUoXHJcdFx0e1xyXHRcdFx0dXNlck5hbWU6IHVuZGVmaW5lZCxcclx0XHRcdHVzZXJBZ2U6ICB1bmRlZmluZWQsXHJcdFx0XHRzZXhQbGFjZTogcGxhY2UsXHJcdFx0XHRzZXhUaW1lOiAgJHNjb3BlLnNleFRpbWUsXHJcdFx0XHRzZXhUYXJnZXQ6ICRzY29wZS5zZXhUYXJnZXQsXHJcdFx0XHRzZXhMb2NhdGlvbjogbG9jYXRpb25KU09OXHJcdFx0fSlcclx0XHQuc3VjY2VzcyhmdW5jdGlvbihwb3N0KXtcclx0XHRcdHZhciBtc2cgPSBcIllvdSB3YW50ZWQgdG8gaGF2ZSBzZXggd2l0aCBcIiArIFxyXHRcdFx0cG9zdC5zZXhUYXJnZXQ7XHJcdFx0XHRzd2FsKFwiR3JlYXQhXCIsIG1zZywgXCJzdWNjZXNzXCIpO1xyXHJcdFx0XHQvKiBtYW51YWxseSByZWxvYWQgbWFya2VycyBcclx0XHRcdHVzaW5nIG1hcHR5cGVpZCBzaW5jZSBpdHMgbW9zdCBsZWFzdCB1c2VkIGV2ZW50LCAtIGtpbmQgb2YgaGFja3kgd2F5IHRvIGRvIGl0XHJcdFx0XHQqL1xyXHRcdFx0Z29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcigkc2NvcGUubWFwLCAnbWFwdHlwZWlkX2NoYW5nZWQnKTtcclxyXHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XHJcclx0XHRcdC8qIHJlc2V0IGlucHV0IGZvcm1zICovXHJcdFx0XHQkc2NvcGUuc2V4VGltZSAgPSBudWxsO1xyXHRcdFx0JHNjb3BlLnNleFRhcmdldCA9IG51bGw7XHJcdFx0fSlcclx0XHQuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKXtcclx0XHRcdGlmIChzdGF0dXMgPT0gNDAxKVxyXHRcdFx0e1xyXHRcdFx0XHRzd2FsKFwiTG9nLWluIGZhaWxlZFwiLCBcIlBsZWFzZSBsb2cgaW5cIiwgXCJlcnJvclwiKTtcclx0XHRcdH1cclx0XHRcdGVsc2Vcclx0XHRcdHtcclx0XHRcdFx0c3dhbChcIlBvc3QgZmFpbGVkXCIsIFwiUGxlYXNlIGNvbXBsZXRlIHRoZSBmcm9tIGNvcnJlY3RseVwiLCBcImVycm9yXCIpO1xyXHRcdFx0fVxyXHRcdH0pO1xyXHR9O1xyXHJcdCRzY29wZS5yZXF1ZXN0RmV0Y2ggPSBmdW5jdGlvbigpIHtcclx0XHRQb3N0c1N2Yy5mZXRjaChfcGFnZSwgX3BlclBhZ2UpXHJcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdHMpe1xyXHRcdFx0X3BhZ2UrKztcclx0XHRcdGNvbnNvbGUubG9nKCdQb3N0cyBoYXZlIGJlZW4gbG9hZGVkIHN1Y2Nlc3NmdWxseSBmb3IgZnJvbnQgcGFnZScpO1xyXHRcdFx0JHNjb3BlLnBvc3RzID0gJHNjb3BlLnBvc3RzLmNvbmNhdChwb3N0cyk7XHJcdFx0fSk7XHJcdH07XHJcclx0JHNjb3BlLnJlcXVlc3RGZXRjaCgpO1xyfSk7XHIiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKXtcblx0dGhpcy5mZXRjaEFsbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcblx0fTtcblxuXHR0aGlzLmZldGNoID0gZnVuY3Rpb24ocGFnZSwgcGVycGFnZSl7XG5cdFx0dmFyIHVybCA9ICcvYXBpL3Bvc3RzLycgKyBwYWdlICsgJz9wZXJwYWdlPScgKyBwZXJwYWdlO1xuXHRcdHJldHVybiAkaHR0cC5nZXQodXJsKTtcblx0fTtcblxuXHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG5cdH07XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBY2NvdW50Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKXtcblx0LyogZW1pdCBicm9hZGNhc3QgZm9yIGN1cnJlbnQgcGFnZUlkICovXG5cdCRzY29wZS4kZW1pdCgncGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQuYWNjb3VudCk7XG5cblx0JHNjb3BlLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24obmV3UGFzc3dvcmQsIHBhc3N3b3JkKXtcblx0XHRVc2VyU3ZjLmNoYW5nZVBhc3N3b3JkKG5ld1Bhc3N3b3JkLCBwYXNzd29yZClcblx0XHQudGhlbihcblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHN3YWwoJycsIFwiUGFzc3dvcmQgaGF2ZSBiZWVuIGNoYW5nZWRcIiwgXCJzdWNjZXNzXCIpO1xuXHRcdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHRcdFx0fSxcblx0XHRcdGZ1bmN0aW9uKGVycil7XG5cdFx0XHRcdGlmIChlcnIuc3RhdHVzID09IDQwMSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN3YWwoJycsIFwiT3JpZ2luYWwgcGFzc3dvcmQgaXMgd3JvbmcuXCIsIFwiZXJyb3JcIik7XHRcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzd2FsKCcnLCBcIkNhbiBub3QgY2hhbmdlIHBhc3N3b3JkLlwiLFwiZXJyb3JcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHR9O1xufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpe1xuXHQkc2NvcGUuJGVtaXQoJ3BhZ2VjaGFuZ2UnLCAkc2NvcGUucGFnZUlkLmxvZ2luKTtcblxuXHQvLyBVc2VyU3Zj7ISc67mE7Iqk7J2YIGxvZ2lu7ZWo7IiY7JeQ7IScIOuwm+ydgCDsnKDsoIDsoJXrs7Trpbxcblx0Ly8g7LWc7IOB7JyEIOy9mO2KuOuhpOufrOyduCBBcHBsaWNhdGlvbkN0cmzsnZggJHNjb3Bl66GcIOqwkuydhCDrs7TrgrTquLAg7JyE7ZWcIOyghO2MjOulvCDrs7Trgrjri6QuXG5cdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG5cdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVzZXIpe1xuXHRcdFx0JGxvY2F0aW9uLnBhdGgoJy8nKTtcblx0XHRcdCRyb290U2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcik7XG5cdFx0fSxcblx0XHRmdW5jdGlvbiAoZXJyb3Ipe1xuXHRcdFx0c3dhbChcIkxvZy1pbiBmYWlsZWQhXCIsIFwiUGFzc3dvcmQvSUQgd3JvbmdcIiwgXCJlcnJvclwiKTtcblx0XHR9KTtcblx0XHQvKiBvciBpdCBjYW4gYmUgdGhpc1xuXHRcdC5jYXRjaChmdW5jdGlvbiAoKXtcblx0XHRcdGFsZXJ0KFwiSUQgb3IgUGFzc3dvcmQgaXMgd3JvbmcuXCIpO1xuXHRcdH0pO1xuXHRcdCovXG5cdH07XG59KTtcbiIsIlxuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcblx0J25nUm91dGUnLFxuXHQnZHVTY3JvbGwnLFxuXHQnaW5maW5pdGUtc2Nyb2xsJ1xuXSk7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkd2luZG93LCBVc2VyU3ZjKXtcblx0JHNjb3BlLnBhZ2VJZCA9IHsgXG5cdFx0cG9zdCAgICAgOiAwLFxuXHRcdHJlZ2lzdGVyIDogMSxcblx0XHRsb2dpbiAgICA6IDIsXG5cdFx0YWNjb3VudCAgOiAzLCBcblx0fTtcblxuXHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0JHNjb3BlLmNvbGxhcHNlID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0fTtcblxuXHQvKiBtb3ZlIHRvIGN1cnJlbnQgbG9jYXRpb24gKi9cblx0JHNjb3BlLm1vdmVUb0N1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG5cdFx0ZnVuY3Rpb24gZ2V0Q3VyckxvY1N1Y2Nlc3MocG9zKSB7XG4gICAgICAgICAgICAvKiBtYWtlIHN1cmUgdG8gY2hlY2sgd2UgYXJlIG9uIHBvc3QgcGFnZSB3aXRoIG1hcCBmaXJzdCAqL1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50UGFnZUlkICE9ICRzY29wZS5wYWdlSWQucG9zdClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciBjcmQgPSBwb3MuY29vcmRzO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gY3JkLmxhdGl0dWRlO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBjcmQubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdMYXRpdHVkZSA6ICcgKyBjcmQubGF0aXR1ZGUpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTG9uZ2l0dWRlOiAnICsgY3JkLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdNb3JlIG9yIGxlc3MgJyArIGNyZC5hY2N1cmFjeSArICcgbWV0ZXJzLicpO1xuICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoY3JkLmxhdGl0dWRlLCBjcmQubG9uZ2l0dWRlKTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcigkc2NvcGUubWFwLCAnaGVhZGluZ19jaGFuZ2VkJywgZ29vZ2xlTG9jKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJHNjb3BlLm1hcC5wYW5Ubyhnb29nbGVMb2MpXG4gICAgICAgICAgICAkc2NvcGUubWFwLnNldFpvb20oMTUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3VyckxvY0Vycm9yKGVycikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdFUlJPUignICsgZXJyLmNvZGUgKyAnKTogJyArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGluaXQgbWFwIGFuZCBwbGFjZSBzb21lIG1hcmtlcnMsIHNvIGV2ZXJ5dGhpbmcgc3RhcnQgd2l0aCB0aGlzIGZ1bmN0aW9uLiAqL1xuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGdldEN1cnJMb2NTdWNjZXNzLCBnZXRDdXJyTG9jRXJyb3IpO1xuXG4gICAgICAgIHN3YWwoeyAgIHRpdGxlOiBcIlwiLCAgIHRleHQ6IFwiTW92aW5nIHRvIGN1cnJlbnQgbG9jYXRpb24uLlwiLCAgIHRpbWVyOiAxNTAwLCAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSB9KTtcblx0fTtcblxuXHQkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUuY29sbGFwc2UoKTtcblxuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcblxuXHRcdFVzZXJTdmMubG9nb3V0KCk7XG5cblx0XHRzd2FsKCcnLFwiU3VjY2Vzc2Z1bGx5IGxvZ2dlZCBvdXRcIik7XG5cdH07XG5cblx0LyogdXNpbmcgcm9vdFNjb3BlIHNvIHRoYXQgVXNlclN2YyBjYW4gZW1pdCBhIGJyb2FkY2FzdCAqL1xuXHQkcm9vdFNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKXtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHR9KTtcblxuXHQkc2NvcGUuJG9uKCdsb2MnLCBmdW5jdGlvbihfLCBsb2NhdGlvbil7XG5cdFx0Y29uc29sZS5sb2cobG9jYXRpb24pO1xuXHRcdHZhciBsYXQgPSBsb2NhdGlvbi5sYXQoKTtcblx0XHR2YXIgbG9uID0gbG9jYXRpb24ubG5nKCk7XG5cdFx0JHNjb3BlLnBvc3RMb2NhdGlvbiA9IHtcblx0XHRcdGxhdDogbGF0LFxuXHRcdFx0bG9uOiBsb25cblx0XHR9O1xuXHRcdGNvbnNvbGUubG9nKCRzY29wZS5wb3N0TG9jYXRpb24pO1xuXHR9KTtcblxuXHQkc2NvcGUuJG9uKCdwYWdlY2hhbmdlJywgZnVuY3Rpb24oXywgcGFnZUlkKXtcblx0XHQkc2NvcGUuY3VycmVudFBhZ2VJZCA9IHBhZ2VJZDtcblx0fSk7XG5cblx0JHNjb3BlLiRvbigncGxhY2UnLCBmdW5jdGlvbihfLCBwbGFjZSl7XG5cdFx0Ly8gRm9yY2luZyB0aGUgdXBkYXRlIHdpdGggJGFwcGx5KCkgbWV0aG9kIG9uICRzY29wZVxuXHRcdC8vIHByb2JsZW0gcmVsYXRlZCBub3RlOiBodHRwOi8vd3d3LmplZmZyeWhvdXNlci5jb20vaW5kZXguY2ZtLzIwMTQvNi8yL0hvdy1kby1JLXJ1bi1jb2RlLXdoZW4tYS12YXJpYWJsZS1jaGFuZ2VzLXdpdGgtQW5ndWxhckpTXG5cdFx0aWYoISRzY29wZS4kJHBoYXNlKSB7IC8vIGNoZWNrIGlmIGEgJGRpZ2VzdCBpcyBhbHJlYWR5IGluIHByb2dyZXNzIGJ5IGNoZWNraW5nICRzY29wZS4kJHBoYXNlLlxuXHRcdFx0JHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuXHRcdFx0XHRcdCRzY29wZS5zZXhQbGFjZUF1dG9jb21wbGV0ZWQgPSBwbGFjZTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9XG5cblx0fSk7XG5cblx0JHNjb3BlLiRvbignbWFwSW5pdCcsIGZ1bmN0aW9uKF8sIG1hcCl7XG5cdFx0JHNjb3BlLm1hcCA9IG1hcDtcblx0fSk7XG5cblx0VXNlclN2Yy5yZW1haW5Mb2dpbigpO1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpe1xuXHQkcm91dGVQcm92aWRlclxuXHQud2hlbignLycsIFxuXHRcdHtcblx0XHRcdGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCBcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9wb3N0cy5odG1sJ1xuXHRcdH0pXG5cdC53aGVuKCcvcmVnaXN0ZXInLCBcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9yZWdpc3Rlci5odG1sJ1xuXHRcdH0pXG5cdC53aGVuKCcvbG9naW4nLFxuXHRcdHtcblx0XHRcdGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICcvdGVtcGxhdGVzL2xvZ2luLmh0bWwnXG5cdFx0fSlcblx0LndoZW4oJy9hY2NvdW50Jyxcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnQWNjb3VudEN0cmwnLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICcvdGVtcGxhdGVzL2FjY291bnQuaHRtbCdcblx0XHR9KVxuXHQvLyBSZWRpcmVjdCB0byB0aGUgcm9vdCBwYWdlLlxuXHQub3RoZXJ3aXNlKFxuXHRcdHtcbiAgIFx0XHRcdHJlZGlyZWN0VG86ICcvJ1xuXHRcdH0pO1xufSk7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uZGlyZWN0aXZlKCdhcHBNYXAnLCBmdW5jdGlvbihQb3N0c1N2YywgVXRpbFN2Yykge1xuICAgIC8vIGRpcmVjdGl2ZSBsaW5rIGZ1bmN0aW9uXG4gICAgdmFyIGxpbmsgPSBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIG1hcDtcbiAgICAgICAgXG4gICAgICAgIHZhciBpbWFnZVBvc3QgPSB7XG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2NhdGNobWUuaWZ5b3VjYW4uY29tL2ltYWdlcy9waWN0dXJlcy9JWUNfSWNvbnMvSVlDX0xvY2F0aW9uX0ljb25fU21hbGwucG5nJyxcbiAgICAgICAgICAgIHNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEwMCwgMTAwKSxcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTcsIDM0KSxcbiAgICAgICAgICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDE3LCAyNSlcbiAgICAgICAgfTtcblxuICAgICAgICAgdmFyIGltYWdlVGFyZ2V0ID0ge1xuICAgICAgICAgICAgdXJsOiAnaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvVS9QL2ovTS9JL2kveC1tYXJrLXllbGxvdy1tZC5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTAwLCAxMDApLFxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBhbmNob3I6IG5ldyBnb29nbGUubWFwcy5Qb2ludCgxNywgMzQpLFxuICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMjUsIDI1KVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG1hcCBjb25maWdcbiAgICAgICAgY29uc29sZS5sb2coJ3dpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgJywgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSApO1xuXG4gICAgICAgIHZhciBpbml0aWFsTWFwQ2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZygzNC4wNSwgLTExOC4yNCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWlzTmFOKHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUpICYmICFpc05hTih3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGluaXRpYWxNYXBDZW50ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUsIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCd3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlICcsIHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGluaXRpYWxNYXBDZW50ZXIpO1xuXG4gICAgICAgIHZhciBtYXBPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGNlbnRlciAgICAgIDogaW5pdGlhbE1hcENlbnRlcixcbiAgICAgICAgICAgICAgICB6b29tICAgICAgICA6IDE1LFxuICAgICAgICAgICAgICAgIE1hcFR5cGVJZCAgIDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsXG4gICAgICAgICAgICAgICAgc2Nyb2xsd2hlZWwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzdHJlZXRWaWV3Q29udHJvbDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBkcmF3IG1hcCB3aXRoIGhlbHBlciBtYXJrZXJzXG4gICAgICAgIHZhciBoZWxwZXJNYXJrZXJzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIGRyYXdIZWxwZXJNYXJrZXIobG9jYXRpb24pe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gaGVscGVyTWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlbHBlck1hcmtlcnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbG9jYXRpb24sIFxuICAgICAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgICAgIGljb246IGltYWdlVGFyZ2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGhlbHBlck1hcmtlcnMucHVzaChtYXJrZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlSGVscGVyTWFya2VyKCl7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSBoZWxwZXJNYXJrZXJzW2ldOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVscGVyTWFya2VycyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZHJhd0FuZFNldFBsYWNlKGxvY2F0aW9uKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBvbmx5IGVuYWJsZSB3aGVuIGxvZ2dlZCBpblxuICAgICAgICAgICAgaWYgKCFzY29wZS5jdXJyZW50VXNlcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChpbmZvV2luZG93KVxuICAgICAgICAgICAgICAgIGluZm9XaW5kb3cuY2xvc2UoKTtcblxuICAgICAgICAgICAgdmFyIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBsb2NhdGlvbiBpbmZvcihsb24sbGF0KVxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ2xvYycsIGxvY2F0aW9uKTtcblxuICAgICAgICAgICAgZHJhd0hlbHBlck1hcmtlcihsb2NhdGlvbik7XG5cbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBwbGFjZSBmb3JtYXR0ZWRfYWRkcmVzcyBhbmQgZHJhdyBpY29uXG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKCB7ICdsYXRMbmcnOiBsb2NhdGlvbiB9LCBmdW5jdGlvbihyZXN1bHRzLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAvLyBhcyB1c2VyIGNsaWNrcyBvbiB0aGUgbWFwLFxuICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgdG8gc2F2ZSB0aGUgZm9ybWF0dGVkIGFkZHJlc3MgaW4gJHNjb3BlIGFuZFxuICAgICAgICAgICAgICAgIC8vIGl0IHdpbGwgYmUgdXNlZCB0aHJvdWdoIHBvc3RzLmN0cmxcbiAgICAgICAgICAgICAgICAvLyBlbWl0IGJyb2FkY2FzZSAncGxhY2UnIGFuZCBzZW5kIHRoaXMgdG8gYXBwbGljYXRpb24uY3RybFxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBmb3JtYXR0ZWRfYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgncGxhY2UnLCByZXN1bHRzWzFdLmZvcm1hdHRlZF9hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICBzd2FsKFwiXCIsXCJMb2NhdGlvbiBkb2VzIG5vdCBleGlzdHNcIik7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdwbGFjZScsIFwiTG9jYXRpb24gZG9lcyBub3QgZXhpc3RzXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgIC8vIHBsYWNlIGEgbWFya2VyIGFuZCBpbmZvV2luZG93XG4gICAgICAgIHZhciBpbmZvV2luZG93O1xuICAgICAgICB2YXIgbWFya2VycyA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBkcmF3UG9zdE1hcmtlcnMoKSB7XG4gICAgICAgICAgICB2YXIgcG9zdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBQb3N0c1N2Yy5mZXRjaEFsbCgpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgcG9zdHMgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdCA9IHBvc3RzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcG9zdC5oYXNPd25Qcm9wZXJ0eSgnc2V4TG9jYXRpb24nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGFuZ3VsYXIuZnJvbUpzb24ocG9zdC5zZXhMb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCwgbG9jYXRpb24ubG9uKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBnb29nbGVMb2MsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlNleFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaW1hZ2VQb3N0XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIobWFya2VyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgbWFya2VyIHRvIGFycmF5XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnMucHVzaChtYXJrZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdXNlIG92ZXIgdG8gdmlldyB0aGUgcG9zdCBpbmZvcm1hdGlvbiAtIGNsb3N1cmVcbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCAoZnVuY3Rpb24obWFya2VyLCBwb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2Ugd2luZG93IGlmIG5vdCB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mb1dpbmRvdyAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2IGlkPVwic2V4cGxhY2VcIj48cD4gVGFyZ2V0OiAnICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdC5zZXhUYXJnZXQgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9wPjxwPiBBZ2U6ICcgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0LnVzZXJBZ2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3A+PC9kaXY+JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgd2luZG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZm9XaW5kb3dPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBodG1sLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGl4ZWxPZmZzZXQ6IG5ldyBnb29nbGUubWFwcy5TaXplKC0zNy41LCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyhpbmZvV2luZG93T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkobWFya2VyLCBwb3N0KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbW91c2Ugb3V0IHRvIGNsb3NlIHRoZSBwb3N0IGluZm8gd2luZG93XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9XaW5kb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBvc3RNYXJrZXIoKXtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IG1hcmtlcnNbaV07IGkrKykge1xuICAgICAgICAgICAgICAgIG1hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXJrZXJzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTZWFyY2hCb3goKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHNlYXJjaCBib3ggYW5kIGxpbmsgaXQgdG8gdGhlIFVJIGVsZW1lbnQuXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhYy1pbnB1dCcpKTsgLy8gQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9ICBcbiAgICAgICAgICAgIHZhciBjdXJyTG9jQnRuID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tY3VycicpKTsgICAgICBcbiAgICAgICAgICAgIG1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uVE9QX0xFRlRdLnB1c2goaW5wdXQpO1xuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfUklHSFRdLnB1c2goY3VyckxvY0J0bik7XG5cbiAgICAgICAgICAgIHZhciBzZWFyY2hCb3ggPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLlNlYXJjaEJveCgoaW5wdXQpKTsgLy8gQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9IFxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIHRoZSBldmVudCBmaXJlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gaXRlbSBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gcGljayBsaXN0LiBSZXRyaWV2ZSB0aGUgbWF0Y2hpbmcgcGxhY2VzIGZvciB0aGF0IGl0ZW0uXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihzZWFyY2hCb3gsICdwbGFjZXNfY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZXMgPSBzZWFyY2hCb3guZ2V0UGxhY2VzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGFrZSBvbmx5IDEgc3BvdFxuICAgICAgICAgICAgICAgIHZhciBwbGFjZSA9IHBsYWNlc1swXTtcblxuICAgICAgICAgICAgICAgIC8vIHdoZW4gc2VhcmNoIGhhcHBlbnMsIGxvY2F0aW9uIHdpbGwgYmUgdXBkYXRlZCBhcyB3ZWxsIGZvciBwb3N0XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuJGVtaXQoJ3BsYWNlJywgcGxhY2UuZm9ybWF0dGVkX2FkZHJlc3MpO1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubGF0aXR1ZGU7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sb25naXR1ZGU7XG5cbiAgICAgICAgICAgICAgICBtYXAucGFuVG8ocGxhY2UuZ2VvbWV0cnkubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIG1hcC5zZXRab29tKDE2KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0Q2xpY2tNYXAoKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBjbGljayBldmVudCBvbiBtYXBcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBkcmF3QW5kU2V0UGxhY2UoZXZlbnQubGF0TG5nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0TW92ZVRvQ3VycmVudExvY2F0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gY2xpY2sgZXZlbnQgb24gbWFwXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdoZWFkaW5nX2NoYW5nZWQnLCBmdW5jdGlvbihsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShsb2NhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldENlbnRlckNoYW5nZWQoKVxuICAgICAgICB7XG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdjZW50ZXJfY2hhbmdlZCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSA9IG1hcC5nZXRDZW50ZXIoKS5sYXQoKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSA9IG1hcC5nZXRDZW50ZXIoKS5sbmcoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHNldExvYWRQb3N0TWFya2VycygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIG1hbnVhbGx5IHJlbG9hZCBtYXJrZXJzXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdtYXB0eXBlaWRfY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUhlbHBlck1hcmtlcigpO1xuICAgICAgICAgICAgICAgIHJlbW92ZVBvc3RNYXJrZXIoKTtcbiAgICAgICAgICAgICAgICBkcmF3UG9zdE1hcmtlcnMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW5pdCB0aGUgbWFwXG4gICAgICAgIGZ1bmN0aW9uIGluaXRNYXAoKSB7XG4gICAgICAgICAgICBpZiAobWFwID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGVsZW1lbnRbMF0sIG1hcE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRMb2FkUG9zdE1hcmtlcnMoKTtcblxuICAgICAgICAgICAgLy8gYnJvYWRjYXN0IHRvIHNlbmQgbWFwIHRvIGFwcGxpY2F0aW9uIGN0cmxcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdtYXBJbml0JywgbWFwKTtcblxuICAgICAgICAgICAgc2V0Q2xpY2tNYXAoKTtcblxuICAgICAgICAgICAgc2V0U2VhcmNoQm94KCk7XG5cbiAgICAgICAgICAgIHNldENlbnRlckNoYW5nZWQoKTtcblxuICAgICAgICAgICAgc2V0TW92ZVRvQ3VycmVudExvY2F0aW9uKCk7XG5cbiAgICAgICAgICAgIGRyYXdQb3N0TWFya2VycygpO1xuICAgICAgICB9IFxuXG4gICAgICAgIGluaXRNYXAoKTtcblxuICAgICAgICAvKlxuICAgICAgICBmdW5jdGlvbiBnZXRDdXJyTG9jU3VjY2Vzcyhwb3MpIHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0byBjaGVjayB3ZSBhcmUgb24gcG9zdCBwYWdlIHdpdGggbWFwIGZpcnN0XG4gICAgICAgICAgICBpZiAoc2NvcGUuY3VycmVudFBhZ2VJZCAhPSBzY29wZS5wYWdlSWQucG9zdClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHN3YWwoeyAgIFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIldlIGZvdW5kIHlvdSFcIiwgICBcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkRvIHlvdSB3YW50IHRvIG1vdmUgdG8geW91ciBsb2NhdGlvbj8hXCIsICAgXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwgICBcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjMDBCMkVFJywgICBcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIG1vdmUgbWUhXCIsICAgXG4gICAgICAgICAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlICxcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgZnVuY3Rpb24oKXsgIFxuICAgICAgICAgICAgICAgIHN3YWwoe3RpdGxlOiBcIlwiLCB0ZXh0OiBcIllvdSBoYXZlIGJlZW4gbW92ZWQhXCIsIHRpbWVyOiA4MDAsIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZX0pO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgdXNlciB3YW50cyB0byBtb3ZlLCBsZXQgaXQgaGFwcGVuIVxuICAgICAgICAgICAgICAgIHZhciBjcmQgPSBwb3MuY29vcmRzO1xuXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSA9IGNyZC5sYXRpdHVkZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSA9IGNyZC5sb25naXR1ZGU7XG5cbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdMYXRpdHVkZSA6ICcgKyBjcmQubGF0aXR1ZGUpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0xvbmdpdHVkZTogJyArIGNyZC5sb25naXR1ZGUpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ01vcmUgb3IgbGVzcyAnICsgY3JkLmFjY3VyYWN5ICsgJyBtZXRlcnMuJyk7XG4gICAgICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoY3JkLmxhdGl0dWRlLCBjcmQubG9uZ2l0dWRlKTtcblxuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShnb29nbGVMb2MpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG1hcC5wYW5Ubyhnb29nbGVMb2MpXG4gICAgICAgICAgICAgICAgbWFwLnNldFpvb20oMTUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRDdXJyTG9jRXJyb3IoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0VSUk9SKCcgKyBlcnIuY29kZSArICcpOiAnICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW5pdCBtYXAgYW5kIHBsYWNlIHNvbWUgbWFya2Vycywgc28gZXZlcnl0aGluZyBzdGFydCB3aXRoIHRoaXMgZnVuY3Rpb24uXG4gICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oZ2V0Q3VyckxvY1N1Y2Nlc3MsIGdldEN1cnJMb2NFcnJvcik7XG5cbiAgICAgICAgLy8gc3dhbCh7ICAgdGl0bGU6IFwiXCIsICAgdGV4dDogXCJHZXR0aW5nIGN1cnJlbnQgbG9jYXRpb24uLlwiLCAgIHRpbWVyOiAyMDAwLCAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSB9KTtcbiAgICAgICAgKi9cbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHRlbXBsYXRlOiAnPGRpdiBpZD1cIm1hcC1jYW52YXNcIj48L2Rpdj4nLFxuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBsaW5rOiBsaW5rXG4gICAgfTtcbn0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1V0aWxTdmMnLCBmdW5jdGlvbigpe1xuXHR2YXIgc3ZjID0gdGhpcztcblxuXHRzdmMuZGVnMnJhZCA9IGZ1bmN0aW9uKGRlZykge1xuXHQgIHJldHVybiBkZWcgKiAoTWF0aC5QSS8xODApO1xuXHR9O1xuXG5cdHN2Yy5nZXREaXN0YW5jZUZyb21MYXRMb25JbkttID0gZnVuY3Rpb24gKGxhdDEsbG9uMSxsYXQyLGxvbjIpIHtcblx0ICB2YXIgUiA9IDYzNzE7XG5cdCAgdmFyIGRMYXQgPSBzdmMuZGVnMnJhZChsYXQyLWxhdDEpO1xuXHQgIHZhciBkTG9uID0gc3ZjLmRlZzJyYWQobG9uMi1sb24xKTsgXG5cdCAgdmFyIGEgPSBcblx0ICAgIE1hdGguc2luKGRMYXQvMikgKiBNYXRoLnNpbihkTGF0LzIpICtcblx0ICAgIE1hdGguY29zKHN2Yy5kZWcycmFkKGxhdDEpKSAqIE1hdGguY29zKHN2Yy5kZWcycmFkKGxhdDIpKSAqIFxuXHQgICAgTWF0aC5zaW4oZExvbi8yKSAqIE1hdGguc2luKGRMb24vMilcblx0ICAgIDsgXG5cdCAgdmFyIGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxLWEpKTsgXG5cdCAgdmFyIGQgPSBSICogYztcblx0ICByZXR1cm4gZDtcblx0fTtcbn0pO1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHIuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMsICR3aW5kb3csICRkb2N1bWVudCl7XHJcclx0LyogZW1pdCBicm9hZGNhc3QgZm9yIGN1cnJlbnQgcGFnZUlkICovXHJcdCRzY29wZS4kZW1pdCgncGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQucG9zdCk7XHJcclx0JHNjb3BlLnBvc3RzID0gW107XHJcclx0dmFyIF9wYWdlID0gMDtcclx0dmFyIF9wZXJQYWdlID0gMTA7XHJcclx0LyogbW92ZSB0byBwb3N0J3MgbG9jYXRpb24gKi9cclx0JHNjb3BlLm1vdmVUb0xvYyA9IGZ1bmN0aW9uKGlkKXtcclx0XHR2YXIgcG9zdCA9ICgkc2NvcGUucG9zdHNbaWRdKTtcclxyXHRcdHZhciBsb2NhdGlvbiA9IGFuZ3VsYXIuZnJvbUpzb24ocG9zdC5zZXhMb2NhdGlvbik7XHJcdFx0dmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0LCBsb2NhdGlvbi5sb24pO1xyXHJcdFx0JHNjb3BlLm1hcC5wYW5Ubyhnb29nbGVMb2MpO1xyXHRcdCRzY29wZS5tYXAuc2V0Wm9vbSgxNik7XHJcclx0XHQvKiB1c2luZyBhbmd1bGFyLXNjcm9sbCB0byBtb3ZlIHRvIHRoZSB0b3Agc21vb3RobHkgKi9cclx0XHR2YXIgdG9wID0gMDtcciAgICBcdHZhciBkdXJhdGlvbiA9IDQ4MDtcciAgICBcdCRkb2N1bWVudC5zY3JvbGxUb3AodG9wLCBkdXJhdGlvbikudGhlbihmdW5jdGlvbigpIHtcciAgICAgXHRcdGNvbnNvbGUgJiYgY29uc29sZS5sb2coJ1lvdSBqdXN0IHNjcm9sbGVkIHRvIHRoZSB0b3AhJyk7XHIgICAgXHR9KTtcclxyXHRcdC8qJHdpbmRvdy5zY3JvbGwoMCwgMCk7Ki9cclx0fTtcclxyXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xyXHRcdC8qIGdldCBhdXRvY29tcGxldGVkIHBsYWNlIGFuZCByZXNldChzZXQgdG8gdW5kZWZpbmVkKSAqL1xyXHRcdHZhciBwbGFjZSA9ICRzY29wZS5zZXhQbGFjZUF1dG9jb21wbGV0ZWQ7XHJcdFx0dmFyIGxvY2F0aW9uID0gJHNjb3BlLnBvc3RMb2NhdGlvbjtcclxyXHRcdGNvbnNvbGUubG9nKFwibG9jYXRpb246XCIgKyBsb2NhdGlvbi5sYXQgKyAnLCcgKyBsb2NhdGlvbi5sb24gKyAnXFxuIHBsYWNlOicgKyBwbGFjZSk7XHJcdFx0dmFyIGxvY2F0aW9uSlNPTiA9IEpTT04uc3RyaW5naWZ5KGxvY2F0aW9uKTtcclxyXHRcdGNvbnNvbGUubG9nKCRzY29wZS5zZXhUaW1lKTtcclxyXHRcdFBvc3RzU3ZjLmNyZWF0ZShcclx0XHR7XHJcdFx0XHR1c2VyTmFtZTogdW5kZWZpbmVkLFxyXHRcdFx0dXNlckFnZTogIHVuZGVmaW5lZCxcclx0XHRcdHNleFBsYWNlOiBwbGFjZSxcclx0XHRcdHNleFRpbWU6ICAkc2NvcGUuc2V4VGltZSxcclx0XHRcdHNleFRhcmdldDogJHNjb3BlLnNleFRhcmdldCxcclx0XHRcdHNleExvY2F0aW9uOiBsb2NhdGlvbkpTT05cclx0XHR9KVxyXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHBvc3Qpe1xyXHRcdFx0dmFyIG1zZyA9IFwiWW91IHdhbnRlZCB0byBoYXZlIHNleCB3aXRoIFwiICsgXHJcdFx0XHRwb3N0LnNleFRhcmdldDtcclx0XHRcdHN3YWwoXCJHcmVhdCFcIiwgbXNnLCBcInN1Y2Nlc3NcIik7XHJcclx0XHRcdC8qIG1hbnVhbGx5IHJlbG9hZCBtYXJrZXJzIFxyXHRcdFx0dXNpbmcgbWFwdHlwZWlkIHNpbmNlIGl0cyBtb3N0IGxlYXN0IHVzZWQgZXZlbnQsIC0ga2luZCBvZiBoYWNreSB3YXkgdG8gZG8gaXRcclx0XHRcdCovXHJcdFx0XHRnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKCRzY29wZS5tYXAsICdtYXB0eXBlaWRfY2hhbmdlZCcpO1xyXHJcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcclxyXHRcdFx0LyogcmVzZXQgaW5wdXQgZm9ybXMgKi9cclx0XHRcdCRzY29wZS5zZXhUaW1lICA9IG51bGw7XHJcdFx0XHQkc2NvcGUuc2V4VGFyZ2V0ID0gbnVsbDtcclx0XHR9KVxyXHRcdC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpe1xyXHRcdFx0aWYgKHN0YXR1cyA9PSA0MDEpXHJcdFx0XHR7XHJcdFx0XHRcdHN3YWwoXCJMb2ctaW4gZmFpbGVkXCIsIFwiUGxlYXNlIGxvZyBpblwiLCBcImVycm9yXCIpO1xyXHRcdFx0fVxyXHRcdFx0ZWxzZVxyXHRcdFx0e1xyXHRcdFx0XHRzd2FsKFwiUG9zdCBmYWlsZWRcIiwgXCJQbGVhc2UgY29tcGxldGUgdGhlIGZyb20gY29ycmVjdGx5XCIsIFwiZXJyb3JcIik7XHJcdFx0XHR9XHJcdFx0fSk7XHJcdH07XHJcclx0JHNjb3BlLnJlcXVlc3RGZXRjaCA9IGZ1bmN0aW9uKCkge1xyXHRcdFBvc3RzU3ZjLmZldGNoKF9wYWdlLCBfcGVyUGFnZSlcclx0XHQuc3VjY2VzcyhmdW5jdGlvbihwb3N0cyl7XHJcdFx0XHRfcGFnZSsrO1xyXHRcdFx0Y29uc29sZS5sb2coJ1Bvc3RzIGhhdmUgYmVlbiBsb2FkZWQgc3VjY2Vzc2Z1bGx5IGZvciBmcm9udCBwYWdlJyk7XHJcdFx0XHQkc2NvcGUucG9zdHMgPSAkc2NvcGUucG9zdHMuY29uY2F0KHBvc3RzKTtcclx0XHR9KTtcclx0fTtcclxyXHQkc2NvcGUucmVxdWVzdEZldGNoKCk7XHJ9KTtcclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG5cdHRoaXMuZmV0Y2hBbGwgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdH07XG5cblx0dGhpcy5mZXRjaCA9IGZ1bmN0aW9uKHBhZ2UsIHBlcnBhZ2Upe1xuXHRcdHZhciB1cmwgPSAnL2FwaS9wb3N0cy8nICsgcGFnZSArICc/cGVycGFnZT0nICsgcGVycGFnZTtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCk7XG5cdH07XG5cblx0dGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xuXHR9O1xufSk7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBY2NvdW50Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKXtcblx0LyogZW1pdCBicm9hZGNhc3QgZm9yIGN1cnJlbnQgcGFnZUlkICovXG5cdCRzY29wZS4kZW1pdCgncGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQuYWNjb3VudCk7XG5cblx0JHNjb3BlLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24obmV3UGFzc3dvcmQsIHBhc3N3b3JkKXtcblx0XHRVc2VyU3ZjLmNoYW5nZVBhc3N3b3JkKG5ld1Bhc3N3b3JkLCBwYXNzd29yZClcblx0XHQudGhlbihcblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHN3YWwoJycsIFwiUGFzc3dvcmQgaGF2ZSBiZWVuIGNoYW5nZWRcIiwgXCJzdWNjZXNzXCIpO1xuXHRcdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHRcdFx0fSxcblx0XHRcdGZ1bmN0aW9uKGVycil7XG5cdFx0XHRcdGlmIChlcnIuc3RhdHVzID09IDQwMSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN3YWwoJycsIFwiT3JpZ2luYWwgcGFzc3dvcmQgaXMgd3JvbmcuXCIsIFwiZXJyb3JcIik7XHRcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzd2FsKCcnLCBcIkNhbiBub3QgY2hhbmdlIHBhc3N3b3JkLlwiLFwiZXJyb3JcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHR9O1xufSk7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgVXNlclN2Yyl7XG5cdCRzY29wZS4kZW1pdCgncGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQubG9naW4pO1xuXG5cdC8vIFVzZXJTdmPshJzruYTsiqTsnZggbG9naW7tlajsiJjsl5DshJwg67Cb7J2AIOycoOyggOygleuztOulvFxuXHQvLyDstZzsg4HsnIQg7L2Y7Yq466Gk65+s7J24IEFwcGxpY2F0aW9uQ3RybOydmCAkc2NvcGXroZwg6rCS7J2EIOuztOuCtOq4sCDsnITtlZwg7KCE7YyM66W8IOuztOuCuOuLpC5cblx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcblx0XHRVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcblx0XHQudGhlbihmdW5jdGlvbiAodXNlcil7XG5cdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHRcdFx0JHJvb3RTY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKTtcblx0XHR9LFxuXHRcdGZ1bmN0aW9uIChlcnJvcil7XG5cdFx0XHRzd2FsKFwiTG9nLWluIGZhaWxlZCFcIiwgXCJQYXNzd29yZC9JRCB3cm9uZ1wiLCBcImVycm9yXCIpO1xuXHRcdH0pO1xuXHRcdC8qIG9yIGl0IGNhbiBiZSB0aGlzXG5cdFx0LmNhdGNoKGZ1bmN0aW9uICgpe1xuXHRcdFx0YWxlcnQoXCJJRCBvciBQYXNzd29yZCBpcyB3cm9uZy5cIik7XG5cdFx0fSk7XG5cdFx0Ki9cblx0fTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgVXNlclN2Yyl7XG5cdCRzY29wZS4kZW1pdCgncGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQucmVnaXN0ZXIpO1xuXG5cdC8vIFVzZXJTdmPshJzruYTsiqTsnZggcmVnaXN0ZXLtlajsiJjsl5DshJwg67Cb7J2AIOycoOyggOygleuztOulvCAtIGFwaeyXkOyEnCDrs7TrgrTsoYzquLAg65WM66y47JeQIC5kYXRh66GcIOygkeq3vFxuXHQvLyDstZzsg4HsnIQg7L2Y7Yq466Gk65+s7J24IEFwcGxpY2F0aW9uQ3RybOydmCAkc2NvcGXroZwg6rCS7J2EIOuztOuCtOq4sCDsnITtlZwg7KCE7YyM66W8IOuztOuCuOuLpC5cblx0JHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkLCB1c2VyZG9iLCBzZXhwb3Mpe1xuXHRcdFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkLCB1c2VyZG9iLCBzZXhwb3MpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVzZXIpe1xuXHRcdFx0c3dhbChcIk9LIVwiLCBcIlN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkXCIsIFwic3VjY2Vzc1wiKVxuXHRcdFx0JGxvY2F0aW9uLnBhdGgoJy8nKTtcblx0XHRcdCRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKTtcblx0XHR9LFxuXHRcdGZ1bmN0aW9uKGVycm9yKXtcblx0XHRcdHN3YWwoXCJSZWdpc3RlciBmYWlsZWQhXCIsIFwiVXNlcm5hbWUgYWxyZWFkeSBleGlzdHNcIiwgXCJlcnJvclwiKTtcblx0XHR9KTtcblx0fTtcdFxufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCwgJHJvb3RTY29wZSl7XG5cdHZhciBzdmMgPSB0aGlzO1xuXG5cdC8vIHN2Yy50b2tlbiAodGhpcy50b2tlbikg6rCS7Jy866GcIC9hcGkvdXNlciDrpbwg7Zi47LacXG5cdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywgXG5cdFx0e1xuXHRcdFx0aGVhZGVyczogeydYLUF1dGgnOiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gfVxuXHRcdFx0Ly9oZWFkZXJzOiB7J1gtQXV0aCc6ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXX1cblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdHJldHVybiByZXNwb25zZS5kYXRhOyAgLy8gLSBhcGnsl5DshJwg67O064K07KGM6riwIOuVjOusuOyXkCAuZGF0YeuhnCDsoJHqt7xcblx0XHR9LFxuXHRcdGZ1bmN0aW9uKGVycil7XG5cdFx0XHRjdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcblx0XHR9KTtcblx0fTtcblxuXHQvLyBkZXNpZ25lZCB0byBiZSBjYWxsZWQgd2hlbiBhcHBsaWNhdGlvbiBsYXVuY2hlZFxuXHQvLyBmb3IgdGhlIHBlcnNvbnMgd2hvIHJlZnJlc2hlZCB0aGUgcGFnZSBidXQgZGlkIG5vdCBsb2dvdXQgLS0+IGl0IHdpbGwgYmUgc3RpbGwgbG9nZ2VkIGluIVxuXHRzdmMucmVtYWluTG9naW4gPSBmdW5jdGlvbigpe1xuXHRcdGNvbnNvbGUubG9nKFwiVG9rZW46XCIsIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKTtcblx0XHRjb25zb2xlLmxvZyhcIkFwcGxpY2F0aW9uIGhhcyBiZWVuIGxhdW5jaGVkXCIpXG5cdFx0aWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSAhPSAndW5kZWZpbmVkJyAmJiBcblx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSAhPSAnbnVsbCcgJiZcblx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSApXG5cdFx0e1xuXHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpO1xuXG5cdFx0XHRjb25zb2xlLmxvZyhcIlJlbWFpbiBMb2dpbiBpbiBwcm9jZXNzLi5cIilcblx0XHRcdHZhciB1c2VyO1xuXHRcdFx0c3ZjLmdldFVzZXIoKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24odXNlcil7XG5cdFx0XHRcdCRyb290U2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcik7XG5cdFx0XHR9LFxuXHRcdFx0ZnVuY3Rpb24oZXJyKXtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdFx0Y3VycmVudFVzZXIgPSB1bmRlZmluZWQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0c3ZjLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24obmV3UGFzc3dvcmQsIHBhc3N3b3JkKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywgXG5cdFx0e1xuXHRcdFx0aGVhZGVyczogeydYLUF1dGgnOiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gfVxuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24odXNlcil7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy9wYXNzd29yZF9jaGFuZ2UnLCBcblx0XHRcdHtcblx0XHRcdFx0cGFzc3dvcmQgICAgOiBwYXNzd29yZCxcblx0XHRcdFx0bmV3UGFzc3dvcmQgOiBuZXdQYXNzd29yZCxcblx0XHRcdFx0dXNlcm5hbWUgICAgOiB1c2VyLmRhdGEudXNlck5hbWVcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8vIHNlc3Npb24g7J2EIOydtOyaqe2VtOyEnCwg7Yyo7Iqk7JuM65Oc6rCAIOydvOy5mO2VmOuKlOyngCDqsoDsgqztlZjqs6AsXG5cdC8vIOydvOy5mO2VmOuptCDrsJvsnYAgand0IGVuY29kZWTrkJwgdXNlcm5hbWUsIOymiSDthqDtgbDsnYQg6rCA7KeA6rOgLFxuXHQvLyB2YWzsnbTrnbzripQg67OA7IiY7JeQIOuEo+qzoCwg7J206rKD7J2YIOuNsOydtO2EsOulvCBzdmMudG9rZW7sl5Drj4Qg7KCA7J6l7ZWY6rOgLFxuXHQvLyBzdmMuZ2V0VXNlcu2VqOyImOulvCDtmLjstpztlZzri6QuXG5cdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCBcblx0XHR7XG5cdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2Upe1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHJlc3BvbnNlLmRhdGE7IC8vIGFwaeyXkOyEnCDrs7Trg4jquLDrlYzrrLjsl5AsIC5kYXRh66GcIOygkeq3vCAtIFRPRE9cblx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHJlc3BvbnNlLmRhdGE7IC8vIOuqqOuToCDsmpTssq3sl5Ag64yA7ZW0IO2VtOuLuSDtl6TrjZTrpbwg7KCE7Jet7Jy866GcIOu2meyehC5cblx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpO1xuXHRcdH0pXG5cdH07XG5cblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkLCB1c2VyZG9iLCBzZXhwb3Mpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywgXG5cdFx0e1xuXHRcdFx0dXNlck5hbWU6IHVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkLFxuXHRcdFx0dXNlcmRvYiA6IHVzZXJkb2IsXG5cdFx0XHRzZXhQb3MgIDogc2V4cG9zXG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAoKXtcblx0XHRcdHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTtcblx0XHR9KTtcblx0fTtcblxuXHRzdmMubG9nb3V0ID0gZnVuY3Rpb24oKXtcblx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSA9IHVuZGVmaW5lZDtcblx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gdW5kZWZpbmVkO1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSB1bmRlZmluZWQ7XG5cdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdW5kZWZpbmVkOyAvLyDrqqjrk6Ag7JqU7LKt7JeQIOuMgO2VtCDtlbTri7kg7Zek642U66W8IOyghOyXreycvOuhnCDrtpnsnoQuXG5cdH1cbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKXtcblx0JHNjb3BlLiRlbWl0KCdwYWdlY2hhbmdlJywgJHNjb3BlLnBhZ2VJZC5yZWdpc3Rlcik7XG5cblx0Ly8gVXNlclN2Y+yEnOu5hOyKpOydmCByZWdpc3Rlcu2VqOyImOyXkOyEnCDrsJvsnYAg7Jyg7KCA7KCV67O066W8IC0gYXBp7JeQ7IScIOuztOuCtOyhjOq4sCDrlYzrrLjsl5AgLmRhdGHroZwg7KCR6re8XG5cdC8vIOy1nOyDgeychCDsvZjtirjroaTrn6zsnbggQXBwbGljYXRpb25DdHJs7J2YICRzY29wZeuhnCDqsJLsnYQg67O064K06riwIOychO2VnCDsoITtjIzrpbwg67O064K464ukLlxuXHQkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQsIHVzZXJkb2IsIHNleHBvcyl7XG5cdFx0VXNlclN2Yy5yZWdpc3Rlcih1c2VybmFtZSwgcGFzc3dvcmQsIHVzZXJkb2IsIHNleHBvcylcblx0XHQudGhlbihmdW5jdGlvbiAodXNlcil7XG5cdFx0XHRzd2FsKFwiT0shXCIsIFwiU3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWRcIiwgXCJzdWNjZXNzXCIpXG5cdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpO1xuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0c3dhbChcIlJlZ2lzdGVyIGZhaWxlZCFcIiwgXCJVc2VybmFtZSBhbHJlYWR5IGV4aXN0c1wiLCBcImVycm9yXCIpO1xuXHRcdH0pO1xuXHR9O1x0XG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCwgJHJvb3RTY29wZSl7XG5cdHZhciBzdmMgPSB0aGlzO1xuXG5cdC8vIHN2Yy50b2tlbiAodGhpcy50b2tlbikg6rCS7Jy866GcIC9hcGkvdXNlciDrpbwg7Zi47LacXG5cdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywgXG5cdFx0e1xuXHRcdFx0aGVhZGVyczogeydYLUF1dGgnOiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gfVxuXHRcdFx0Ly9oZWFkZXJzOiB7J1gtQXV0aCc6ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXX1cblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdHJldHVybiByZXNwb25zZS5kYXRhOyAgLy8gLSBhcGnsl5DshJwg67O064K07KGM6riwIOuVjOusuOyXkCAuZGF0YeuhnCDsoJHqt7xcblx0XHR9LFxuXHRcdGZ1bmN0aW9uKGVycil7XG5cdFx0XHRjdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcblx0XHR9KTtcblx0fTtcblxuXHQvLyBkZXNpZ25lZCB0byBiZSBjYWxsZWQgd2hlbiBhcHBsaWNhdGlvbiBsYXVuY2hlZFxuXHQvLyBmb3IgdGhlIHBlcnNvbnMgd2hvIHJlZnJlc2hlZCB0aGUgcGFnZSBidXQgZGlkIG5vdCBsb2dvdXQgLS0+IGl0IHdpbGwgYmUgc3RpbGwgbG9nZ2VkIGluIVxuXHRzdmMucmVtYWluTG9naW4gPSBmdW5jdGlvbigpe1xuXHRcdGNvbnNvbGUubG9nKFwiVG9rZW46XCIsIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKTtcblx0XHRjb25zb2xlLmxvZyhcIkFwcGxpY2F0aW9uIGhhcyBiZWVuIGxhdW5jaGVkXCIpXG5cdFx0aWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSAhPSAndW5kZWZpbmVkJyAmJiBcblx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSAhPSAnbnVsbCcgJiZcblx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSApXG5cdFx0e1xuXHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpO1xuXG5cdFx0XHRjb25zb2xlLmxvZyhcIlJlbWFpbiBMb2dpbiBpbiBwcm9jZXNzLi5cIilcblx0XHRcdHZhciB1c2VyO1xuXHRcdFx0c3ZjLmdldFVzZXIoKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24odXNlcil7XG5cdFx0XHRcdCRyb290U2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcik7XG5cdFx0XHR9LFxuXHRcdFx0ZnVuY3Rpb24oZXJyKXtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdFx0Y3VycmVudFVzZXIgPSB1bmRlZmluZWQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0c3ZjLmNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24obmV3UGFzc3dvcmQsIHBhc3N3b3JkKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywgXG5cdFx0e1xuXHRcdFx0aGVhZGVyczogeydYLUF1dGgnOiAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gfVxuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24odXNlcil7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy9wYXNzd29yZF9jaGFuZ2UnLCBcblx0XHRcdHtcblx0XHRcdFx0cGFzc3dvcmQgICAgOiBwYXNzd29yZCxcblx0XHRcdFx0bmV3UGFzc3dvcmQgOiBuZXdQYXNzd29yZCxcblx0XHRcdFx0dXNlcm5hbWUgICAgOiB1c2VyLmRhdGEudXNlck5hbWVcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8vIHNlc3Npb24g7J2EIOydtOyaqe2VtOyEnCwg7Yyo7Iqk7JuM65Oc6rCAIOydvOy5mO2VmOuKlOyngCDqsoDsgqztlZjqs6AsXG5cdC8vIOydvOy5mO2VmOuptCDrsJvsnYAgand0IGVuY29kZWTrkJwgdXNlcm5hbWUsIOymiSDthqDtgbDsnYQg6rCA7KeA6rOgLFxuXHQvLyB2YWzsnbTrnbzripQg67OA7IiY7JeQIOuEo+qzoCwg7J206rKD7J2YIOuNsOydtO2EsOulvCBzdmMudG9rZW7sl5Drj4Qg7KCA7J6l7ZWY6rOgLFxuXHQvLyBzdmMuZ2V0VXNlcu2VqOyImOulvCDtmLjstpztlZzri6QuXG5cdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCBcblx0XHR7XG5cdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2Upe1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHJlc3BvbnNlLmRhdGE7IC8vIGFwaeyXkOyEnCDrs7Trg4jquLDrlYzrrLjsl5AsIC5kYXRh66GcIOygkeq3vCAtIFRPRE9cblx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHJlc3BvbnNlLmRhdGE7IC8vIOuqqOuToCDsmpTssq3sl5Ag64yA7ZW0IO2VtOuLuSDtl6TrjZTrpbwg7KCE7Jet7Jy866GcIOu2meyehC5cblx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpO1xuXHRcdH0pXG5cdH07XG5cblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkLCB1c2VyZG9iLCBzZXhwb3Mpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywgXG5cdFx0e1xuXHRcdFx0dXNlck5hbWU6IHVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkLFxuXHRcdFx0dXNlcmRvYiA6IHVzZXJkb2IsXG5cdFx0XHRzZXhQb3MgIDogc2V4cG9zXG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAoKXtcblx0XHRcdHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTtcblx0XHR9KTtcblx0fTtcblxuXHRzdmMubG9nb3V0ID0gZnVuY3Rpb24oKXtcblx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSA9IHVuZGVmaW5lZDtcblx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gdW5kZWZpbmVkO1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSB1bmRlZmluZWQ7XG5cdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdW5kZWZpbmVkOyAvLyDrqqjrk6Ag7JqU7LKt7JeQIOuMgO2VtCDtlbTri7kg7Zek642U66W8IOyghOyXreycvOuhnCDrtpnsnoQuXG5cdH1cbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==