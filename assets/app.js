angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,c,o){c.resetDataViz=function(){FRAME=0,EdgeManager.reset(),NodeManager.reset()}}]),angular.module("app").controller("DataVizCtrl",["$rootScope","$scope","$window",function(e,c,o){function g(){$(".data-visibility").addClass("active")}c.meanAge=48,c.updateMeanAge=function(){if(!(FRAME>400)){var e=mapRange([0,400],[48,78],FRAME);c.meanAge=e,c.$apply(),requestAnimationFrame(c.updateMeanAge)}},c.updateMeanAge(),g(),$("#btn-reset").click(function(){FRAME=0,EdgeManager.reset(),NodeManager.reset()}),$("#checkbox_hide_nodes").change(function(){NodeManager.toggleVisibility($(this).is(":checked")?!0:!1)}),$("#checkbox_c_all").change(function(){var e=$(this).is(":checked");$("#checkbox_c0").prop("checked",e),$("#checkbox_c0").trigger("change"),$("#checkbox_c1").prop("checked",e),$("#checkbox_c1").trigger("change"),$("#checkbox_c2").prop("checked",e),$("#checkbox_c2").trigger("change"),$("#checkbox_c3").prop("checked",e),$("#checkbox_c3").trigger("change"),$("#checkbox_c4").prop("checked",e),$("#checkbox_c4").trigger("change"),$("#checkbox_c5").prop("checked",e),$("#checkbox_c5").trigger("change"),$("#checkbox_c6").prop("checked",e),$("#checkbox_c6").trigger("change"),$("#checkbox_c7").prop("checked",e),$("#checkbox_c7").trigger("change"),$("#checkbox_c8").prop("checked",e),$("#checkbox_c8").trigger("change"),$("#checkbox_c9").prop("checked",e),$("#checkbox_c9").trigger("change"),$("#checkbox_c10").prop("checked",e),$("#checkbox_c10").trigger("change"),$("#checkbox_c11").prop("checked",e),$("#checkbox_c11").trigger("change"),$("#checkbox_c12").prop("checked",e),$("#checkbox_c12").trigger("change"),$("#checkbox_c13").prop("checked",e),$("#checkbox_c13").trigger("change"),$("#checkbox_c14").prop("checked",e),$("#checkbox_c14").trigger("change"),$("#checkbox_c15").prop("checked",e),$("#checkbox_c15").trigger("change"),$("#checkbox_c16").prop("checked",e),$("#checkbox_c16").trigger("change"),$("#checkbox_c17").prop("checked",e),$("#checkbox_c17").trigger("change")}),$("#checkbox_c0").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(0,!0):EdgeManager.toggleShowByCluster(0,!1)}),$("#checkbox_c1").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(1,!0):EdgeManager.toggleShowByCluster(1,!1)}),$("#checkbox_c2").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(2,!0):EdgeManager.toggleShowByCluster(2,!1)}),$("#checkbox_c3").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(3,!0):EdgeManager.toggleShowByCluster(3,!1)}),$("#checkbox_c4").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(4,!0):EdgeManager.toggleShowByCluster(4,!1)}),$("#checkbox_c5").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(5,!0):EdgeManager.toggleShowByCluster(5,!1)}),$("#checkbox_c6").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(6,!0):EdgeManager.toggleShowByCluster(6,!1)}),$("#checkbox_c7").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(7,!0):EdgeManager.toggleShowByCluster(7,!1)}),$("#checkbox_c8").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(8,!0):EdgeManager.toggleShowByCluster(8,!1)}),$("#checkbox_c9").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(9,!0):EdgeManager.toggleShowByCluster(9,!1)}),$("#checkbox_c10").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(10,!0):EdgeManager.toggleShowByCluster(10,!1)}),$("#checkbox_c11").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(11,!0):EdgeManager.toggleShowByCluster(11,!1)}),$("#checkbox_c12").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(12,!0):EdgeManager.toggleShowByCluster(12,!1)}),$("#checkbox_c13").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(13,!0):EdgeManager.toggleShowByCluster(13,!1)}),$("#checkbox_c14").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(14,!0):EdgeManager.toggleShowByCluster(14,!1)}),$("#checkbox_c15").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(15,!0):EdgeManager.toggleShowByCluster(15,!1)}),$("#checkbox_c16").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(16,!0):EdgeManager.toggleShowByCluster(16,!1)}),$("#checkbox_c17").change(function(){console.log("checkbox!"),$(this).is(":checked")?EdgeManager.toggleShowByCluster(17,!0):EdgeManager.toggleShowByCluster(17,!1)})}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,c,o){function g(){$(".data-visibility").removeClass("active")}g();var t=$(".slide"),n=$(".slide-group"),r=$(".bullet"),a=t.length-1,h=0,l=!1;r.first().addClass("current");var s=function(){var e=$(".slide-node").clone();$(".slide-node").html("Loading! If you see this message for a while, please refresh the page"),$(".slide-node").replaceWith(e);var c=$(".slide-lines").clone();$(".slide-lines").html("Loading! If you see this message for a while, please refresh the page"),$(".slide-lines").replaceWith(c)},i=function(){window.clearInterval(k),l=!1;var e=r.index($(this));d(e),s()},d=function(e){l?h===a?h=0:h++:h=e,r.removeClass("current"),r.eq(h).addClass("current"),u(h)},u=function(e){n.animate({top:"-"+e+"00%"}),s()};r.on("click",i);var k=window.setInterval(d,8e4)}]),angular.module("app").controller("NumberCtrl",["$rootScope","$scope","$window",function(e,c,o){function g(e){function c(e,c,o,g,t,n){function r(c){e.html(l(c,u))}function a(e,c){var o=".",g=e+"";if(g.length<c)for(var t=c-g.length,r=0;t>r;r++)g="0"+g;if(3==n){var a=(a=g.length)>3?a%3:0;return(a?g.substr(0,a)+o:"")+g.substr(a).replace(/(\d{3})(?=\d)/g,"$1"+o)}if(4==n){var a=(a=g.length)>4?a%4:0;return(a?g.substr(0,a)+o:"")+g.substr(a).replace(/(\d{4})(?=\d)/g,"$1"+o)}var a=(a=g.length)>2?a%2:0;return(a?g.substr(0,a)+o:"")+g.substr(a).replace(/(\d{2})(?=\d)/g,"$1"+o)}function h(){o++;var e=o/s;e>=1?r(parseInt(c)):(r(parseInt(e*c)),setTimeout(h,d))}function l(e,c){for(var o=a(e,c),g=o.split(""),t=[],n=0;n<g.length;n++)t+="."==g[n]?"<span>.</span>":"<span>"+g[n]+"</span>";return t}var s=100,i=g,o=0,d=i/s,u=(c+"").length;e.html(l(0,u)),setTimeout(h,t)}var o=0,g=parseInt(e.attr("data-num")),t=parseInt(e.attr("time-duration")),n=parseInt(e.attr("time-delay")),r=parseInt(e.attr("format-info"));c(e,g,o,t,n,r)}$("[data-num]").each(function(){g($(this))})}]),angular.module("app").config(["$routeProvider",function(e){e.when("/dataviz",{templateUrl:"/templates/dataviz.html",controller:"DataVizCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]);
//# sourceMappingURL=data:application/json;base64,