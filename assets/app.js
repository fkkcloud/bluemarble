angular.module("app",["ngRoute","duScroll","infinite-scroll"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window","UserSvc",function(e,t,o,n){t.pageId={post:0,register:1,login:2,account:3},t.navCollapsed=!0,t.collapse=function(){t.navCollapsed=!0},t.moveToCurrentLocation=function(){function e(e){if(t.currentPageId==t.pageId.post){var o=e.coords;window.localStorage.latitude=o.latitude,window.localStorage.longitude=o.longitude;var n=new google.maps.LatLng(o.latitude,o.longitude);google.maps.event.trigger(t.map,"heading_changed",n),t.map.panTo(n),t.map.setZoom(15)}}function o(e){console.warn("ERROR("+e.code+"): "+e.message)}navigator.geolocation.getCurrentPosition(e,o),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},t.logout=function(){t.collapse(),t.currentUser=void 0,n.logout(),swal("","Successfully logged out")},e.$on("login",function(e,o){t.currentUser=o}),t.$on("loc",function(e,o){console.log(o);var n=o.lat(),a=o.lng();t.postLocation={lat:n,lon:a},console.log(t.postLocation)}),t.$on("pagechange",function(e,o){t.currentPageId=o}),t.$on("place",function(e,o){t.$$phase||t.$apply(function(){t.sexPlaceAutocompleted=o})}),t.$on("mapInit",function(e,o){t.map=o}),n.remainLogin()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/account",{controller:"AccountCtrl",templateUrl:"/templates/account.html"}).when("/privacy",{controller:"AccountCtrl",templateUrl:"/templates/policy.html"}).when("/aboutus",{controller:"AccountCtrl",templateUrl:"/templates/aboutus.html"}).when("/contact",{controller:"AccountCtrl",templateUrl:"/templates/contactus.html"}).when("/iloveboram",{controller:"AccountCtrl",templateUrl:"/templates/boram.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","$timeout","$compile",function(e,t,o,n){var a=function(t,o,a){function l(e){for(var t,o=0;t=S[o];o++)t.setMap(null);S=[];var t=new google.maps.Marker({position:e,map:f,icon:h});S.push(t)}function r(e){if(t.currentUser){v&&v.close();var o=new google.maps.Geocoder;t.$emit("loc",e),l(e),o.geocode({latLng:e},function(e,o){try{t.$emit("place",e[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),t.$emit("place","Location does not exists")}})}}function s(){var o=void 0;e.fetchAll().success(function(e){o=e;for(var a=0;a<o.length;a++){var l=o[a];if(!L[a]||L[a].post._id!=l._id){var r=angular.fromJson(l.sexLocation),s=new google.maps.LatLng(r.lat,r.lon),i={position:s,map:f,title:"Sex"},c=new google.maps.Marker(i);L.push({marker:c,post:l});var g=t,p=g.$new(!0),u=function(e,t){return function(){void 0!==v&&v.close(),p.content=t.sexTarget.substring(0,24),p.age=t.userAge;var o='<div> <strong class="post-content">"'+p.content+'..."</strong>   <span class="post-content-age">Danger Rate -  '+p.age+"/100</span></div>",a=n(o)(p),l={content:a[0],pixelOffset:new google.maps.Size(0,0),disableAutoPan:!0};v=new google.maps.InfoWindow(l),v.open(f,e)}}(c,l);u(),google.maps.event.addListener(c,"click",function(e,t){return function(){void 0!==v&&v.close(),p.content=t.sexTarget.substring(0,24),p.age=t.userAge;var o='<div> <strong class="post-content">"'+p.content+'"...</strong>   <span class="post-content-age">Joy Rate -  '+p.age+"</span></div>",a=n(o)(p),l={content:a[0],pixelOffset:new google.maps.Size(0,0),disableAutoPan:!0};v=new google.maps.InfoWindow(l),v.open(f,e)}}(c,l))}}})}function i(){var e=document.getElementById("pac-input"),t=document.getElementById("btn-curr");f.controls[google.maps.ControlPosition.TOP_LEFT].push(e),f.controls[google.maps.ControlPosition.TOP_RIGHT].push(t);var o=new google.maps.places.SearchBox(e);google.maps.event.addListener(o,"places_changed",function(){var e=o.getPlaces();if(0!=e.length){var t=e[0];r(t.geometry.location),window.localStorage.latitude=t.geometry.location.latitude,window.localStorage.longitude=t.geometry.location.longitude,f.panTo(t.geometry.location)}})}function c(){google.maps.event.addListener(f,"click",function(e){r(e.latLng)})}function g(){google.maps.event.addListener(f,"heading_changed",function(e){r(e)})}function p(){google.maps.event.addListener(f,"center_changed",function(){window.localStorage.latitude=f.getCenter().lat(),window.localStorage.longitude=f.getCenter().lng()})}function u(){google.maps.event.addListener(f,"maptypeid_changed",function(){s()})}function d(){var e=[{featureType:"administrative",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:"#439aa5"}]},{featureType:"administrative.locality",elementType:"all",stylers:[{color:"#32485c"},{visibility:"simplified"}]},{featureType:"administrative.neighborhood",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"landscape.natural",elementType:"all",stylers:[{color:"#e9dddb"}]},{featureType:"landscape.natural.terrain",elementType:"geometry",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi.park",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"poi.park",elementType:"geometry.fill",stylers:[{color:"#c4e661"}]},{featureType:"poi.park",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#32485c"},{weight:"0.7"}]},{featureType:"road.arterial",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"road.arterial",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.arterial",elementType:"geometry.stroke",stylers:[{color:"#32485c"},{weight:"0.25"}]},{featureType:"road.arterial",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.local",elementType:"geometry.stroke",stylers:[{color:"#ef798e"},{weight:"0.5"},{visibility:"off"}]},{featureType:"transit",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#ef798e"}]},{featureType:"transit.line",elementType:"geometry.fill",stylers:[{weight:"2.06"}]},{featureType:"transit.line",elementType:"geometry.stroke",stylers:[{weight:"10.00"}]},{featureType:"transit.line",elementType:"labels.text.stroke",stylers:[{weight:"0.01"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{visibility:"on"},{weight:"10.00"},{color:"#439aa5"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"on"},{color:"#32485c"},{weight:"0.85"}]}],t={name:"Custom Style"},o=new google.maps.StyledMapType(e,t);f.mapTypes.set(y,o)}function m(){void 0===f&&(f=new google.maps.Map(o[0],T)),d(),u(),t.$emit("mapInit",f),c(),i(),p(),g(),s()}var f,y="custom_style",h=({url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},{url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)}),w=new google.maps.LatLng(35.71083783530009,138.603515625);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(w=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude));var v,T={center:w,zoom:12,MapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1,streetViewControl:!1,mapTypeControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,y]},mapTypeId:y},S=[],L=[];m()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:a}}]),angular.module("app").service("UtilSvc",function(){var e=this;e.deg2rad=function(e){return e*(Math.PI/180)},e.getDistanceFromLatLonInKm=function(t,o,n,a){var l=6371,r=e.deg2rad(n-t),s=e.deg2rad(a-o),i=Math.sin(r/2)*Math.sin(r/2)+Math.cos(e.deg2rad(t))*Math.cos(e.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),c=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)),g=l*c;return g}}),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc","$window","$document",function(e,t,o,n){e.$emit("pagechange",e.pageId.post),e.posts=[];var a=0,l=10;e.moveToLoc=function(t){var o=e.posts[t],a=angular.fromJson(o.sexLocation),l=new google.maps.LatLng(a.lat,a.lon);e.map.panTo(l),e.map.setZoom(16);var r=0,s=480;n.scrollTop(r,s).then(function(){console&&console.log("You just scrolled to the top!")})},e.addPost=function(){var o=e.sexPlaceAutocompleted,n=e.postLocation;console.log("location:"+n.lat+","+n.lon+"\n place:"+o);var a=JSON.stringify(n);console.log(e.sexTime),t.create({userName:void 0,userAge:void 0,sexPlace:o,sexTime:e.sexTime,sexTarget:e.sexTarget,sexLocation:a}).success(function(t){google.maps.event.trigger(e.map,"maptypeid_changed"),e.posts.unshift(t),e.sexTime=null,e.sexTarget=null}).error(function(e,t){401==t?swal("Log-in failed","Please log in","error"):swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){t.fetch(a,l).success(function(t){a++,console.log("Posts have been loaded successfully for front page"),e.posts=e.posts.concat(t)})},e.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetchAll=function(){return e.get("/api/posts")},this.fetch=function(t,o){var n="/api/posts/"+t+"?perpage="+o;return e.get(n)},this.create=function(t){return e.post("/api/posts",t)}}]),angular.module("app").controller("AccountCtrl",["$scope","$location","UserSvc",function(e,t,o){e.$emit("pagechange",e.pageId.account),e.changePassword=function(e,n){o.changePassword(e,n).then(function(){swal("","Password have been changed","success"),t.path("/")},function(e){401==e.status?swal("","Original password is wrong.","error"):swal("","Can not change password.","error")})}}]),angular.module("app").controller("LoginCtrl",["$rootScope","$scope","$location","UserSvc",function(e,t,o,n){t.$emit("pagechange",t.pageId.login),t.login=function(t,a){n.login(t,a).then(function(t){o.path("/"),e.$emit("login",t)},function(e){swal("Log-in failed!","Password/ID wrong","error")})}}]),angular.module("app").controller("RegisterCtrl",["$scope","$location","UserSvc",function(e,t,o){e.$emit("pagechange",e.pageId.register),e.register=function(n,a,l,r){o.register(n,a,l,r).then(function(o){swal("OK!","Successfully registered","success"),t.path("/"),e.$emit("login",o)},function(e){swal("Register failed!","Username already exists","error")})}}]),angular.module("app").service("UserSvc",["$http","$rootScope",function(e,t){var o=this;o.getUser=function(){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(e){return e.data},function(e){currentUser=void 0})},o.remainLogin=function(){if(console.log("Token:",localStorage.getItem("token")),console.log("Application has been launched"),"undefined"!=window.localStorage.getItem("token")&&"null"!=window.localStorage.getItem("token")&&window.localStorage.getItem("token")){e.defaults.headers.common["X-Auth"]=window.localStorage.getItem("token"),console.log("Remain Login in process..");o.getUser().then(function(e){t.$emit("login",e)},function(e){console.log(e),currentUser=void 0})}},o.changePassword=function(t,o){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(n){return e.post("/api/users/password_change",{password:o,newPassword:t,username:n.data.userName})})},o.login=function(t,n){return e.post("/api/sessions",{username:t,password:n}).then(function(t){return window.localStorage.token=t.data,e.defaults.headers.common["X-Auth"]=t.data,o.getUser()})},o.register=function(t,n,a,l){return e.post("/api/users",{userName:t,password:n,userdob:a,sexPos:l}).then(function(){return o.login(t,n)})},o.logout=function(){window.localStorage.longitude=void 0,window.localStorage.latitude=void 0,window.localStorage.token=void 0,e.defaults.headers.common["X-Auth"]=void 0}}]);
//# sourceMappingURL=data:application/json;base64,