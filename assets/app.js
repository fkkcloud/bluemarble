angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){for(var e=0;18>e;e++)EdgeManagerCluster.hideAll(),NodeManagerCluster.hideAll()}function o(){for(var e=0;18>e;e++)EdgeManagerCluster.showAll(),NodeManagerCluster.showAll()}function n(){var e=function(){this.AdditiveColor=!0,this.Restart=function(){location.reload()},this.HideNodes=!1,this.HideNames=!1};RENDEROPTIONS=new e;var t=new dat.GUI,a=t.addFolder("Clusters"),r=a.add(RENDEROPTIONS,"HideNodes"),o=t.addFolder("MergePaths"),n=o.add(RENDEROPTIONS,"HideNodes"),l=o.add(RENDEROPTIONS,"HideNames");r.onFinishChange(function(e){NodeManagerCluster.toggleNodeVisibility(1==e?!1:!0)}),n.onFinishChange(function(e){if(1==e)for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeVisibility(!1);else for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeVisibility(!0)}),l.onFinishChange(function(e){if(1==e)for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeTextVisibility(!1);else for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeTextVisibility(!0)}),t.add(RENDEROPTIONS,"Restart"),$(t.domElement).find(">ul").toggleClass("closed")}t.meanAge={value:0},t.mergePathIds={value:"acute myocardial infarction"},t.getMenuShow=function(){return t.show_menu},$(window).resize(function(){this.resizeTO&&clearTimeout(this.resizeTO),this.resizeTO=setTimeout(function(){$(this).trigger("resizeEnd")},200)}),$(window).bind("resizeEnd",function(){location.reload()}),t.cleanMergePaths=function(){NodeManagerMergePaths[SELECTED_MERGEPATHID].clean()},t.resetMergePaths=function(){FRAME.value=0,PAGE_NUM.value=2,TWEEN.removeAll(),NodeManagerMergePaths[SELECTED_MERGEPATHID].reset(),EdgeManagerMergePaths[SELECTED_MERGEPATHID].reset()},t.resetClusters=function(){FRAME.value=0,PAGE_NUM.value=1,t.meanAge.value=0,TWEEN.removeAll(),EdgeManagerCluster.reset(),NodeManagerCluster.reset(),t.setClusterID(SELECTED_CLUSTER),t.updateMeanAge()},t.setClusterID=function(e){return SELECTED_CLUSTER=e,isNaN(e)?void("Not Clustered"==e?(SELECTED_CLUSTER=17,r(),EdgeManagerCluster.toggleShowByCluster(17),NodeManagerCluster.toggleShowByCluster(17)):o()):(r(),EdgeManagerCluster.toggleShowByCluster(SELECTED_CLUSTER),void NodeManagerCluster.toggleShowByCluster(SELECTED_CLUSTER))},t.updateMeanAge=function(){if(!(FRAME.value>620||1!=PAGE_NUM.value)){var e=mapRange([0,620],[35.4,90.5],FRAME.value);t.meanAge.value=Math.ceil(e),t.$apply(),requestAnimationFrame(t.updateMeanAge)}},n()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/mergepaths",{templateUrl:"/templates/mergepaths.html",controller:"MergePathCtrl"}).when("/clusters",{templateUrl:"/templates/clusters.html",controller:"ClusterCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]),angular.module("app").controller("ClusterCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){PAGE_NUM.value=1,bCanvasLoaded&&$("#options-clusters").css("visibility","visible")}function o(){$(".data-visibility").addClass("active")}r(),$("#clusterid").val(SELECTED_CLUSTER),o(),$("#btn-reset-clusters").click(function(){t.resetClusters()}),t.updateMeanAge(),$("#clusterid").change(function(){var e=$("#clusterid").val();t.setClusterID(e)})}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){PAGE_NUM.value=0}function o(){$(".data-visibility").removeClass("active")}r(),o()}]),angular.module("app").controller("MergePathCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){PAGE_NUM.value=2,bCanvasLoaded&&$("#options-mergepaths").css("visibility","visible")}function o(){$(".data-visibility").addClass("active")}r(),o(),$("#btn-reset-mergepaths").click(function(){t.resetMergePaths()}),$("#btn-run-mergepaths").click(function(){var e=document.getElementById("textinfo-mergepathids").value;try{var a=parseInt(e);if(isNaN(a))for(var r=e.toLowerCase(),o=0;o<MERGEPATH_INITNODE_REF.length;o++){var n=MERGEPATH_INITNODE_REF[o];if(n==r){e=o,console.log("selected disease for",r," is id:",o);break}}}catch(l){return void console.log(l)}t.cleanMergePaths(),SELECTED_MERGEPATHID=e,t.mergePathIds.value=MERGEPATH_INITNODE_REF[e],t.$apply(),t.resetMergePaths()})}]);
//# sourceMappingURL=data:application/json;base64,