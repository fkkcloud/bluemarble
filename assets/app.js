angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,t,r){function a(){var e=function(){this.AdditiveColor=!0,this.Restart=function(){location.reload()},this.HideNodes=!1,this.HideNames=!1};RENDEROPTIONS=new e;var t=new dat.GUI,r=t.addFolder("Clusters"),a=r.add(RENDEROPTIONS,"HideNodes"),o=t.addFolder("MergePaths"),n=o.add(RENDEROPTIONS,"HideNodes"),l=o.add(RENDEROPTIONS,"HideNames");a.onFinishChange(function(e){NodeManagerCluster.toggleNodeVisibility(1==e?!1:!0)}),n.onFinishChange(function(e){if(1==e)for(var t=0;t<NodeManagerMergePaths.length;t++)for(var r=0;r<SELECTED_MERGEPATHIDS.length;r++)SELECTED_MERGEPATHIDS[r]===t&&NodeManagerMergePaths[t].toggleNodeVisibility(!1);else for(var t=0;t<NodeManagerMergePaths.length;t++)for(var r=0;r<SELECTED_MERGEPATHIDS.length;r++)SELECTED_MERGEPATHIDS[r]===t&&NodeManagerMergePaths[t].toggleNodeVisibility(!0)}),l.onFinishChange(function(e){if(1==e)for(var t=0;t<NodeManagerMergePaths.length;t++)for(var r=0;r<SELECTED_MERGEPATHIDS.length;r++)SELECTED_MERGEPATHIDS[r]===t&&NodeManagerMergePaths[t].toggleNodeTextVisibility(!1);else for(var t=0;t<NodeManagerMergePaths.length;t++)for(var r=0;r<SELECTED_MERGEPATHIDS.length;r++)SELECTED_MERGEPATHIDS[r]===t&&NodeManagerMergePaths[t].toggleNodeTextVisibility(!0)}),t.add(RENDEROPTIONS,"Restart")}t.meanAge={value:0},t.mergePathIds={value:[0]},t.getMenuShow=function(){return t.show_menu},$(window).resize(function(){this.resizeTO&&clearTimeout(this.resizeTO),this.resizeTO=setTimeout(function(){$(this).trigger("resizeEnd")},200)}),$(window).bind("resizeEnd",function(){location.reload()}),t.resetClusters=function(){FRAME.value=0,PAGE_NUM.value=1,t.meanAge=48,TWEEN.removeAll(),EdgeManagerCluster.reset(),NodeManagerCluster.reset()},t.cleanMergePaths=function(){for(var e=0;e<NodeManagerMergePaths.length;e++)for(var t=0;t<SELECTED_MERGEPATHIDS.length;t++)SELECTED_MERGEPATHIDS[t]==e&&NodeManagerMergePaths[e].clean()},t.resetMergePaths=function(){FRAME.value=0,PAGE_NUM.value=2,TWEEN.removeAll();for(var e=0;e<NodeManagerMergePaths.length;e++)for(var t=0;t<SELECTED_MERGEPATHIDS.length;t++)SELECTED_MERGEPATHIDS[t]==e&&(NodeManagerMergePaths[e].reset(),EdgeManagerMergePaths[e].reset())},a()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/mergepaths",{templateUrl:"/templates/mergepaths.html",controller:"MergePathCtrl"}).when("/clusters",{templateUrl:"/templates/clusters.html",controller:"ClusterCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]),angular.module("app").controller("ClusterCtrl",["$rootScope","$scope","$window",function(e,t,r){function a(){PAGE_NUM.value=1}function o(){$(".data-visibility").addClass("active")}function n(){for(var e=0;18>e;e++)EdgeManagerCluster.toggleShowByCluster(e,!1)}function l(){for(var e=0;18>e;e++)EdgeManagerCluster.toggleShowByCluster(e,!0)}a(),o(),t.updateMeanAge=function(){if(!(FRAME.value>420||1!=PAGE_NUM.value)){var e=mapRange([0,400],[38.2,81.3],FRAME.value);t.meanAge.value=Math.ceil(e),t.$apply(),requestAnimationFrame(t.updateMeanAge)}},t.updateMeanAge(),$("#btn-reset-clusters").click(function(){t.resetClusters()}),$("#clusterid").change(function(){var e=$("#clusterid").val();return isNaN(e)?void("Not Clustered"==e?(console.log(e),EdgeManagerCluster.toggleShowByCluster(17,!0)):(console.log(e),l())):(console.log(e),n(),void EdgeManagerCluster.toggleShowByCluster(e,!0))})}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,t,r){function a(){PAGE_NUM.value=0}function o(){$(".data-visibility").removeClass("active")}a(),o()}]),angular.module("app").controller("MergePathCtrl",["$rootScope","$scope","$window",function(e,t,r){function a(){PAGE_NUM.value=2}function o(){$(".data-visibility").addClass("active")}a(),o(),$("#btn-reset-mergepaths").click(function(){t.resetMergePaths()}),$("#btn-run-mergepaths").click(function(){for(var e=document.getElementById("textinfo-mergepathids").value,r=e.split(" "),a=0;a<r.length;a++)try{var o=parseInt(r[a]);isNaN(o)?delete r[a]:r[a]=o}catch(n){return void console.log(n)}t.cleanMergePaths(),SELECTED_MERGEPATHIDS=r,t.mergePathIds.value=r,t.$apply(),t.resetMergePaths()}),$("#checkbox-hide-names-mergepaths").change(function(){if($(this).is(":checked"))for(var e=0;e<NodeManagerMergePaths.length;e++)for(var t=0;t<SELECTED_MERGEPATHIDS.length;t++)SELECTED_MERGEPATHIDS[t]===e&&NodeManagerMergePaths[e].toggleNodeTextVisibility(!0);else for(var e=0;e<NodeManagerMergePaths.length;e++)for(var t=0;t<SELECTED_MERGEPATHIDS.length;t++)SELECTED_MERGEPATHIDS[t]===e&&NodeManagerMergePaths[e].toggleNodeTextVisibility(!1)})}]);
//# sourceMappingURL=data:application/json;base64,