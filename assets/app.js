angular.module("app",["ngRoute","duScroll","infinite-scroll"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window","UserSvc",function(e,o,t,n){o.pageId={post:0,register:1,login:2,account:3},o.navCollapsed=!0,o.collapse=function(){o.navCollapsed=!0},o.moveToCurrentLocation=function(){function e(e){if(o.currentPageId==o.pageId.post){var t=e.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var n=new google.maps.LatLng(t.latitude,t.longitude);google.maps.event.trigger(o.map,"heading_changed",n),o.map.panTo(n),o.map.setZoom(15)}}function t(e){console.warn("ERROR("+e.code+"): "+e.message)}navigator.geolocation.getCurrentPosition(e,t),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},o.logout=function(){o.collapse(),o.currentUser=void 0,n.logout(),swal("","Successfully logged out")},e.$on("login",function(e,t){o.currentUser=t}),o.$on("loc",function(e,t){console.log(t);var n=t.lat(),a=t.lng();o.postLocation={lat:n,lon:a},console.log(o.postLocation)}),o.$on("pagechange",function(e,t){o.currentPageId=t}),o.$on("place",function(e,t){o.$$phase||o.$apply(function(){o.sexPlaceAutocompleted=t})}),o.$on("mapInit",function(e,t){o.map=t}),n.remainLogin()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/account",{controller:"AccountCtrl",templateUrl:"/templates/account.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","$timeout","$compile",function(e,o,t,n){var a=function(o,t,a){function l(e){for(var o,t=0;o=S[t];t++)o.setMap(null);S=[];var o=new google.maps.Marker({position:e,map:f,icon:h});S.push(o)}function r(e){if(o.currentUser){v&&v.close();var t=new google.maps.Geocoder;o.$emit("loc",e),l(e),t.geocode({latLng:e},function(e,t){try{o.$emit("place",e[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),o.$emit("place","Location does not exists")}})}}function i(){var t=void 0;e.fetchAll().success(function(e){t=e;for(var a=0;a<t.length;a++){var l=t[a];if(!$[a]||$[a].post._id!=l._id){var r=angular.fromJson(l.sexLocation),i=new google.maps.LatLng(r.lat,r.lon),s={position:i,map:f,title:"Sex"},c=new google.maps.Marker(s);$.push({marker:c,post:l});var g=o,p=g.$new(!0),u=function(e,o){return function(){void 0!==v&&v.close(),p.content=o.sexTarget,p.age=o.userAge;var t='<div> <strong class="post-content">"'+p.content+'"</strong>   <span class="post-content-age">Age -  '+p.age+"</span></div>",a=n(t)(p),l={content:a[0],pixelOffset:new google.maps.Size(0,0),disableAutoPan:!0};v=new google.maps.InfoWindow(l),v.open(f,e)}}(c,l);u()}}})}function s(){var e=document.getElementById("pac-input"),o=document.getElementById("btn-curr");f.controls[google.maps.ControlPosition.TOP_LEFT].push(e),f.controls[google.maps.ControlPosition.TOP_RIGHT].push(o);var t=new google.maps.places.SearchBox(e);google.maps.event.addListener(t,"places_changed",function(){var e=t.getPlaces();if(0!=e.length){var o=e[0];r(o.geometry.location),window.localStorage.latitude=o.geometry.location.latitude,window.localStorage.longitude=o.geometry.location.longitude,f.panTo(o.geometry.location)}})}function c(){google.maps.event.addListener(f,"click",function(e){r(e.latLng)})}function g(){google.maps.event.addListener(f,"heading_changed",function(e){r(e)})}function p(){google.maps.event.addListener(f,"center_changed",function(){window.localStorage.latitude=f.getCenter().lat(),window.localStorage.longitude=f.getCenter().lng()})}function u(){google.maps.event.addListener(f,"maptypeid_changed",function(){i()})}function d(){var e=[{featureType:"administrative",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:"#439aa5"}]},{featureType:"administrative.locality",elementType:"all",stylers:[{color:"#32485c"},{visibility:"simplified"}]},{featureType:"administrative.neighborhood",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"landscape.natural",elementType:"all",stylers:[{color:"#e9dddb"}]},{featureType:"landscape.natural.terrain",elementType:"geometry",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi.park",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"poi.park",elementType:"geometry.fill",stylers:[{color:"#c4e661"}]},{featureType:"poi.park",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#32485c"},{weight:"0.7"}]},{featureType:"road.arterial",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"road.arterial",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.arterial",elementType:"geometry.stroke",stylers:[{color:"#32485c"},{weight:"0.25"}]},{featureType:"road.arterial",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.local",elementType:"geometry.stroke",stylers:[{color:"#ef798e"},{weight:"0.5"},{visibility:"off"}]},{featureType:"transit",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#ef798e"}]},{featureType:"transit.line",elementType:"geometry.fill",stylers:[{weight:"2.06"}]},{featureType:"transit.line",elementType:"geometry.stroke",stylers:[{weight:"10.00"}]},{featureType:"transit.line",elementType:"labels.text.stroke",stylers:[{weight:"0.01"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{visibility:"on"},{weight:"10.00"},{color:"#439aa5"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"on"},{color:"#32485c"},{weight:"0.85"}]}],o={name:"Custom Style"},t=new google.maps.StyledMapType(e,o);f.mapTypes.set(y,t)}function m(){void 0===f&&(f=new google.maps.Map(t[0],T)),d(),u(),o.$emit("mapInit",f),c(),s(),p(),g(),i()}var f,y="custom_style",h=({url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},{url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)}),w=new google.maps.LatLng(34.06148453403353,-118.2785067220459);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(w=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude));var v,T={center:w,zoom:15,MapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1,streetViewControl:!1,mapTypeControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,y]},mapTypeId:y},S=[],$=[];m()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:a}}]),angular.module("app").service("UtilSvc",function(){var e=this;e.deg2rad=function(e){return e*(Math.PI/180)},e.getDistanceFromLatLonInKm=function(o,t,n,a){var l=6371,r=e.deg2rad(n-o),i=e.deg2rad(a-t),s=Math.sin(r/2)*Math.sin(r/2)+Math.cos(e.deg2rad(o))*Math.cos(e.deg2rad(n))*Math.sin(i/2)*Math.sin(i/2),c=2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s)),g=l*c;return g}}),angular.module("app").controller("AccountCtrl",["$scope","$location","UserSvc",function(e,o,t){e.$emit("pagechange",e.pageId.account),e.changePassword=function(e,n){t.changePassword(e,n).then(function(){swal("","Password have been changed","success"),o.path("/")},function(e){401==e.status?swal("","Original password is wrong.","error"):swal("","Can not change password.","error")})}}]),angular.module("app").controller("LoginCtrl",["$rootScope","$scope","$location","UserSvc",function(e,o,t,n){o.$emit("pagechange",o.pageId.login),o.login=function(o,a){n.login(o,a).then(function(o){t.path("/"),e.$emit("login",o)},function(e){swal("Log-in failed!","Password/ID wrong","error")})}}]),angular.module("app").controller("RegisterCtrl",["$scope","$location","UserSvc",function(e,o,t){e.$emit("pagechange",e.pageId.register),e.register=function(n,a,l,r){t.register(n,a,l,r).then(function(t){swal("OK!","Successfully registered","success"),o.path("/"),e.$emit("login",t)},function(e){swal("Register failed!","Username already exists","error")})}}]),angular.module("app").service("UserSvc",["$http","$rootScope",function(e,o){var t=this;t.getUser=function(){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(e){return e.data},function(e){currentUser=void 0})},t.remainLogin=function(){if(console.log("Token:",localStorage.getItem("token")),console.log("Application has been launched"),"undefined"!=window.localStorage.getItem("token")&&"null"!=window.localStorage.getItem("token")&&window.localStorage.getItem("token")){e.defaults.headers.common["X-Auth"]=window.localStorage.getItem("token"),console.log("Remain Login in process..");t.getUser().then(function(e){o.$emit("login",e)},function(e){console.log(e),currentUser=void 0})}},t.changePassword=function(o,t){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(n){return e.post("/api/users/password_change",{password:t,newPassword:o,username:n.data.userName})})},t.login=function(o,n){return e.post("/api/sessions",{username:o,password:n}).then(function(o){return window.localStorage.token=o.data,e.defaults.headers.common["X-Auth"]=o.data,t.getUser()})},t.register=function(o,n,a,l){return e.post("/api/users",{userName:o,password:n,userdob:a,sexPos:l}).then(function(){return t.login(o,n)})},t.logout=function(){window.localStorage.longitude=void 0,window.localStorage.latitude=void 0,window.localStorage.token=void 0,e.defaults.headers.common["X-Auth"]=void 0}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc","$window","$document",function(e,o,t,n){e.$emit("pagechange",e.pageId.post),e.posts=[];var a=0,l=10;e.moveToLoc=function(o){var t=e.posts[o],a=angular.fromJson(t.sexLocation),l=new google.maps.LatLng(a.lat,a.lon);e.map.panTo(l),e.map.setZoom(16);var r=0,i=480;n.scrollTop(r,i).then(function(){console&&console.log("You just scrolled to the top!")})},e.addPost=function(){var t=e.sexPlaceAutocompleted,n=e.postLocation;console.log("location:"+n.lat+","+n.lon+"\n place:"+t);var a=JSON.stringify(n);console.log(e.sexTime),o.create({userName:void 0,userAge:void 0,sexPlace:t,sexTime:e.sexTime,sexTarget:e.sexTarget,sexLocation:a}).success(function(o){google.maps.event.trigger(e.map,"maptypeid_changed"),e.posts.unshift(o),e.sexTime=null,e.sexTarget=null}).error(function(e,o){401==o?swal("Log-in failed","Please log in","error"):swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){o.fetch(a,l).success(function(o){a++,console.log("Posts have been loaded successfully for front page"),e.posts=e.posts.concat(o)})},e.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetchAll=function(){return e.get("/api/posts")},this.fetch=function(o,t){var n="/api/posts/"+o+"?perpage="+t;return e.get(n)},this.create=function(o){return e.post("/api/posts",o)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJtYXAvbWFwLmRpcmVjdGl2ZS5qcyIsIm1hcC91dGlsLnN2Yy5qcyIsInVzZXIvYWNjb3VudC5jdHJsLmpzIiwidXNlci9sb2dpbi5jdHJsLmpzIiwidXNlci9yZWdpc3Rlci5jdHJsLmpzIiwidXNlci91c2VyLnN2Yy5qcyIsInBvc3RzL3Bvc3RzLmN0cmwuanMiLCJwb3N0cy9wb3N0cy5zdmMuanMiLCJhcHAuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkcm9vdFNjb3BlIiwiJHNjb3BlIiwiJHdpbmRvdyIsIlVzZXJTdmMiLCJwYWdlSWQiLCJwb3N0IiwicmVnaXN0ZXIiLCJsb2dpbiIsImFjY291bnQiLCJuYXZDb2xsYXBzZWQiLCJjb2xsYXBzZSIsIm1vdmVUb0N1cnJlbnRMb2NhdGlvbiIsImdldEN1cnJMb2NTdWNjZXNzIiwicG9zIiwiY3VycmVudFBhZ2VJZCIsImNyZCIsImNvb3JkcyIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiZ29vZ2xlTG9jIiwiZ29vZ2xlIiwibWFwcyIsIkxhdExuZyIsImV2ZW50IiwidHJpZ2dlciIsIm1hcCIsInBhblRvIiwic2V0Wm9vbSIsImdldEN1cnJMb2NFcnJvciIsImVyciIsImNvbnNvbGUiLCJ3YXJuIiwiY29kZSIsIm1lc3NhZ2UiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInN3YWwiLCJ0aXRsZSIsInRleHQiLCJ0aW1lciIsInNob3dDb25maXJtQnV0dG9uIiwibG9nb3V0IiwiY3VycmVudFVzZXIiLCJ1bmRlZmluZWQiLCIkb24iLCJfIiwidXNlciIsImxvY2F0aW9uIiwibG9nIiwibGF0IiwibG9uIiwibG5nIiwicG9zdExvY2F0aW9uIiwicGxhY2UiLCIkJHBoYXNlIiwiJGFwcGx5Iiwic2V4UGxhY2VBdXRvY29tcGxldGVkIiwicmVtYWluTG9naW4iLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJkaXJlY3RpdmUiLCJQb3N0c1N2YyIsIlV0aWxTdmMiLCIkdGltZW91dCIsIiRjb21waWxlIiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwiZHJhd0hlbHBlck1hcmtlciIsIm1hcmtlciIsImkiLCJoZWxwZXJNYXJrZXJzIiwic2V0TWFwIiwiTWFya2VyIiwicG9zaXRpb24iLCJpY29uIiwiaW1hZ2VUYXJnZXQiLCJwdXNoIiwiZHJhd0FuZFNldFBsYWNlIiwiaW5mb1dpbmRvdyIsImNsb3NlIiwiZ2VvY29kZXIiLCJHZW9jb2RlciIsIiRlbWl0IiwiZ2VvY29kZSIsImxhdExuZyIsInJlc3VsdHMiLCJzdGF0dXMiLCJmb3JtYXR0ZWRfYWRkcmVzcyIsImRyYXdQb3N0TWFya2VycyIsInBvc3RzIiwiZmV0Y2hBbGwiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJsZW5ndGgiLCJtYXJrZXJzIiwiX2lkIiwiZnJvbUpzb24iLCJzZXhMb2NhdGlvbiIsIm1hcmtlck9wdGlvbnMiLCJwYXJlbnQiLCJjaGlsZCIsIiRuZXciLCJvcGVuV2luZG93IiwiY29udGVudCIsInNleFRhcmdldCIsImFnZSIsInVzZXJBZ2UiLCJodG1sIiwiY29tcGlsZWQiLCJpbmZvV2luZG93T3B0aW9ucyIsInBpeGVsT2Zmc2V0IiwiU2l6ZSIsImRpc2FibGVBdXRvUGFuIiwiSW5mb1dpbmRvdyIsIm9wZW4iLCJzZXRTZWFyY2hCb3giLCJpbnB1dCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjdXJyTG9jQnRuIiwiY29udHJvbHMiLCJDb250cm9sUG9zaXRpb24iLCJUT1BfTEVGVCIsIlRPUF9SSUdIVCIsInNlYXJjaEJveCIsInBsYWNlcyIsIlNlYXJjaEJveCIsImFkZExpc3RlbmVyIiwiZ2V0UGxhY2VzIiwiZ2VvbWV0cnkiLCJzZXRDbGlja01hcCIsInNldE1vdmVUb0N1cnJlbnRMb2NhdGlvbiIsInNldENlbnRlckNoYW5nZWQiLCJnZXRDZW50ZXIiLCJzZXRMb2FkUG9zdE1hcmtlcnMiLCJzZXRTdHlsZUZvck1hcCIsImZlYXR1cmVPcHRzIiwiZmVhdHVyZVR5cGUiLCJlbGVtZW50VHlwZSIsInN0eWxlcnMiLCJ2aXNpYmlsaXR5IiwiY29sb3IiLCJ3ZWlnaHQiLCJzdHlsZWRNYXBPcHRpb25zIiwibmFtZSIsImN1c3RvbU1hcFR5cGUiLCJTdHlsZWRNYXBUeXBlIiwibWFwVHlwZXMiLCJzZXQiLCJDTE9VRF9NQVBfSUQiLCJpbml0TWFwIiwiTWFwIiwibWFwT3B0aW9ucyIsInVybCIsInNpemUiLCJvcmlnaW4iLCJQb2ludCIsImFuY2hvciIsInNjYWxlZFNpemUiLCJpbml0aWFsTWFwQ2VudGVyIiwiaXNOYU4iLCJjZW50ZXIiLCJ6b29tIiwiTWFwVHlwZUlkIiwiUk9BRE1BUCIsInNjcm9sbHdoZWVsIiwic3RyZWV0Vmlld0NvbnRyb2wiLCJtYXBUeXBlQ29udHJvbCIsIm1hcFR5cGVDb250cm9sT3B0aW9ucyIsIm1hcFR5cGVJZHMiLCJtYXBUeXBlSWQiLCJyZXN0cmljdCIsInRlbXBsYXRlIiwicmVwbGFjZSIsInNlcnZpY2UiLCJzdmMiLCJ0aGlzIiwiZGVnMnJhZCIsImRlZyIsIk1hdGgiLCJQSSIsImdldERpc3RhbmNlRnJvbUxhdExvbkluS20iLCJsYXQxIiwibG9uMSIsImxhdDIiLCJsb24yIiwiUiIsImRMYXQiLCJkTG9uIiwiYSIsInNpbiIsImNvcyIsImMiLCJhdGFuMiIsInNxcnQiLCJkIiwiJGxvY2F0aW9uIiwiY2hhbmdlUGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsInBhc3N3b3JkIiwidGhlbiIsInBhdGgiLCJ1c2VybmFtZSIsImVycm9yIiwidXNlcmRvYiIsInNleHBvcyIsIiRodHRwIiwiZ2V0VXNlciIsImdldCIsImhlYWRlcnMiLCJYLUF1dGgiLCJkZWZhdWx0cyIsImNvbW1vbiIsImRhdGEiLCJnZXRJdGVtIiwidXNlck5hbWUiLCJ0b2tlbiIsInNleFBvcyIsIiRkb2N1bWVudCIsIl9wYWdlIiwiX3BlclBhZ2UiLCJtb3ZlVG9Mb2MiLCJpZCIsInRvcCIsImR1cmF0aW9uIiwic2Nyb2xsVG9wIiwiYWRkUG9zdCIsImxvY2F0aW9uSlNPTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXhUaW1lIiwiY3JlYXRlIiwic2V4UGxhY2UiLCJ1bnNoaWZ0IiwicmVxdWVzdEZldGNoIiwiZmV0Y2giLCJjb25jYXQiLCJwYWdlIiwicGVycGFnZSJdLCJtYXBwaW5ncyI6IkFBQ0FBLFFBQUFDLE9BQUEsT0FDQSxVQUNBLFdBQ0Esb0JDSEFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxhQUFBLFNBQUEsVUFBQSxVQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FGLEVBQUFHLFFBQ0FDLEtBQUEsRUFDQUMsU0FBQSxFQUNBQyxNQUFBLEVBQ0FDLFFBQUEsR0FHQVAsRUFBQVEsY0FBQSxFQUNBUixFQUFBUyxTQUFBLFdBQ0FULEVBQUFRLGNBQUEsR0FJQVIsRUFBQVUsc0JBQUEsV0FDQSxRQUFBQyxHQUFBQyxHQUVBLEdBQUFaLEVBQUFhLGVBQUFiLEVBQUFHLE9BQUFDLEtBQUEsQ0FHQSxHQUFBVSxHQUFBRixFQUFBRyxNQUVBQyxRQUFBQyxhQUFBQyxTQUFBSixFQUFBSSxTQUNBRixPQUFBQyxhQUFBRSxVQUFBTCxFQUFBSyxTQUtBLElBQUFDLEdBQUEsR0FBQUMsUUFBQUMsS0FBQUMsT0FBQVQsRUFBQUksU0FBQUosRUFBQUssVUFFQUUsUUFBQUMsS0FBQUUsTUFBQUMsUUFBQXpCLEVBQUEwQixJQUFBLGtCQUFBTixHQUVBcEIsRUFBQTBCLElBQUFDLE1BQUFQLEdBQ0FwQixFQUFBMEIsSUFBQUUsUUFBQSxLQUdBLFFBQUFDLEdBQUFDLEdBQ0FDLFFBQUFDLEtBQUEsU0FBQUYsRUFBQUcsS0FBQSxNQUFBSCxFQUFBSSxTQUlBQyxVQUFBQyxZQUFBQyxtQkFBQTFCLEVBQUFrQixH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LFNBQU9nQyxHQUNyQzlCLEtBQUt0RixTQUFXLFdBQ2YsTUFBT29ILEdBQU1FLElBQUksZUFHbEJoQyxLQUFLMkQsTUFBUSxTQUFTRSxFQUFNQyxHQUM3QixHQUFBckYsR0FBUSxjQUFPb0YsRUFBQSxZQUFBQyxDQUNkLE9BQVFoQyxHQUFBRSxJQUFBdkQsSUFHUnVCLEtBQUt1RCxPQUFTLFNBQVMzTyxHQUN0QixNQUFPa04sR0FBTWxOLEtBQUssYUFBY0EiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuXHQnbmdSb3V0ZScsXG5cdCdkdVNjcm9sbCcsXG5cdCdpbmZpbml0ZS1zY3JvbGwnXG5dKTtcbiIsIlxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkd2luZG93LCBVc2VyU3ZjKXtcblx0JHNjb3BlLnBhZ2VJZCA9IHsgXG5cdFx0cG9zdCAgICAgOiAwLFxuXHRcdHJlZ2lzdGVyIDogMSxcblx0XHRsb2dpbiAgICA6IDIsXG5cdFx0YWNjb3VudCAgOiAzLCBcblx0fTtcblxuXHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0JHNjb3BlLmNvbGxhcHNlID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0fTtcblxuXHQvKiBtb3ZlIHRvIGN1cnJlbnQgbG9jYXRpb24gKi9cblx0JHNjb3BlLm1vdmVUb0N1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG5cdFx0ZnVuY3Rpb24gZ2V0Q3VyckxvY1N1Y2Nlc3MocG9zKSB7XG4gICAgICAgICAgICAvKiBtYWtlIHN1cmUgdG8gY2hlY2sgd2UgYXJlIG9uIHBvc3QgcGFnZSB3aXRoIG1hcCBmaXJzdCAqL1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50UGFnZUlkICE9ICRzY29wZS5wYWdlSWQucG9zdClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciBjcmQgPSBwb3MuY29vcmRzO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gY3JkLmxhdGl0dWRlO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBjcmQubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdMYXRpdHVkZSA6ICcgKyBjcmQubGF0aXR1ZGUpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTG9uZ2l0dWRlOiAnICsgY3JkLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdNb3JlIG9yIGxlc3MgJyArIGNyZC5hY2N1cmFjeSArICcgbWV0ZXJzLicpO1xuICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoY3JkLmxhdGl0dWRlLCBjcmQubG9uZ2l0dWRlKTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcigkc2NvcGUubWFwLCAnaGVhZGluZ19jaGFuZ2VkJywgZ29vZ2xlTG9jKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJHNjb3BlLm1hcC5wYW5Ubyhnb29nbGVMb2MpXG4gICAgICAgICAgICAkc2NvcGUubWFwLnNldFpvb20oMTUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3VyckxvY0Vycm9yKGVycikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdFUlJPUignICsgZXJyLmNvZGUgKyAnKTogJyArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGluaXQgbWFwIGFuZCBwbGFjZSBzb21lIG1hcmtlcnMsIHNvIGV2ZXJ5dGhpbmcgc3RhcnQgd2l0aCB0aGlzIGZ1bmN0aW9uLiAqL1xuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGdldEN1cnJMb2NTdWNjZXNzLCBnZXRDdXJyTG9jRXJyb3IpO1xuXG4gICAgICAgIHN3YWwoeyAgIHRpdGxlOiBcIlwiLCAgIHRleHQ6IFwiTW92aW5nIHRvIGN1cnJlbnQgbG9jYXRpb24uLlwiLCAgIHRpbWVyOiAxNTAwLCAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSB9KTtcblx0fTtcblxuXHQkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUuY29sbGFwc2UoKTtcblxuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcblxuXHRcdFVzZXJTdmMubG9nb3V0KCk7XG5cblx0XHRzd2FsKCcnLFwiU3VjY2Vzc2Z1bGx5IGxvZ2dlZCBvdXRcIik7XG5cdH07XG5cblx0LyogdXNpbmcgcm9vdFNjb3BlIHNvIHRoYXQgVXNlclN2YyBjYW4gZW1pdCBhIGJyb2FkY2FzdCAqL1xuXHQkcm9vdFNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKXtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHR9KTtcblxuXHQkc2NvcGUuJG9uKCdsb2MnLCBmdW5jdGlvbihfLCBsb2NhdGlvbil7XG5cdFx0Y29uc29sZS5sb2cobG9jYXRpb24pO1xuXHRcdHZhciBsYXQgPSBsb2NhdGlvbi5sYXQoKTtcblx0XHR2YXIgbG9uID0gbG9jYXRpb24ubG5nKCk7XG5cdFx0JHNjb3BlLnBvc3RMb2NhdGlvbiA9IHtcblx0XHRcdGxhdDogbGF0LFxuXHRcdFx0bG9uOiBsb25cblx0XHR9O1xuXHRcdGNvbnNvbGUubG9nKCRzY29wZS5wb3N0TG9jYXRpb24pO1xuXHR9KTtcblxuXHQkc2NvcGUuJG9uKCdwYWdlY2hhbmdlJywgZnVuY3Rpb24oXywgcGFnZUlkKXtcblx0XHQkc2NvcGUuY3VycmVudFBhZ2VJZCA9IHBhZ2VJZDtcblx0fSk7XG5cblx0JHNjb3BlLiRvbigncGxhY2UnLCBmdW5jdGlvbihfLCBwbGFjZSl7XG5cdFx0Ly8gRm9yY2luZyB0aGUgdXBkYXRlIHdpdGggJGFwcGx5KCkgbWV0aG9kIG9uICRzY29wZVxuXHRcdC8vIHByb2JsZW0gcmVsYXRlZCBub3RlOiBodHRwOi8vd3d3LmplZmZyeWhvdXNlci5jb20vaW5kZXguY2ZtLzIwMTQvNi8yL0hvdy1kby1JLXJ1bi1jb2RlLXdoZW4tYS12YXJpYWJsZS1jaGFuZ2VzLXdpdGgtQW5ndWxhckpTXG5cdFx0aWYoISRzY29wZS4kJHBoYXNlKSB7IC8vIGNoZWNrIGlmIGEgJGRpZ2VzdCBpcyBhbHJlYWR5IGluIHByb2dyZXNzIGJ5IGNoZWNraW5nICRzY29wZS4kJHBoYXNlLlxuXHRcdFx0JHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuXHRcdFx0XHRcdCRzY29wZS5zZXhQbGFjZUF1dG9jb21wbGV0ZWQgPSBwbGFjZTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9XG5cblx0fSk7XG5cblx0JHNjb3BlLiRvbignbWFwSW5pdCcsIGZ1bmN0aW9uKF8sIG1hcCl7XG5cdFx0JHNjb3BlLm1hcCA9IG1hcDtcblx0fSk7XG5cblx0VXNlclN2Yy5yZW1haW5Mb2dpbigpO1xufSk7IiwiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKXtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oJy8nLCBcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgXG5cdFx0XHR0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcG9zdHMuaHRtbCdcblx0XHR9KVxuXHQud2hlbignL3JlZ2lzdGVyJywgXG5cdFx0e1xuXHRcdFx0Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcmVnaXN0ZXIuaHRtbCdcblx0XHR9KVxuXHQud2hlbignL2xvZ2luJyxcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnTG9naW5DdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9sb2dpbi5odG1sJ1xuXHRcdH0pXG5cdC53aGVuKCcvYWNjb3VudCcsXG5cdFx0e1xuXHRcdFx0Y29udHJvbGxlcjogJ0FjY291bnRDdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9hY2NvdW50Lmh0bWwnXG5cdFx0fSlcblx0Ly8gUmVkaXJlY3QgdG8gdGhlIHJvb3QgcGFnZS5cblx0Lm90aGVyd2lzZShcblx0XHR7XG4gICBcdFx0XHRyZWRpcmVjdFRvOiAnLydcblx0XHR9KTtcbn0pO1xuIiwiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5kaXJlY3RpdmUoJ2FwcE1hcCcsIGZ1bmN0aW9uKFBvc3RzU3ZjLCBVdGlsU3ZjLCAkdGltZW91dCwgJGNvbXBpbGUpIHtcbiAgICAvLyBkaXJlY3RpdmUgbGluayBmdW5jdGlvblxuICAgIHZhciBsaW5rID0gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHZhciBtYXA7XG5cbiAgICAgICAgdmFyIENMT1VEX01BUF9JRCA9ICdjdXN0b21fc3R5bGUnOyAvLyBtYXAgc3R5bGVcbiAgICAgICAgXG4gICAgICAgIHZhciBpbWFnZVBvc3QgPSB7XG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2NhdGNobWUuaWZ5b3VjYW4uY29tL2ltYWdlcy9waWN0dXJlcy9JWUNfSWNvbnMvSVlDX0xvY2F0aW9uX0ljb25fU21hbGwucG5nJyxcbiAgICAgICAgICAgIHNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEwMCwgMTAwKSxcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTcsIDM0KSxcbiAgICAgICAgICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEsIDEpXG4gICAgICAgIH07XG5cbiAgICAgICAgIHZhciBpbWFnZVRhcmdldCA9IHtcbiAgICAgICAgICAgIHVybDogJ2h0dHA6Ly93d3cuY2xrZXIuY29tL2NsaXBhcnRzL1UvUC9qL00vSS9pL3gtbWFyay15ZWxsb3ctbWQucG5nJyxcbiAgICAgICAgICAgIHNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEwMCwgMTAwKSxcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTcsIDM0KSxcbiAgICAgICAgICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDI1LCAyNSlcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBtYXAgY29uZmlnXG4gICAgICAgIC8vY29uc29sZS5sb2coJ3dpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgJywgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSApO1xuXG4gICAgICAgIHZhciBpbml0aWFsTWFwQ2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZygzNC4wNjE0ODQ1MzQwMzM1MywgLTExOC4yNzg1MDY3MjIwNDU5KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghaXNOYU4od2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSkgJiYgIWlzTmFOKHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlKSlcbiAgICAgICAge1xuICAgICAgICAgICAgaW5pdGlhbE1hcENlbnRlciA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcod2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSwgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZygnd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSAnLCB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlICk7XG4gICAgICAgIFxuICAgICAgICAvL2NvbnNvbGUubG9nKGluaXRpYWxNYXBDZW50ZXIpO1xuXG4gICAgICAgIHZhciBtYXBPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGNlbnRlciAgICAgIDogaW5pdGlhbE1hcENlbnRlcixcbiAgICAgICAgICAgICAgICB6b29tICAgICAgICA6IDE1LFxuICAgICAgICAgICAgICAgIE1hcFR5cGVJZCAgIDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsXG4gICAgICAgICAgICAgICAgc2Nyb2xsd2hlZWwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzdHJlZXRWaWV3Q29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1hcFR5cGVDb250cm9sT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcFR5cGVJZHM6IFtnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwgQ0xPVURfTUFQX0lEXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hcFR5cGVJZDogQ0xPVURfTUFQX0lEXG4gICAgICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gZHJhdyBtYXAgd2l0aCBoZWxwZXIgbWFya2Vyc1xuICAgICAgICB2YXIgaGVscGVyTWFya2VycyA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBkcmF3SGVscGVyTWFya2VyKGxvY2F0aW9uKXtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IGhlbHBlck1hcmtlcnNbaV07IGkrKykge1xuICAgICAgICAgICAgICAgIG1hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWxwZXJNYXJrZXJzID0gW107XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGxvY2F0aW9uLCBcbiAgICAgICAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICAgICAgICBpY29uOiBpbWFnZVRhcmdldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBoZWxwZXJNYXJrZXJzLnB1c2gobWFya2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUhlbHBlck1hcmtlcigpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gaGVscGVyTWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlbHBlck1hcmtlcnMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdBbmRTZXRQbGFjZShsb2NhdGlvbilcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gb25seSBlbmFibGUgd2hlbiBsb2dnZWQgaW5cbiAgICAgICAgICAgIGlmICghc2NvcGUuY3VycmVudFVzZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoaW5mb1dpbmRvdylcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93LmNsb3NlKCk7XG5cbiAgICAgICAgICAgIHZhciBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBicm9hZGNhc3QgbG9jYXRpb24gaW5mb3IobG9uLGxhdClcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdsb2MnLCBsb2NhdGlvbik7XG5cbiAgICAgICAgICAgIGRyYXdIZWxwZXJNYXJrZXIobG9jYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBicm9hZGNhc3QgcGxhY2UgZm9ybWF0dGVkX2FkZHJlc3MgYW5kIGRyYXcgaWNvblxuICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSggeyAnbGF0TG5nJzogbG9jYXRpb24gfSwgZnVuY3Rpb24ocmVzdWx0cywgc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgLy8gYXMgdXNlciBjbGlja3Mgb24gdGhlIG1hcCxcbiAgICAgICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIHNhdmUgdGhlIGZvcm1hdHRlZCBhZGRyZXNzIGluICRzY29wZSBhbmRcbiAgICAgICAgICAgICAgICAvLyBpdCB3aWxsIGJlIHVzZWQgdGhyb3VnaCBwb3N0cy5jdHJsXG4gICAgICAgICAgICAgICAgLy8gZW1pdCBicm9hZGNhc2UgJ3BsYWNlJyBhbmQgc2VuZCB0aGlzIHRvIGFwcGxpY2F0aW9uLmN0cmxcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBicm9hZGNhc3QgZm9ybWF0dGVkX2FkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3BsYWNlJywgcmVzdWx0c1sxXS5mb3JtYXR0ZWRfYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgc3dhbChcIlwiLFwiTG9jYXRpb24gZG9lcyBub3QgZXhpc3RzXCIpO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgncGxhY2UnLCBcIkxvY2F0aW9uIGRvZXMgbm90IGV4aXN0c1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICAvLyBwbGFjZSBhIG1hcmtlciBhbmQgaW5mb1dpbmRvd1xuICAgICAgICB2YXIgaW5mb1dpbmRvdztcbiAgICAgICAgdmFyIG1hcmtlcnMgPSBbXTtcblxuICAgICAgICBmdW5jdGlvbiBkcmF3UG9zdE1hcmtlcnMoKSB7XG4gICAgICAgICAgICB2YXIgcG9zdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBQb3N0c1N2Yy5mZXRjaEFsbCgpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcG9zdHMgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdCA9IHBvc3RzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJrZXJzW2ldKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrZXJzW2ldLnBvc3QuX2lkID09IHBvc3QuX2lkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvL2lmICghcG9zdC5oYXNPd25Qcm9wZXJ0eSgnc2V4TG9jYXRpb24nKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gYW5ndWxhci5mcm9tSnNvbihwb3N0LnNleExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0LCBsb2NhdGlvbi5sb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGdvb2dsZUxvYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiU2V4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ljb246IGltYWdlUG9zdFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKG1hcmtlck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgbWFya2VyIHRvIGFycmF5XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXI6IG1hcmtlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ICA6IHBvc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBzY29wZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5XaW5kb3cgPSAoZnVuY3Rpb24obWFya2VyLCBwb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xvc2Ugd2luZG93IGlmIG5vdCB1bmRlZmluZWRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvV2luZG93ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmNvbnRlbnQgPSBwb3N0LnNleFRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5hZ2UgPSBwb3N0LnVzZXJBZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2PiA8c3Ryb25nIGNsYXNzPVwicG9zdC1jb250ZW50XCI+XCInICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuY29udGVudCArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIjwvc3Ryb25nPiAgIDxzcGFuIGNsYXNzPVwicG9zdC1jb250ZW50LWFnZVwiPkFnZSAtICAnICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuYWdlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPjwvZGl2Pic7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21waWxlZCA9ICRjb21waWxlKGh0bWwpKGNoaWxkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgd2luZG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZm9XaW5kb3dPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb21waWxlZFswXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpeGVsT2Zmc2V0OiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgwLCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUF1dG9QYW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coaW5mb1dpbmRvd09wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cub3BlbihtYXAsIG1hcmtlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKG1hcmtlciwgcG9zdCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBvcGVuV2luZG93KCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAvLyBtb3VzZSBvdmVyIHRvIHZpZXcgdGhlIHBvc3QgaW5mb3JtYXRpb24gLSBjbG9zdXJlXG4gICAgICAgICAgICAgICAgICAgIC8vZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdXNlIG91dCB0byBjbG9zZSB0aGUgcG9zdCBpbmZvIHdpbmRvd1xuICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdtb3VzZW91dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvV2luZG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7Ki9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBvc3RNYXJrZXIoKXtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IG1hcmtlcnNbaV07IGkrKykge1xuICAgICAgICAgICAgICAgIG1hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXJrZXJzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTZWFyY2hCb3goKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHNlYXJjaCBib3ggYW5kIGxpbmsgaXQgdG8gdGhlIFVJIGVsZW1lbnQuXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhYy1pbnB1dCcpKTsgLy8gQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9ICBcbiAgICAgICAgICAgIHZhciBjdXJyTG9jQnRuID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tY3VycicpKTsgICAgICBcbiAgICAgICAgICAgIG1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uVE9QX0xFRlRdLnB1c2goaW5wdXQpO1xuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfUklHSFRdLnB1c2goY3VyckxvY0J0bik7XG5cbiAgICAgICAgICAgIHZhciBzZWFyY2hCb3ggPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLlNlYXJjaEJveCgoaW5wdXQpKTsgLy8gQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9IFxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIHRoZSBldmVudCBmaXJlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gaXRlbSBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gcGljayBsaXN0LiBSZXRyaWV2ZSB0aGUgbWF0Y2hpbmcgcGxhY2VzIGZvciB0aGF0IGl0ZW0uXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihzZWFyY2hCb3gsICdwbGFjZXNfY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZXMgPSBzZWFyY2hCb3guZ2V0UGxhY2VzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGFrZSBvbmx5IDEgc3BvdFxuICAgICAgICAgICAgICAgIHZhciBwbGFjZSA9IHBsYWNlc1swXTtcblxuICAgICAgICAgICAgICAgIC8vIHdoZW4gc2VhcmNoIGhhcHBlbnMsIGxvY2F0aW9uIHdpbGwgYmUgdXBkYXRlZCBhcyB3ZWxsIGZvciBwb3N0XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuJGVtaXQoJ3BsYWNlJywgcGxhY2UuZm9ybWF0dGVkX2FkZHJlc3MpO1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubGF0aXR1ZGU7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sb25naXR1ZGU7XG5cbiAgICAgICAgICAgICAgICBtYXAucGFuVG8ocGxhY2UuZ2VvbWV0cnkubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIC8vbWFwLnNldFpvb20oMTYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRDbGlja01hcCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGNsaWNrIGV2ZW50IG9uIG1hcFxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShldmVudC5sYXRMbmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRNb3ZlVG9DdXJyZW50TG9jYXRpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBjbGljayBldmVudCBvbiBtYXBcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ2hlYWRpbmdfY2hhbmdlZCcsIGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0Q2VudGVyQ2hhbmdlZCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ2NlbnRlcl9jaGFuZ2VkJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gbWFwLmdldENlbnRlcigpLmxhdCgpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gbWFwLmdldENlbnRlcigpLmxuZygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gc2V0TG9hZFBvc3RNYXJrZXJzKClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gbWFudWFsbHkgcmVsb2FkIG1hcmtlcnNcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ21hcHR5cGVpZF9jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmVIZWxwZXJNYXJrZXIoKTtcbiAgICAgICAgICAgICAgICAvL3JlbW92ZVBvc3RNYXJrZXIoKTtcblxuICAgICAgICAgICAgICAgIGRyYXdQb3N0TWFya2VycygpOyBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0U3R5bGVGb3JNYXAoKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZmVhdHVyZU9wdHMgPSBbe1wiZmVhdHVyZVR5cGVcIjpcImFkbWluaXN0cmF0aXZlXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImFkbWluaXN0cmF0aXZlXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzLnRleHQuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiIzQzOWFhNVwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJhZG1pbmlzdHJhdGl2ZS5sb2NhbGl0eVwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiIzMyNDg1Y1wifSx7XCJ2aXNpYmlsaXR5XCI6XCJzaW1wbGlmaWVkXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImFkbWluaXN0cmF0aXZlLm5laWdoYm9yaG9vZFwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGUubmF0dXJhbFwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2U5ZGRkYlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGUubmF0dXJhbC50ZXJyYWluXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaVwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pLnBhcmtcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pLnBhcmtcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjYzRlNjYxXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaS5wYXJrXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmhpZ2h3YXlcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZTlkZGRiXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuaGlnaHdheVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LnN0cm9rZVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiIzMyNDg1Y1wifSx7XCJ3ZWlnaHRcIjpcIjAuN1wifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmFydGVyaWFsXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZTlkZGRiXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5zdHJva2VcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiMzMjQ4NWNcIn0se1wid2VpZ2h0XCI6XCIwLjI1XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHMuaWNvblwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5sb2NhbFwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5sb2NhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNlOWRkZGJcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5sb2NhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LnN0cm9rZVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2VmNzk4ZVwifSx7XCJ3ZWlnaHRcIjpcIjAuNVwifSx7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwidHJhbnNpdFwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ0cmFuc2l0LmxpbmVcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2VmNzk4ZVwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ0cmFuc2l0LmxpbmVcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcIndlaWdodFwiOlwiMi4wNlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ0cmFuc2l0LmxpbmVcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5zdHJva2VcIixcInN0eWxlcnNcIjpbe1wid2VpZ2h0XCI6XCIxMC4wMFwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ0cmFuc2l0LmxpbmVcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHMudGV4dC5zdHJva2VcIixcInN0eWxlcnNcIjpbe1wid2VpZ2h0XCI6XCIwLjAxXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcIndhdGVyXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvblwifSx7XCJ3ZWlnaHRcIjpcIjEwLjAwXCJ9LHtcImNvbG9yXCI6XCIjNDM5YWE1XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcIndhdGVyXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9uXCJ9LHtcImNvbG9yXCI6XCIjMzI0ODVjXCJ9LHtcIndlaWdodFwiOlwiMC44NVwifV19XTtcblxuICAgICAgICAgICAgdmFyIHN0eWxlZE1hcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0N1c3RvbSBTdHlsZSdcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGN1c3RvbU1hcFR5cGUgPSBuZXcgZ29vZ2xlLm1hcHMuU3R5bGVkTWFwVHlwZShmZWF0dXJlT3B0cywgc3R5bGVkTWFwT3B0aW9ucyk7XG4gICAgICAgICAgICBtYXAubWFwVHlwZXMuc2V0KENMT1VEX01BUF9JRCwgY3VzdG9tTWFwVHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbml0IHRoZSBtYXBcbiAgICAgICAgZnVuY3Rpb24gaW5pdE1hcCgpIHtcbiAgICAgICAgICAgIGlmIChtYXAgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZWxlbWVudFswXSwgbWFwT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFN0eWxlRm9yTWFwKCk7XG5cbiAgICAgICAgICAgIHNldExvYWRQb3N0TWFya2VycygpO1xuXG4gICAgICAgICAgICAvLyBicm9hZGNhc3QgdG8gc2VuZCBtYXAgdG8gYXBwbGljYXRpb24gY3RybFxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ21hcEluaXQnLCBtYXApO1xuXG4gICAgICAgICAgICBzZXRDbGlja01hcCgpO1xuXG4gICAgICAgICAgICBzZXRTZWFyY2hCb3goKTtcblxuICAgICAgICAgICAgc2V0Q2VudGVyQ2hhbmdlZCgpO1xuXG4gICAgICAgICAgICBzZXRNb3ZlVG9DdXJyZW50TG9jYXRpb24oKTtcblxuICAgICAgICAgICAgZHJhd1Bvc3RNYXJrZXJzKCk7XG4gICAgICAgIH0gXG5cbiAgICAgICAgaW5pdE1hcCgpO1xuXG4gICAgICAgIC8qXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJMb2NTdWNjZXNzKHBvcykge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIGNoZWNrIHdlIGFyZSBvbiBwb3N0IHBhZ2Ugd2l0aCBtYXAgZmlyc3RcbiAgICAgICAgICAgIGlmIChzY29wZS5jdXJyZW50UGFnZUlkICE9IHNjb3BlLnBhZ2VJZC5wb3N0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgc3dhbCh7ICAgXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiV2UgZm91bmQgeW91IVwiLCAgIFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiRG8geW91IHdhbnQgdG8gbW92ZSB0byB5b3VyIGxvY2F0aW9uPyFcIiwgICBcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLCAgIFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMwMEIyRUUnLCAgIFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgbW92ZSBtZSFcIiwgICBcbiAgICAgICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2UgLFxuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICBmdW5jdGlvbigpeyAgXG4gICAgICAgICAgICAgICAgc3dhbCh7dGl0bGU6IFwiXCIsIHRleHQ6IFwiWW91IGhhdmUgYmVlbiBtb3ZlZCFcIiwgdGltZXI6IDgwMCwgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB1c2VyIHdhbnRzIHRvIG1vdmUsIGxldCBpdCBoYXBwZW4hXG4gICAgICAgICAgICAgICAgdmFyIGNyZCA9IHBvcy5jb29yZHM7XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gY3JkLmxhdGl0dWRlO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gY3JkLmxvbmdpdHVkZTtcblxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0xhdGl0dWRlIDogJyArIGNyZC5sYXRpdHVkZSk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTG9uZ2l0dWRlOiAnICsgY3JkLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTW9yZSBvciBsZXNzICcgKyBjcmQuYWNjdXJhY3kgKyAnIG1ldGVycy4nKTtcbiAgICAgICAgICAgICAgICB2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhjcmQubGF0aXR1ZGUsIGNyZC5sb25naXR1ZGUpO1xuXG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKGdvb2dsZUxvYyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbWFwLnBhblRvKGdvb2dsZUxvYylcbiAgICAgICAgICAgICAgICBtYXAuc2V0Wm9vbSgxNSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJMb2NFcnJvcihlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRVJST1IoJyArIGVyci5jb2RlICsgJyk6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbml0IG1hcCBhbmQgcGxhY2Ugc29tZSBtYXJrZXJzLCBzbyBldmVyeXRoaW5nIHN0YXJ0IHdpdGggdGhpcyBmdW5jdGlvbi5cbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihnZXRDdXJyTG9jU3VjY2VzcywgZ2V0Q3VyckxvY0Vycm9yKTtcblxuICAgICAgICAvLyBzd2FsKHsgICB0aXRsZTogXCJcIiwgICB0ZXh0OiBcIkdldHRpbmcgY3VycmVudCBsb2NhdGlvbi4uXCIsICAgdGltZXI6IDIwMDAsICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlIH0pO1xuICAgICAgICAqL1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwibWFwLWNhbnZhc1wiPjwvZGl2PicsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIGxpbms6IGxpbmtcbiAgICB9O1xufSk7XG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1V0aWxTdmMnLCBmdW5jdGlvbigpe1xuXHR2YXIgc3ZjID0gdGhpcztcblxuXHRzdmMuZGVnMnJhZCA9IGZ1bmN0aW9uKGRlZykge1xuXHQgIHJldHVybiBkZWcgKiAoTWF0aC5QSS8xODApO1xuXHR9O1xuXG5cdHN2Yy5nZXREaXN0YW5jZUZyb21MYXRMb25JbkttID0gZnVuY3Rpb24gKGxhdDEsbG9uMSxsYXQyLGxvbjIpIHtcblx0ICB2YXIgUiA9IDYzNzE7XG5cdCAgdmFyIGRMYXQgPSBzdmMuZGVnMnJhZChsYXQyLWxhdDEpO1xuXHQgIHZhciBkTG9uID0gc3ZjLmRlZzJyYWQobG9uMi1sb24xKTsgXG5cdCAgdmFyIGEgPSBcblx0ICAgIE1hdGguc2luKGRMYXQvMikgKiBNYXRoLnNpbihkTGF0LzIpICtcblx0ICAgIE1hdGguY29zKHN2Yy5kZWcycmFkKGxhdDEpKSAqIE1hdGguY29zKHN2Yy5kZWcycmFkKGxhdDIpKSAqIFxuXHQgICAgTWF0aC5zaW4oZExvbi8yKSAqIE1hdGguc2luKGRMb24vMilcblx0ICAgIDsgXG5cdCAgdmFyIGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxLWEpKTsgXG5cdCAgdmFyIGQgPSBSICogYztcblx0ICByZXR1cm4gZDtcblx0fTtcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FjY291bnRDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpe1xuXHQvKiBlbWl0IGJyb2FkY2FzdCBmb3IgY3VycmVudCBwYWdlSWQgKi9cblx0JHNjb3BlLiRlbWl0KCdwYWdlY2hhbmdlJywgJHNjb3BlLnBhZ2VJZC5hY2NvdW50KTtcblxuXHQkc2NvcGUuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbihuZXdQYXNzd29yZCwgcGFzc3dvcmQpe1xuXHRcdFVzZXJTdmMuY2hhbmdlUGFzc3dvcmQobmV3UGFzc3dvcmQsIHBhc3N3b3JkKVxuXHRcdC50aGVuKFxuXHRcdFx0ZnVuY3Rpb24oKXtcblx0XHRcdFx0c3dhbCgnJywgXCJQYXNzd29yZCBoYXZlIGJlZW4gY2hhbmdlZFwiLCBcInN1Y2Nlc3NcIik7XG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHR9LFxuXHRcdFx0ZnVuY3Rpb24oZXJyKXtcblx0XHRcdFx0aWYgKGVyci5zdGF0dXMgPT0gNDAxKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c3dhbCgnJywgXCJPcmlnaW5hbCBwYXNzd29yZCBpcyB3cm9uZy5cIiwgXCJlcnJvclwiKTtcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN3YWwoJycsIFwiQ2FuIG5vdCBjaGFuZ2UgcGFzc3dvcmQuXCIsXCJlcnJvclwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCk7XG5cdH07XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgVXNlclN2Yyl7XG5cdCRzY29wZS4kZW1pdCgncGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQubG9naW4pO1xuXG5cdC8vIFVzZXJTdmPshJzruYTsiqTsnZggbG9naW7tlajsiJjsl5DshJwg67Cb7J2AIOycoOyggOygleuztOulvFxuXHQvLyDstZzsg4HsnIQg7L2Y7Yq466Gk65+s7J24IEFwcGxpY2F0aW9uQ3RybOydmCAkc2NvcGXroZwg6rCS7J2EIOuztOuCtOq4sCDsnITtlZwg7KCE7YyM66W8IOuztOuCuOuLpC5cblx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcblx0XHRVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcblx0XHQudGhlbihmdW5jdGlvbiAodXNlcil7XG5cdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHRcdFx0JHJvb3RTY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKTtcblx0XHR9LFxuXHRcdGZ1bmN0aW9uIChlcnJvcil7XG5cdFx0XHRzd2FsKFwiTG9nLWluIGZhaWxlZCFcIiwgXCJQYXNzd29yZC9JRCB3cm9uZ1wiLCBcImVycm9yXCIpO1xuXHRcdH0pO1xuXHRcdC8qIG9yIGl0IGNhbiBiZSB0aGlzXG5cdFx0LmNhdGNoKGZ1bmN0aW9uICgpe1xuXHRcdFx0YWxlcnQoXCJJRCBvciBQYXNzd29yZCBpcyB3cm9uZy5cIik7XG5cdFx0fSk7XG5cdFx0Ki9cblx0fTtcbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpe1xuXHQkc2NvcGUuJGVtaXQoJ3BhZ2VjaGFuZ2UnLCAkc2NvcGUucGFnZUlkLnJlZ2lzdGVyKTtcblxuXHQvLyBVc2VyU3Zj7ISc67mE7Iqk7J2YIHJlZ2lzdGVy7ZWo7IiY7JeQ7IScIOuwm+ydgCDsnKDsoIDsoJXrs7TrpbwgLSBhcGnsl5DshJwg67O064K07KGM6riwIOuVjOusuOyXkCAuZGF0YeuhnCDsoJHqt7xcblx0Ly8g7LWc7IOB7JyEIOy9mO2KuOuhpOufrOyduCBBcHBsaWNhdGlvbkN0cmzsnZggJHNjb3Bl66GcIOqwkuydhCDrs7TrgrTquLAg7JyE7ZWcIOyghO2MjOulvCDrs7Trgrjri6QuXG5cdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCwgdXNlcmRvYiwgc2V4cG9zKXtcblx0XHRVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgdXNlcmRvYiwgc2V4cG9zKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh1c2VyKXtcblx0XHRcdHN3YWwoXCJPSyFcIiwgXCJTdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZFwiLCBcInN1Y2Nlc3NcIilcblx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHQkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcik7XG5cdFx0fSxcblx0XHRmdW5jdGlvbihlcnJvcil7XG5cdFx0XHRzd2FsKFwiUmVnaXN0ZXIgZmFpbGVkIVwiLCBcIlVzZXJuYW1lIGFscmVhZHkgZXhpc3RzXCIsIFwiZXJyb3JcIik7XG5cdFx0fSk7XG5cdH07XHRcbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwLCAkcm9vdFNjb3BlKXtcblx0dmFyIHN2YyA9IHRoaXM7XG5cblx0Ly8gc3ZjLnRva2VuICh0aGlzLnRva2VuKSDqsJLsnLzroZwgL2FwaS91c2VyIOulvCDtmLjstpxcblx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnLCBcblx0XHR7XG5cdFx0XHRoZWFkZXJzOiB7J1gtQXV0aCc6ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSB9XG5cdFx0XHQvL2hlYWRlcnM6IHsnWC1BdXRoJzogJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddfVxuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0cmV0dXJuIHJlc3BvbnNlLmRhdGE7ICAvLyAtIGFwaeyXkOyEnCDrs7TrgrTsoYzquLAg65WM66y47JeQIC5kYXRh66GcIOygkeq3vFxuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oZXJyKXtcblx0XHRcdGN1cnJlbnRVc2VyID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8vIGRlc2lnbmVkIHRvIGJlIGNhbGxlZCB3aGVuIGFwcGxpY2F0aW9uIGxhdW5jaGVkXG5cdC8vIGZvciB0aGUgcGVyc29ucyB3aG8gcmVmcmVzaGVkIHRoZSBwYWdlIGJ1dCBkaWQgbm90IGxvZ291dCAtLT4gaXQgd2lsbCBiZSBzdGlsbCBsb2dnZWQgaW4hXG5cdHN2Yy5yZW1haW5Mb2dpbiA9IGZ1bmN0aW9uKCl7XG5cdFx0Y29uc29sZS5sb2coXCJUb2tlbjpcIiwgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpO1xuXHRcdGNvbnNvbGUubG9nKFwiQXBwbGljYXRpb24gaGFzIGJlZW4gbGF1bmNoZWRcIilcblx0XHRpZiAod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpICE9ICd1bmRlZmluZWQnICYmIFxuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpICE9ICdudWxsJyAmJlxuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpIClcblx0XHR7XG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG5cblx0XHRcdGNvbnNvbGUubG9nKFwiUmVtYWluIExvZ2luIGluIHByb2Nlc3MuLlwiKVxuXHRcdFx0dmFyIHVzZXI7XG5cdFx0XHRzdmMuZ2V0VXNlcigpXG5cdFx0XHQudGhlbihmdW5jdGlvbih1c2VyKXtcblx0XHRcdFx0JHJvb3RTY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKTtcblx0XHRcdH0sXG5cdFx0XHRmdW5jdGlvbihlcnIpe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnIpO1xuXHRcdFx0XHRjdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHRzdmMuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbihuZXdQYXNzd29yZCwgcGFzc3dvcmQpe1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnLCBcblx0XHR7XG5cdFx0XHRoZWFkZXJzOiB7J1gtQXV0aCc6ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSB9XG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbih1c2VyKXtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzL3Bhc3N3b3JkX2NoYW5nZScsIFxuXHRcdFx0e1xuXHRcdFx0XHRwYXNzd29yZCAgICA6IHBhc3N3b3JkLFxuXHRcdFx0XHRuZXdQYXNzd29yZCA6IG5ld1Bhc3N3b3JkLFxuXHRcdFx0XHR1c2VybmFtZSAgICA6IHVzZXIuZGF0YS51c2VyTmFtZVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gc2Vzc2lvbiDsnYQg7J207Jqp7ZW07IScLCDtjKjsiqTsm4zrk5zqsIAg7J287LmY7ZWY64qU7KeAIOqygOyCrO2VmOqzoCxcblx0Ly8g7J287LmY7ZWY66m0IOuwm+ydgCBqd3QgZW5jb2RlZOuQnCB1c2VybmFtZSwg7KaJIO2GoO2BsOydhCDqsIDsp4Dqs6AsXG5cdC8vIHZhbOydtOudvOuKlCDrs4DsiJjsl5Ag64Sj6rOgLCDsnbTqsoPsnZgg642w7J207YSw66W8IHN2Yy50b2tlbuyXkOuPhCDsoIDsnqXtlZjqs6AsXG5cdC8vIHN2Yy5nZXRVc2Vy7ZWo7IiY66W8IO2YuOy2nO2VnOuLpC5cblx0c3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIFxuXHRcdHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSwgXG5cdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YTsgLy8gYXBp7JeQ7IScIOuztOuDiOq4sOuVjOusuOyXkCwgLmRhdGHroZwg7KCR6re8IC0gVE9ET1xuXHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gcmVzcG9uc2UuZGF0YTsgLy8g66qo65OgIOyalOyyreyXkCDrjIDtlbQg7ZW064u5IO2XpOuNlOulvCDsoITsl63snLzroZwg67aZ7J6ELlxuXHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0fSlcblx0fTtcblxuXHRzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQsIHVzZXJkb2IsIHNleHBvcyl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCBcblx0XHR7XG5cdFx0XHR1c2VyTmFtZTogdXNlcm5hbWUsXG5cdFx0XHRwYXNzd29yZDogcGFzc3dvcmQsXG5cdFx0XHR1c2VyZG9iIDogdXNlcmRvYixcblx0XHRcdHNleFBvcyAgOiBzZXhwb3Ncblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpe1xuXHRcdFx0cmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdHN2Yy5sb2dvdXQgPSBmdW5jdGlvbigpe1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gdW5kZWZpbmVkO1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgPSB1bmRlZmluZWQ7XG5cdFx0d2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHVuZGVmaW5lZDtcblx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB1bmRlZmluZWQ7IC8vIOuqqOuToCDsmpTssq3sl5Ag64yA7ZW0IO2VtOuLuSDtl6TrjZTrpbwg7KCE7Jet7Jy866GcIOu2meyehC5cblx0fVxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHIuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMsICR3aW5kb3csICRkb2N1bWVudCl7XHJcclx0LyogZW1pdCBicm9hZGNhc3QgZm9yIGN1cnJlbnQgcGFnZUlkICovXHJcdCRzY29wZS4kZW1pdCgncGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQucG9zdCk7XHJcclx0JHNjb3BlLnBvc3RzID0gW107XHJcclx0dmFyIF9wYWdlID0gMDtcclx0dmFyIF9wZXJQYWdlID0gMTA7XHJcclx0LyogbW92ZSB0byBwb3N0J3MgbG9jYXRpb24gKi9cclx0JHNjb3BlLm1vdmVUb0xvYyA9IGZ1bmN0aW9uKGlkKXtcclx0XHR2YXIgcG9zdCA9ICgkc2NvcGUucG9zdHNbaWRdKTtcclxyXHRcdHZhciBsb2NhdGlvbiA9IGFuZ3VsYXIuZnJvbUpzb24ocG9zdC5zZXhMb2NhdGlvbik7XHJcdFx0dmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0LCBsb2NhdGlvbi5sb24pO1xyXHJcdFx0JHNjb3BlLm1hcC5wYW5Ubyhnb29nbGVMb2MpO1xyXHRcdCRzY29wZS5tYXAuc2V0Wm9vbSgxNik7XHJcclx0XHQvKiB1c2luZyBhbmd1bGFyLXNjcm9sbCB0byBtb3ZlIHRvIHRoZSB0b3Agc21vb3RobHkgKi9cclx0XHR2YXIgdG9wID0gMDtcciAgICBcdHZhciBkdXJhdGlvbiA9IDQ4MDtcciAgICBcdCRkb2N1bWVudC5zY3JvbGxUb3AodG9wLCBkdXJhdGlvbikudGhlbihmdW5jdGlvbigpIHtcciAgICAgXHRcdGNvbnNvbGUgJiYgY29uc29sZS5sb2coJ1lvdSBqdXN0IHNjcm9sbGVkIHRvIHRoZSB0b3AhJyk7XHIgICAgXHR9KTtcclxyXHRcdC8qJHdpbmRvdy5zY3JvbGwoMCwgMCk7Ki9cclx0fTtcclxyXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xyXHRcdC8qIGdldCBhdXRvY29tcGxldGVkIHBsYWNlIGFuZCByZXNldChzZXQgdG8gdW5kZWZpbmVkKSAqL1xyXHRcdHZhciBwbGFjZSA9ICRzY29wZS5zZXhQbGFjZUF1dG9jb21wbGV0ZWQ7XHJcdFx0dmFyIGxvY2F0aW9uID0gJHNjb3BlLnBvc3RMb2NhdGlvbjtcclxyXHRcdGNvbnNvbGUubG9nKFwibG9jYXRpb246XCIgKyBsb2NhdGlvbi5sYXQgKyAnLCcgKyBsb2NhdGlvbi5sb24gKyAnXFxuIHBsYWNlOicgKyBwbGFjZSk7XHJcdFx0dmFyIGxvY2F0aW9uSlNPTiA9IEpTT04uc3RyaW5naWZ5KGxvY2F0aW9uKTtcclxyXHRcdGNvbnNvbGUubG9nKCRzY29wZS5zZXhUaW1lKTtcclxyXHRcdFBvc3RzU3ZjLmNyZWF0ZShcclx0XHR7XHJcdFx0XHR1c2VyTmFtZTogdW5kZWZpbmVkLFxyXHRcdFx0dXNlckFnZTogIHVuZGVmaW5lZCxcclx0XHRcdHNleFBsYWNlOiBwbGFjZSxcclx0XHRcdHNleFRpbWU6ICAkc2NvcGUuc2V4VGltZSxcclx0XHRcdHNleFRhcmdldDogJHNjb3BlLnNleFRhcmdldCxcclx0XHRcdHNleExvY2F0aW9uOiBsb2NhdGlvbkpTT05cclx0XHR9KVxyXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHBvc3Qpe1xyXHRcdFx0Lypcclx0XHRcdHZhciBtc2cgPSBcIllvdSB3YW50ZWQgdG8gaGF2ZSBzZXggd2l0aCBcIiArIFxyXHRcdFx0cG9zdC5zZXhUYXJnZXQ7XHJcdFx0XHRzd2FsKFwiR3JlYXQhXCIsIG1zZywgXCJzdWNjZXNzXCIpO1xyXHJcdFx0XHQvKiBtYW51YWxseSByZWxvYWQgbWFya2VycyBcclx0XHRcdHVzaW5nIG1hcHR5cGVpZCBzaW5jZSBpdHMgbW9zdCBsZWFzdCB1c2VkIGV2ZW50LCAtIGtpbmQgb2YgaGFja3kgd2F5IHRvIGRvIGl0XHJcdFx0XHQqL1xyXHRcdFx0Z29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcigkc2NvcGUubWFwLCAnbWFwdHlwZWlkX2NoYW5nZWQnKTtcclxyXHRcdFx0JHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XHJcclx0XHRcdC8qIHJlc2V0IGlucHV0IGZvcm1zICovXHJcdFx0XHQkc2NvcGUuc2V4VGltZSAgPSBudWxsO1xyXHRcdFx0JHNjb3BlLnNleFRhcmdldCA9IG51bGw7XHJcdFx0fSlcclx0XHQuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKXtcclx0XHRcdGlmIChzdGF0dXMgPT0gNDAxKVxyXHRcdFx0e1xyXHRcdFx0XHRzd2FsKFwiTG9nLWluIGZhaWxlZFwiLCBcIlBsZWFzZSBsb2cgaW5cIiwgXCJlcnJvclwiKTtcclx0XHRcdH1cclx0XHRcdGVsc2Vcclx0XHRcdHtcclx0XHRcdFx0c3dhbChcIlBvc3QgZmFpbGVkXCIsIFwiUGxlYXNlIGNvbXBsZXRlIHRoZSBmcm9tIGNvcnJlY3RseVwiLCBcImVycm9yXCIpO1xyXHRcdFx0fVxyXHRcdH0pO1xyXHR9O1xyXHJcdCRzY29wZS5yZXF1ZXN0RmV0Y2ggPSBmdW5jdGlvbigpIHtcclx0XHRQb3N0c1N2Yy5mZXRjaChfcGFnZSwgX3BlclBhZ2UpXHJcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdHMpe1xyXHRcdFx0X3BhZ2UrKztcclx0XHRcdGNvbnNvbGUubG9nKCdQb3N0cyBoYXZlIGJlZW4gbG9hZGVkIHN1Y2Nlc3NmdWxseSBmb3IgZnJvbnQgcGFnZScpO1xyXHRcdFx0JHNjb3BlLnBvc3RzID0gJHNjb3BlLnBvc3RzLmNvbmNhdChwb3N0cyk7XHJcdFx0fSk7XHJcdH07XHJcclx0JHNjb3BlLnJlcXVlc3RGZXRjaCgpO1xyfSk7XHIiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKXtcblx0dGhpcy5mZXRjaEFsbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcblx0fTtcblxuXHR0aGlzLmZldGNoID0gZnVuY3Rpb24ocGFnZSwgcGVycGFnZSl7XG5cdFx0dmFyIHVybCA9ICcvYXBpL3Bvc3RzLycgKyBwYWdlICsgJz9wZXJwYWdlPScgKyBwZXJwYWdlO1xuXHRcdHJldHVybiAkaHR0cC5nZXQodXJsKTtcblx0fTtcblxuXHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG5cdH07XG59KTsiLCJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG5cdCduZ1JvdXRlJyxcblx0J2R1U2Nyb2xsJyxcblx0J2luZmluaXRlLXNjcm9sbCdcbl0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHdpbmRvdywgVXNlclN2Yyl7XG5cdCRzY29wZS5wYWdlSWQgPSB7IFxuXHRcdHBvc3QgICAgIDogMCxcblx0XHRyZWdpc3RlciA6IDEsXG5cdFx0bG9naW4gICAgOiAyLFxuXHRcdGFjY291bnQgIDogMywgXG5cdH07XG5cblx0JHNjb3BlLm5hdkNvbGxhcHNlZCA9IHRydWU7XG5cdCRzY29wZS5jb2xsYXBzZSA9IGZ1bmN0aW9uKCl7XG5cdFx0JHNjb3BlLm5hdkNvbGxhcHNlZCA9IHRydWU7XG5cdH07XG5cblx0LyogbW92ZSB0byBjdXJyZW50IGxvY2F0aW9uICovXG5cdCRzY29wZS5tb3ZlVG9DdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbigpe1xuXHRcdGZ1bmN0aW9uIGdldEN1cnJMb2NTdWNjZXNzKHBvcykge1xuICAgICAgICAgICAgLyogbWFrZSBzdXJlIHRvIGNoZWNrIHdlIGFyZSBvbiBwb3N0IHBhZ2Ugd2l0aCBtYXAgZmlyc3QgKi9cbiAgICAgICAgICAgIGlmICgkc2NvcGUuY3VycmVudFBhZ2VJZCAhPSAkc2NvcGUucGFnZUlkLnBvc3QpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgY3JkID0gcG9zLmNvb3JkcztcblxuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSA9IGNyZC5sYXRpdHVkZTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gY3JkLmxvbmdpdHVkZTtcblxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTGF0aXR1ZGUgOiAnICsgY3JkLmxhdGl0dWRlKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0xvbmdpdHVkZTogJyArIGNyZC5sb25naXR1ZGUpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTW9yZSBvciBsZXNzICcgKyBjcmQuYWNjdXJhY3kgKyAnIG1ldGVycy4nKTtcbiAgICAgICAgICAgIHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGNyZC5sYXRpdHVkZSwgY3JkLmxvbmdpdHVkZSk7XG5cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIoJHNjb3BlLm1hcCwgJ2hlYWRpbmdfY2hhbmdlZCcsIGdvb2dsZUxvYyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRzY29wZS5tYXAucGFuVG8oZ29vZ2xlTG9jKVxuICAgICAgICAgICAgJHNjb3BlLm1hcC5zZXRab29tKDE1KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJMb2NFcnJvcihlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRVJST1IoJyArIGVyci5jb2RlICsgJyk6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpbml0IG1hcCBhbmQgcGxhY2Ugc29tZSBtYXJrZXJzLCBzbyBldmVyeXRoaW5nIHN0YXJ0IHdpdGggdGhpcyBmdW5jdGlvbi4gKi9cbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihnZXRDdXJyTG9jU3VjY2VzcywgZ2V0Q3VyckxvY0Vycm9yKTtcblxuICAgICAgICBzd2FsKHsgICB0aXRsZTogXCJcIiwgICB0ZXh0OiBcIk1vdmluZyB0byBjdXJyZW50IGxvY2F0aW9uLi5cIiwgICB0aW1lcjogMTUwMCwgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UgfSk7XG5cdH07XG5cblx0JHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCl7XG5cdFx0JHNjb3BlLmNvbGxhcHNlKCk7XG5cblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1bmRlZmluZWQ7XG5cblx0XHRVc2VyU3ZjLmxvZ291dCgpO1xuXG5cdFx0c3dhbCgnJyxcIlN1Y2Nlc3NmdWxseSBsb2dnZWQgb3V0XCIpO1xuXHR9O1xuXG5cdC8qIHVzaW5nIHJvb3RTY29wZSBzbyB0aGF0IFVzZXJTdmMgY2FuIGVtaXQgYSBicm9hZGNhc3QgKi9cblx0JHJvb3RTY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcil7XG5cdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcblx0fSk7XG5cblx0JHNjb3BlLiRvbignbG9jJywgZnVuY3Rpb24oXywgbG9jYXRpb24pe1xuXHRcdGNvbnNvbGUubG9nKGxvY2F0aW9uKTtcblx0XHR2YXIgbGF0ID0gbG9jYXRpb24ubGF0KCk7XG5cdFx0dmFyIGxvbiA9IGxvY2F0aW9uLmxuZygpO1xuXHRcdCRzY29wZS5wb3N0TG9jYXRpb24gPSB7XG5cdFx0XHRsYXQ6IGxhdCxcblx0XHRcdGxvbjogbG9uXG5cdFx0fTtcblx0XHRjb25zb2xlLmxvZygkc2NvcGUucG9zdExvY2F0aW9uKTtcblx0fSk7XG5cblx0JHNjb3BlLiRvbigncGFnZWNoYW5nZScsIGZ1bmN0aW9uKF8sIHBhZ2VJZCl7XG5cdFx0JHNjb3BlLmN1cnJlbnRQYWdlSWQgPSBwYWdlSWQ7XG5cdH0pO1xuXG5cdCRzY29wZS4kb24oJ3BsYWNlJywgZnVuY3Rpb24oXywgcGxhY2Upe1xuXHRcdC8vIEZvcmNpbmcgdGhlIHVwZGF0ZSB3aXRoICRhcHBseSgpIG1ldGhvZCBvbiAkc2NvcGVcblx0XHQvLyBwcm9ibGVtIHJlbGF0ZWQgbm90ZTogaHR0cDovL3d3dy5qZWZmcnlob3VzZXIuY29tL2luZGV4LmNmbS8yMDE0LzYvMi9Ib3ctZG8tSS1ydW4tY29kZS13aGVuLWEtdmFyaWFibGUtY2hhbmdlcy13aXRoLUFuZ3VsYXJKU1xuXHRcdGlmKCEkc2NvcGUuJCRwaGFzZSkgeyAvLyBjaGVjayBpZiBhICRkaWdlc3QgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcyBieSBjaGVja2luZyAkc2NvcGUuJCRwaGFzZS5cblx0XHRcdCRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHQkc2NvcGUuc2V4UGxhY2VBdXRvY29tcGxldGVkID0gcGxhY2U7XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fVxuXG5cdH0pO1xuXG5cdCRzY29wZS4kb24oJ21hcEluaXQnLCBmdW5jdGlvbihfLCBtYXApe1xuXHRcdCRzY29wZS5tYXAgPSBtYXA7XG5cdH0pO1xuXG5cdFVzZXJTdmMucmVtYWluTG9naW4oKTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKXtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oJy8nLCBcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgXG5cdFx0XHR0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcG9zdHMuaHRtbCdcblx0XHR9KVxuXHQud2hlbignL3JlZ2lzdGVyJywgXG5cdFx0e1xuXHRcdFx0Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcmVnaXN0ZXIuaHRtbCdcblx0XHR9KVxuXHQud2hlbignL2xvZ2luJyxcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnTG9naW5DdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9sb2dpbi5odG1sJ1xuXHRcdH0pXG5cdC53aGVuKCcvYWNjb3VudCcsXG5cdFx0e1xuXHRcdFx0Y29udHJvbGxlcjogJ0FjY291bnRDdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9hY2NvdW50Lmh0bWwnXG5cdFx0fSlcblx0Ly8gUmVkaXJlY3QgdG8gdGhlIHJvb3QgcGFnZS5cblx0Lm90aGVyd2lzZShcblx0XHR7XG4gICBcdFx0XHRyZWRpcmVjdFRvOiAnLydcblx0XHR9KTtcbn0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmRpcmVjdGl2ZSgnYXBwTWFwJywgZnVuY3Rpb24oUG9zdHNTdmMsIFV0aWxTdmMsICR0aW1lb3V0LCAkY29tcGlsZSkge1xuICAgIC8vIGRpcmVjdGl2ZSBsaW5rIGZ1bmN0aW9uXG4gICAgdmFyIGxpbmsgPSBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIG1hcDtcblxuICAgICAgICB2YXIgQ0xPVURfTUFQX0lEID0gJ2N1c3RvbV9zdHlsZSc7IC8vIG1hcCBzdHlsZVxuICAgICAgICBcbiAgICAgICAgdmFyIGltYWdlUG9zdCA9IHtcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vY2F0Y2htZS5pZnlvdWNhbi5jb20vaW1hZ2VzL3BpY3R1cmVzL0lZQ19JY29ucy9JWUNfTG9jYXRpb25fSWNvbl9TbWFsbC5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTAwLCAxMDApLFxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBhbmNob3I6IG5ldyBnb29nbGUubWFwcy5Qb2ludCgxNywgMzQpLFxuICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMSwgMSlcbiAgICAgICAgfTtcblxuICAgICAgICAgdmFyIGltYWdlVGFyZ2V0ID0ge1xuICAgICAgICAgICAgdXJsOiAnaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvVS9QL2ovTS9JL2kveC1tYXJrLXllbGxvdy1tZC5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTAwLCAxMDApLFxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBhbmNob3I6IG5ldyBnb29nbGUubWFwcy5Qb2ludCgxNywgMzQpLFxuICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMjUsIDI1KVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG1hcCBjb25maWdcbiAgICAgICAgLy9jb25zb2xlLmxvZygnd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSAnLCB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlICk7XG5cbiAgICAgICAgdmFyIGluaXRpYWxNYXBDZW50ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKDM0LjA2MTQ4NDUzNDAzMzUzLCAtMTE4LjI3ODUwNjcyMjA0NTkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFpc05hTih3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlKSAmJiAhaXNOYU4od2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUpKVxuICAgICAgICB7XG4gICAgICAgICAgICBpbml0aWFsTWFwQ2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyh3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlLCB3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NvbnNvbGUubG9nKCd3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlICcsIHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgKTtcbiAgICAgICAgXG4gICAgICAgIC8vY29uc29sZS5sb2coaW5pdGlhbE1hcENlbnRlcik7XG5cbiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgY2VudGVyICAgICAgOiBpbml0aWFsTWFwQ2VudGVyLFxuICAgICAgICAgICAgICAgIHpvb20gICAgICAgIDogMTUsXG4gICAgICAgICAgICAgICAgTWFwVHlwZUlkICAgOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCxcbiAgICAgICAgICAgICAgICBzY3JvbGx3aGVlbCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHN0cmVldFZpZXdDb250cm9sOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2xPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgbWFwVHlwZUlkczogW2dvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLCBDTE9VRF9NQVBfSURdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFwVHlwZUlkOiBDTE9VRF9NQVBfSURcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBkcmF3IG1hcCB3aXRoIGhlbHBlciBtYXJrZXJzXG4gICAgICAgIHZhciBoZWxwZXJNYXJrZXJzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIGRyYXdIZWxwZXJNYXJrZXIobG9jYXRpb24pe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gaGVscGVyTWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlbHBlck1hcmtlcnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbG9jYXRpb24sIFxuICAgICAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgICAgIGljb246IGltYWdlVGFyZ2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGhlbHBlck1hcmtlcnMucHVzaChtYXJrZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlSGVscGVyTWFya2VyKCl7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSBoZWxwZXJNYXJrZXJzW2ldOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVscGVyTWFya2VycyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZHJhd0FuZFNldFBsYWNlKGxvY2F0aW9uKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBvbmx5IGVuYWJsZSB3aGVuIGxvZ2dlZCBpblxuICAgICAgICAgICAgaWYgKCFzY29wZS5jdXJyZW50VXNlcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChpbmZvV2luZG93KVxuICAgICAgICAgICAgICAgIGluZm9XaW5kb3cuY2xvc2UoKTtcblxuICAgICAgICAgICAgdmFyIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBsb2NhdGlvbiBpbmZvcihsb24sbGF0KVxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ2xvYycsIGxvY2F0aW9uKTtcblxuICAgICAgICAgICAgZHJhd0hlbHBlck1hcmtlcihsb2NhdGlvbik7XG5cbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBwbGFjZSBmb3JtYXR0ZWRfYWRkcmVzcyBhbmQgZHJhdyBpY29uXG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKCB7ICdsYXRMbmcnOiBsb2NhdGlvbiB9LCBmdW5jdGlvbihyZXN1bHRzLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAvLyBhcyB1c2VyIGNsaWNrcyBvbiB0aGUgbWFwLFxuICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgdG8gc2F2ZSB0aGUgZm9ybWF0dGVkIGFkZHJlc3MgaW4gJHNjb3BlIGFuZFxuICAgICAgICAgICAgICAgIC8vIGl0IHdpbGwgYmUgdXNlZCB0aHJvdWdoIHBvc3RzLmN0cmxcbiAgICAgICAgICAgICAgICAvLyBlbWl0IGJyb2FkY2FzZSAncGxhY2UnIGFuZCBzZW5kIHRoaXMgdG8gYXBwbGljYXRpb24uY3RybFxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBmb3JtYXR0ZWRfYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgncGxhY2UnLCByZXN1bHRzWzFdLmZvcm1hdHRlZF9hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICBzd2FsKFwiXCIsXCJMb2NhdGlvbiBkb2VzIG5vdCBleGlzdHNcIik7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdwbGFjZScsIFwiTG9jYXRpb24gZG9lcyBub3QgZXhpc3RzXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgIC8vIHBsYWNlIGEgbWFya2VyIGFuZCBpbmZvV2luZG93XG4gICAgICAgIHZhciBpbmZvV2luZG93O1xuICAgICAgICB2YXIgbWFya2VycyA9IFtdO1xuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdQb3N0TWFya2VycygpIHtcbiAgICAgICAgICAgIHZhciBwb3N0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIFBvc3RzU3ZjLmZldGNoQWxsKClcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBwb3N0cyA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3N0ID0gcG9zdHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlcnNbaV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlcnNbaV0ucG9zdC5faWQgPT0gcG9zdC5faWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKCFwb3N0Lmhhc093blByb3BlcnR5KCdzZXhMb2NhdGlvbicpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBhbmd1bGFyLmZyb21Kc29uKHBvc3Quc2V4TG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQsIGxvY2F0aW9uLmxvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlck9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZ29vZ2xlTG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJTZXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWNvbjogaW1hZ2VQb3N0XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIobWFya2VyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBtYXJrZXIgdG8gYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcjogbWFya2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3QgIDogcG9zdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHNjb3BlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBwYXJlbnQuJG5ldyh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgb3BlbldpbmRvdyA9IChmdW5jdGlvbihtYXJrZXIsIHBvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSB3aW5kb3cgaWYgbm90IHVuZGVmaW5lZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9XaW5kb3cgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuY29udGVudCA9IHBvc3Quc2V4VGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmFnZSA9IHBvc3QudXNlckFnZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXY+IDxzdHJvbmcgY2xhc3M9XCJwb3N0LWNvbnRlbnRcIj5cIicgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5jb250ZW50ICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPC9zdHJvbmc+ICAgPHNwYW4gY2xhc3M9XCJwb3N0LWNvbnRlbnQtYWdlXCI+QWdlIC0gICcgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5hZ2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NwYW4+PC9kaXY+JztcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBpbGVkID0gJGNvbXBpbGUoaHRtbCkoY2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb1dpbmRvd09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbXBpbGVkWzBdLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGl4ZWxPZmZzZXQ6IG5ldyBnb29nbGUubWFwcy5TaXplKDAsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQXV0b1BhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyhpbmZvV2luZG93T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkobWFya2VyLCBwb3N0KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG9wZW5XaW5kb3coKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdXNlIG92ZXIgdG8gdmlldyB0aGUgcG9zdCBpbmZvcm1hdGlvbiAtIGNsb3N1cmVcbiAgICAgICAgICAgICAgICAgICAgLy9nb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbW91c2Ugb3V0IHRvIGNsb3NlIHRoZSBwb3N0IGluZm8gd2luZG93XG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9XaW5kb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTsqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlUG9zdE1hcmtlcigpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gbWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcmtlcnMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFNlYXJjaEJveCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgc2VhcmNoIGJveCBhbmQgbGluayBpdCB0byB0aGUgVUkgZWxlbWVudC5cbiAgICAgICAgICAgIHZhciBpbnB1dCA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFjLWlucHV0JykpOyAvLyBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gIFxuICAgICAgICAgICAgdmFyIGN1cnJMb2NCdG4gPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1jdXJyJykpOyAgICAgIFxuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaChpbnB1dCk7XG4gICAgICAgICAgICBtYXAuY29udHJvbHNbZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLlRPUF9SSUdIVF0ucHVzaChjdXJyTG9jQnRuKTtcblxuICAgICAgICAgICAgdmFyIHNlYXJjaEJveCA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuU2VhcmNoQm94KChpbnB1dCkpOyAvLyBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gXG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgdGhlIGV2ZW50IGZpcmVkIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhbiBpdGVtIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBwaWNrIGxpc3QuIFJldHJpZXZlIHRoZSBtYXRjaGluZyBwbGFjZXMgZm9yIHRoYXQgaXRlbS5cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKHNlYXJjaEJveCwgJ3BsYWNlc19jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlcyA9IHNlYXJjaEJveC5nZXRQbGFjZXMoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwbGFjZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0YWtlIG9ubHkgMSBzcG90XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlID0gcGxhY2VzWzBdO1xuXG4gICAgICAgICAgICAgICAgLy8gd2hlbiBzZWFyY2ggaGFwcGVucywgbG9jYXRpb24gd2lsbCBiZSB1cGRhdGVkIGFzIHdlbGwgZm9yIHBvc3RcbiAgICAgICAgICAgICAgICAvLyBzY29wZS4kZW1pdCgncGxhY2UnLCBwbGFjZS5mb3JtYXR0ZWRfYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uKTtcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgPSBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sYXRpdHVkZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSA9IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxvbmdpdHVkZTtcblxuICAgICAgICAgICAgICAgIG1hcC5wYW5UbyhwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgLy9tYXAuc2V0Wm9vbSgxNik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldENsaWNrTWFwKClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gY2xpY2sgZXZlbnQgb24gbWFwXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKGV2ZW50LmxhdExuZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldE1vdmVUb0N1cnJlbnRMb2NhdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGNsaWNrIGV2ZW50IG9uIG1hcFxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnaGVhZGluZ19jaGFuZ2VkJywgZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICBkcmF3QW5kU2V0UGxhY2UobG9jYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRDZW50ZXJDaGFuZ2VkKClcbiAgICAgICAge1xuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnY2VudGVyX2NoYW5nZWQnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgPSBtYXAuZ2V0Q2VudGVyKCkubGF0KCk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBtYXAuZ2V0Q2VudGVyKCkubG5nKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBzZXRMb2FkUG9zdE1hcmtlcnMoKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBtYW51YWxseSByZWxvYWQgbWFya2Vyc1xuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnbWFwdHlwZWlkX2NoYW5nZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvL3JlbW92ZUhlbHBlck1hcmtlcigpO1xuICAgICAgICAgICAgICAgIC8vcmVtb3ZlUG9zdE1hcmtlcigpO1xuXG4gICAgICAgICAgICAgICAgZHJhd1Bvc3RNYXJrZXJzKCk7IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTdHlsZUZvck1hcCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlT3B0cyA9IFt7XCJmZWF0dXJlVHlwZVwiOlwiYWRtaW5pc3RyYXRpdmVcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwiYWRtaW5pc3RyYXRpdmVcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHMudGV4dC5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjNDM5YWE1XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjMzI0ODVjXCJ9LHtcInZpc2liaWxpdHlcIjpcInNpbXBsaWZpZWRcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwiYWRtaW5pc3RyYXRpdmUubmVpZ2hib3Job29kXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImxhbmRzY2FwZS5uYXR1cmFsXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZTlkZGRiXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImxhbmRzY2FwZS5uYXR1cmFsLnRlcnJhaW5cIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJwb2kucGFya1wiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJwb2kucGFya1wiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNjNGU2NjFcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pLnBhcmtcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHNcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuaGlnaHdheVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNlOWRkZGJcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5oaWdod2F5XCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuc3Ryb2tlXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjMzI0ODVjXCJ9LHtcIndlaWdodFwiOlwiMC43XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNlOWRkZGJcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LnN0cm9rZVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiIzMyNDg1Y1wifSx7XCJ3ZWlnaHRcIjpcIjAuMjVcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVscy5pY29uXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmxvY2FsXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmxvY2FsXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2U5ZGRkYlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmxvY2FsXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuc3Ryb2tlXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZWY3OThlXCJ9LHtcIndlaWdodFwiOlwiMC41XCJ9LHtcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ0cmFuc2l0XCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInRyYW5zaXQubGluZVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZWY3OThlXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInRyYW5zaXQubGluZVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wid2VpZ2h0XCI6XCIyLjA2XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInRyYW5zaXQubGluZVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LnN0cm9rZVwiLFwic3R5bGVyc1wiOlt7XCJ3ZWlnaHRcIjpcIjEwLjAwXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInRyYW5zaXQubGluZVwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVscy50ZXh0LnN0cm9rZVwiLFwic3R5bGVyc1wiOlt7XCJ3ZWlnaHRcIjpcIjAuMDFcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwid2F0ZXJcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9uXCJ9LHtcIndlaWdodFwiOlwiMTAuMDBcIn0se1wiY29sb3JcIjpcIiM0MzlhYTVcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwid2F0ZXJcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHNcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib25cIn0se1wiY29sb3JcIjpcIiMzMjQ4NWNcIn0se1wid2VpZ2h0XCI6XCIwLjg1XCJ9XX1dO1xuXG4gICAgICAgICAgICB2YXIgc3R5bGVkTWFwT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ3VzdG9tIFN0eWxlJ1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgY3VzdG9tTWFwVHlwZSA9IG5ldyBnb29nbGUubWFwcy5TdHlsZWRNYXBUeXBlKGZlYXR1cmVPcHRzLCBzdHlsZWRNYXBPcHRpb25zKTtcbiAgICAgICAgICAgIG1hcC5tYXBUeXBlcy5zZXQoQ0xPVURfTUFQX0lELCBjdXN0b21NYXBUeXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXQgdGhlIG1hcFxuICAgICAgICBmdW5jdGlvbiBpbml0TWFwKCkge1xuICAgICAgICAgICAgaWYgKG1hcCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChlbGVtZW50WzBdLCBtYXBPcHRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0U3R5bGVGb3JNYXAoKTtcblxuICAgICAgICAgICAgc2V0TG9hZFBvc3RNYXJrZXJzKCk7XG5cbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdCB0byBzZW5kIG1hcCB0byBhcHBsaWNhdGlvbiBjdHJsXG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnbWFwSW5pdCcsIG1hcCk7XG5cbiAgICAgICAgICAgIHNldENsaWNrTWFwKCk7XG5cbiAgICAgICAgICAgIHNldFNlYXJjaEJveCgpO1xuXG4gICAgICAgICAgICBzZXRDZW50ZXJDaGFuZ2VkKCk7XG5cbiAgICAgICAgICAgIHNldE1vdmVUb0N1cnJlbnRMb2NhdGlvbigpO1xuXG4gICAgICAgICAgICBkcmF3UG9zdE1hcmtlcnMoKTtcbiAgICAgICAgfSBcblxuICAgICAgICBpbml0TWFwKCk7XG5cbiAgICAgICAgLypcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3VyckxvY1N1Y2Nlc3MocG9zKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgdG8gY2hlY2sgd2UgYXJlIG9uIHBvc3QgcGFnZSB3aXRoIG1hcCBmaXJzdFxuICAgICAgICAgICAgaWYgKHNjb3BlLmN1cnJlbnRQYWdlSWQgIT0gc2NvcGUucGFnZUlkLnBvc3QpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICBzd2FsKHsgICBcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJXZSBmb3VuZCB5b3UhXCIsICAgXG4gICAgICAgICAgICAgICAgdGV4dDogXCJEbyB5b3Ugd2FudCB0byBtb3ZlIHRvIHlvdXIgbG9jYXRpb24/IVwiLCAgIFxuICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsICAgXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnIzAwQjJFRScsICAgXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBtb3ZlIG1lIVwiLCAgIFxuICAgICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZSAsXG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIGZ1bmN0aW9uKCl7ICBcbiAgICAgICAgICAgICAgICBzd2FsKHt0aXRsZTogXCJcIiwgdGV4dDogXCJZb3UgaGF2ZSBiZWVuIG1vdmVkIVwiLCB0aW1lcjogODAwLCBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2V9KTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHVzZXIgd2FudHMgdG8gbW92ZSwgbGV0IGl0IGhhcHBlbiFcbiAgICAgICAgICAgICAgICB2YXIgY3JkID0gcG9zLmNvb3JkcztcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgPSBjcmQubGF0aXR1ZGU7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBjcmQubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTGF0aXR1ZGUgOiAnICsgY3JkLmxhdGl0dWRlKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdMb25naXR1ZGU6ICcgKyBjcmQubG9uZ2l0dWRlKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdNb3JlIG9yIGxlc3MgJyArIGNyZC5hY2N1cmFjeSArICcgbWV0ZXJzLicpO1xuICAgICAgICAgICAgICAgIHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGNyZC5sYXRpdHVkZSwgY3JkLmxvbmdpdHVkZSk7XG5cbiAgICAgICAgICAgICAgICBkcmF3QW5kU2V0UGxhY2UoZ29vZ2xlTG9jKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtYXAucGFuVG8oZ29vZ2xlTG9jKVxuICAgICAgICAgICAgICAgIG1hcC5zZXRab29tKDE1KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q3VyckxvY0Vycm9yKGVycikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdFUlJPUignICsgZXJyLmNvZGUgKyAnKTogJyArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXQgbWFwIGFuZCBwbGFjZSBzb21lIG1hcmtlcnMsIHNvIGV2ZXJ5dGhpbmcgc3RhcnQgd2l0aCB0aGlzIGZ1bmN0aW9uLlxuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGdldEN1cnJMb2NTdWNjZXNzLCBnZXRDdXJyTG9jRXJyb3IpO1xuXG4gICAgICAgIC8vIHN3YWwoeyAgIHRpdGxlOiBcIlwiLCAgIHRleHQ6IFwiR2V0dGluZyBjdXJyZW50IGxvY2F0aW9uLi5cIiwgICB0aW1lcjogMjAwMCwgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UgfSk7XG4gICAgICAgICovXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgaWQ9XCJtYXAtY2FudmFzXCI+PC9kaXY+JyxcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgbGluazogbGlua1xuICAgIH07XG59KTtcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVdGlsU3ZjJywgZnVuY3Rpb24oKXtcblx0dmFyIHN2YyA9IHRoaXM7XG5cblx0c3ZjLmRlZzJyYWQgPSBmdW5jdGlvbihkZWcpIHtcblx0ICByZXR1cm4gZGVnICogKE1hdGguUEkvMTgwKTtcblx0fTtcblxuXHRzdmMuZ2V0RGlzdGFuY2VGcm9tTGF0TG9uSW5LbSA9IGZ1bmN0aW9uIChsYXQxLGxvbjEsbGF0Mixsb24yKSB7XG5cdCAgdmFyIFIgPSA2MzcxO1xuXHQgIHZhciBkTGF0ID0gc3ZjLmRlZzJyYWQobGF0Mi1sYXQxKTtcblx0ICB2YXIgZExvbiA9IHN2Yy5kZWcycmFkKGxvbjItbG9uMSk7IFxuXHQgIHZhciBhID0gXG5cdCAgICBNYXRoLnNpbihkTGF0LzIpICogTWF0aC5zaW4oZExhdC8yKSArXG5cdCAgICBNYXRoLmNvcyhzdmMuZGVnMnJhZChsYXQxKSkgKiBNYXRoLmNvcyhzdmMuZGVnMnJhZChsYXQyKSkgKiBcblx0ICAgIE1hdGguc2luKGRMb24vMikgKiBNYXRoLnNpbihkTG9uLzIpXG5cdCAgICA7IFxuXHQgIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMS1hKSk7IFxuXHQgIHZhciBkID0gUiAqIGM7XG5cdCAgcmV0dXJuIGQ7XG5cdH07XG59KTtcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FjY291bnRDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJTdmMpe1xuXHQvKiBlbWl0IGJyb2FkY2FzdCBmb3IgY3VycmVudCBwYWdlSWQgKi9cblx0JHNjb3BlLiRlbWl0KCdwYWdlY2hhbmdlJywgJHNjb3BlLnBhZ2VJZC5hY2NvdW50KTtcblxuXHQkc2NvcGUuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbihuZXdQYXNzd29yZCwgcGFzc3dvcmQpe1xuXHRcdFVzZXJTdmMuY2hhbmdlUGFzc3dvcmQobmV3UGFzc3dvcmQsIHBhc3N3b3JkKVxuXHRcdC50aGVuKFxuXHRcdFx0ZnVuY3Rpb24oKXtcblx0XHRcdFx0c3dhbCgnJywgXCJQYXNzd29yZCBoYXZlIGJlZW4gY2hhbmdlZFwiLCBcInN1Y2Nlc3NcIik7XG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHR9LFxuXHRcdFx0ZnVuY3Rpb24oZXJyKXtcblx0XHRcdFx0aWYgKGVyci5zdGF0dXMgPT0gNDAxKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c3dhbCgnJywgXCJPcmlnaW5hbCBwYXNzd29yZCBpcyB3cm9uZy5cIiwgXCJlcnJvclwiKTtcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN3YWwoJycsIFwiQ2FuIG5vdCBjaGFuZ2UgcGFzc3dvcmQuXCIsXCJlcnJvclwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCk7XG5cdH07XG59KTtcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKXtcblx0JHNjb3BlLiRlbWl0KCdwYWdlY2hhbmdlJywgJHNjb3BlLnBhZ2VJZC5sb2dpbik7XG5cblx0Ly8gVXNlclN2Y+yEnOu5hOyKpOydmCBsb2dpbu2VqOyImOyXkOyEnCDrsJvsnYAg7Jyg7KCA7KCV67O066W8XG5cdC8vIOy1nOyDgeychCDsvZjtirjroaTrn6zsnbggQXBwbGljYXRpb25DdHJs7J2YICRzY29wZeuhnCDqsJLsnYQg67O064K06riwIOychO2VnCDsoITtjIzrpbwg67O064K464ukLlxuXHQkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuXHRcdFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh1c2VyKXtcblx0XHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdFx0XHQkcm9vdFNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpO1xuXHRcdH0sXG5cdFx0ZnVuY3Rpb24gKGVycm9yKXtcblx0XHRcdHN3YWwoXCJMb2ctaW4gZmFpbGVkIVwiLCBcIlBhc3N3b3JkL0lEIHdyb25nXCIsIFwiZXJyb3JcIik7XG5cdFx0fSk7XG5cdFx0Lyogb3IgaXQgY2FuIGJlIHRoaXNcblx0XHQuY2F0Y2goZnVuY3Rpb24gKCl7XG5cdFx0XHRhbGVydChcIklEIG9yIFBhc3N3b3JkIGlzIHdyb25nLlwiKTtcblx0XHR9KTtcblx0XHQqL1xuXHR9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBVc2VyU3ZjKXtcblx0JHNjb3BlLiRlbWl0KCdwYWdlY2hhbmdlJywgJHNjb3BlLnBhZ2VJZC5yZWdpc3Rlcik7XG5cblx0Ly8gVXNlclN2Y+yEnOu5hOyKpOydmCByZWdpc3Rlcu2VqOyImOyXkOyEnCDrsJvsnYAg7Jyg7KCA7KCV67O066W8IC0gYXBp7JeQ7IScIOuztOuCtOyhjOq4sCDrlYzrrLjsl5AgLmRhdGHroZwg7KCR6re8XG5cdC8vIOy1nOyDgeychCDsvZjtirjroaTrn6zsnbggQXBwbGljYXRpb25DdHJs7J2YICRzY29wZeuhnCDqsJLsnYQg67O064K06riwIOychO2VnCDsoITtjIzrpbwg67O064K464ukLlxuXHQkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQsIHVzZXJkb2IsIHNleHBvcyl7XG5cdFx0VXNlclN2Yy5yZWdpc3Rlcih1c2VybmFtZSwgcGFzc3dvcmQsIHVzZXJkb2IsIHNleHBvcylcblx0XHQudGhlbihmdW5jdGlvbiAodXNlcil7XG5cdFx0XHRzd2FsKFwiT0shXCIsIFwiU3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWRcIiwgXCJzdWNjZXNzXCIpXG5cdFx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpO1xuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0c3dhbChcIlJlZ2lzdGVyIGZhaWxlZCFcIiwgXCJVc2VybmFtZSBhbHJlYWR5IGV4aXN0c1wiLCBcImVycm9yXCIpO1xuXHRcdH0pO1xuXHR9O1x0XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwLCAkcm9vdFNjb3BlKXtcblx0dmFyIHN2YyA9IHRoaXM7XG5cblx0Ly8gc3ZjLnRva2VuICh0aGlzLnRva2VuKSDqsJLsnLzroZwgL2FwaS91c2VyIOulvCDtmLjstpxcblx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnLCBcblx0XHR7XG5cdFx0XHRoZWFkZXJzOiB7J1gtQXV0aCc6ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSB9XG5cdFx0XHQvL2hlYWRlcnM6IHsnWC1BdXRoJzogJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddfVxuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0cmV0dXJuIHJlc3BvbnNlLmRhdGE7ICAvLyAtIGFwaeyXkOyEnCDrs7TrgrTsoYzquLAg65WM66y47JeQIC5kYXRh66GcIOygkeq3vFxuXHRcdH0sXG5cdFx0ZnVuY3Rpb24oZXJyKXtcblx0XHRcdGN1cnJlbnRVc2VyID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8vIGRlc2lnbmVkIHRvIGJlIGNhbGxlZCB3aGVuIGFwcGxpY2F0aW9uIGxhdW5jaGVkXG5cdC8vIGZvciB0aGUgcGVyc29ucyB3aG8gcmVmcmVzaGVkIHRoZSBwYWdlIGJ1dCBkaWQgbm90IGxvZ291dCAtLT4gaXQgd2lsbCBiZSBzdGlsbCBsb2dnZWQgaW4hXG5cdHN2Yy5yZW1haW5Mb2dpbiA9IGZ1bmN0aW9uKCl7XG5cdFx0Y29uc29sZS5sb2coXCJUb2tlbjpcIiwgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpO1xuXHRcdGNvbnNvbGUubG9nKFwiQXBwbGljYXRpb24gaGFzIGJlZW4gbGF1bmNoZWRcIilcblx0XHRpZiAod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpICE9ICd1bmRlZmluZWQnICYmIFxuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpICE9ICdudWxsJyAmJlxuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpIClcblx0XHR7XG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG5cblx0XHRcdGNvbnNvbGUubG9nKFwiUmVtYWluIExvZ2luIGluIHByb2Nlc3MuLlwiKVxuXHRcdFx0dmFyIHVzZXI7XG5cdFx0XHRzdmMuZ2V0VXNlcigpXG5cdFx0XHQudGhlbihmdW5jdGlvbih1c2VyKXtcblx0XHRcdFx0JHJvb3RTY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKTtcblx0XHRcdH0sXG5cdFx0XHRmdW5jdGlvbihlcnIpe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnIpO1xuXHRcdFx0XHRjdXJyZW50VXNlciA9IHVuZGVmaW5lZDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHRzdmMuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbihuZXdQYXNzd29yZCwgcGFzc3dvcmQpe1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnLCBcblx0XHR7XG5cdFx0XHRoZWFkZXJzOiB7J1gtQXV0aCc6ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSB9XG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbih1c2VyKXtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzL3Bhc3N3b3JkX2NoYW5nZScsIFxuXHRcdFx0e1xuXHRcdFx0XHRwYXNzd29yZCAgICA6IHBhc3N3b3JkLFxuXHRcdFx0XHRuZXdQYXNzd29yZCA6IG5ld1Bhc3N3b3JkLFxuXHRcdFx0XHR1c2VybmFtZSAgICA6IHVzZXIuZGF0YS51c2VyTmFtZVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gc2Vzc2lvbiDsnYQg7J207Jqp7ZW07IScLCDtjKjsiqTsm4zrk5zqsIAg7J287LmY7ZWY64qU7KeAIOqygOyCrO2VmOqzoCxcblx0Ly8g7J287LmY7ZWY66m0IOuwm+ydgCBqd3QgZW5jb2RlZOuQnCB1c2VybmFtZSwg7KaJIO2GoO2BsOydhCDqsIDsp4Dqs6AsXG5cdC8vIHZhbOydtOudvOuKlCDrs4DsiJjsl5Ag64Sj6rOgLCDsnbTqsoPsnZgg642w7J207YSw66W8IHN2Yy50b2tlbuyXkOuPhCDsoIDsnqXtlZjqs6AsXG5cdC8vIHN2Yy5nZXRVc2Vy7ZWo7IiY66W8IO2YuOy2nO2VnOuLpC5cblx0c3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIFxuXHRcdHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSwgXG5cdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YTsgLy8gYXBp7JeQ7IScIOuztOuDiOq4sOuVjOusuOyXkCwgLmRhdGHroZwg7KCR6re8IC0gVE9ET1xuXHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gcmVzcG9uc2UuZGF0YTsgLy8g66qo65OgIOyalOyyreyXkCDrjIDtlbQg7ZW064u5IO2XpOuNlOulvCDsoITsl63snLzroZwg67aZ7J6ELlxuXHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0fSlcblx0fTtcblxuXHRzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQsIHVzZXJkb2IsIHNleHBvcyl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCBcblx0XHR7XG5cdFx0XHR1c2VyTmFtZTogdXNlcm5hbWUsXG5cdFx0XHRwYXNzd29yZDogcGFzc3dvcmQsXG5cdFx0XHR1c2VyZG9iIDogdXNlcmRvYixcblx0XHRcdHNleFBvcyAgOiBzZXhwb3Ncblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpe1xuXHRcdFx0cmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdHN2Yy5sb2dvdXQgPSBmdW5jdGlvbigpe1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gdW5kZWZpbmVkO1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUgPSB1bmRlZmluZWQ7XG5cdFx0d2luZG93LmxvY2FsU3RvcmFnZS50b2tlbiA9IHVuZGVmaW5lZDtcblx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB1bmRlZmluZWQ7IC8vIOuqqOuToCDsmpTssq3sl5Ag64yA7ZW0IO2VtOuLuSDtl6TrjZTrpbwg7KCE7Jet7Jy866GcIOu2meyehC5cblx0fVxufSk7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcci5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2YywgJHdpbmRvdywgJGRvY3VtZW50KXtcclxyXHQvKiBlbWl0IGJyb2FkY2FzdCBmb3IgY3VycmVudCBwYWdlSWQgKi9cclx0JHNjb3BlLiRlbWl0KCdwYWdlY2hhbmdlJywgJHNjb3BlLnBhZ2VJZC5wb3N0KTtcclxyXHQkc2NvcGUucG9zdHMgPSBbXTtcclxyXHR2YXIgX3BhZ2UgPSAwO1xyXHR2YXIgX3BlclBhZ2UgPSAxMDtcclxyXHQvKiBtb3ZlIHRvIHBvc3QncyBsb2NhdGlvbiAqL1xyXHQkc2NvcGUubW92ZVRvTG9jID0gZnVuY3Rpb24oaWQpe1xyXHRcdHZhciBwb3N0ID0gKCRzY29wZS5wb3N0c1tpZF0pO1xyXHJcdFx0dmFyIGxvY2F0aW9uID0gYW5ndWxhci5mcm9tSnNvbihwb3N0LnNleExvY2F0aW9uKTtcclx0XHR2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQsIGxvY2F0aW9uLmxvbik7XHJcclx0XHQkc2NvcGUubWFwLnBhblRvKGdvb2dsZUxvYyk7XHJcdFx0JHNjb3BlLm1hcC5zZXRab29tKDE2KTtcclxyXHRcdC8qIHVzaW5nIGFuZ3VsYXItc2Nyb2xsIHRvIG1vdmUgdG8gdGhlIHRvcCBzbW9vdGhseSAqL1xyXHRcdHZhciB0b3AgPSAwO1xyICAgIFx0dmFyIGR1cmF0aW9uID0gNDgwO1xyICAgIFx0JGRvY3VtZW50LnNjcm9sbFRvcCh0b3AsIGR1cmF0aW9uKS50aGVuKGZ1bmN0aW9uKCkge1xyICAgICBcdFx0Y29uc29sZSAmJiBjb25zb2xlLmxvZygnWW91IGp1c3Qgc2Nyb2xsZWQgdG8gdGhlIHRvcCEnKTtcciAgICBcdH0pO1xyXHJcdFx0Lyokd2luZG93LnNjcm9sbCgwLCAwKTsqL1xyXHR9O1xyXHJcdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XHJcdFx0LyogZ2V0IGF1dG9jb21wbGV0ZWQgcGxhY2UgYW5kIHJlc2V0KHNldCB0byB1bmRlZmluZWQpICovXHJcdFx0dmFyIHBsYWNlID0gJHNjb3BlLnNleFBsYWNlQXV0b2NvbXBsZXRlZDtcclx0XHR2YXIgbG9jYXRpb24gPSAkc2NvcGUucG9zdExvY2F0aW9uO1xyXHJcdFx0Y29uc29sZS5sb2coXCJsb2NhdGlvbjpcIiArIGxvY2F0aW9uLmxhdCArICcsJyArIGxvY2F0aW9uLmxvbiArICdcXG4gcGxhY2U6JyArIHBsYWNlKTtcclx0XHR2YXIgbG9jYXRpb25KU09OID0gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24pO1xyXHJcdFx0Y29uc29sZS5sb2coJHNjb3BlLnNleFRpbWUpO1xyXHJcdFx0UG9zdHNTdmMuY3JlYXRlKFxyXHRcdHtcclx0XHRcdHVzZXJOYW1lOiB1bmRlZmluZWQsXHJcdFx0XHR1c2VyQWdlOiAgdW5kZWZpbmVkLFxyXHRcdFx0c2V4UGxhY2U6IHBsYWNlLFxyXHRcdFx0c2V4VGltZTogICRzY29wZS5zZXhUaW1lLFxyXHRcdFx0c2V4VGFyZ2V0OiAkc2NvcGUuc2V4VGFyZ2V0LFxyXHRcdFx0c2V4TG9jYXRpb246IGxvY2F0aW9uSlNPTlxyXHRcdH0pXHJcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdCl7XHJcdFx0XHQvKlxyXHRcdFx0dmFyIG1zZyA9IFwiWW91IHdhbnRlZCB0byBoYXZlIHNleCB3aXRoIFwiICsgXHJcdFx0XHRwb3N0LnNleFRhcmdldDtcclx0XHRcdHN3YWwoXCJHcmVhdCFcIiwgbXNnLCBcInN1Y2Nlc3NcIik7XHJcclx0XHRcdC8qIG1hbnVhbGx5IHJlbG9hZCBtYXJrZXJzIFxyXHRcdFx0dXNpbmcgbWFwdHlwZWlkIHNpbmNlIGl0cyBtb3N0IGxlYXN0IHVzZWQgZXZlbnQsIC0ga2luZCBvZiBoYWNreSB3YXkgdG8gZG8gaXRcclx0XHRcdCovXHJcdFx0XHRnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKCRzY29wZS5tYXAsICdtYXB0eXBlaWRfY2hhbmdlZCcpO1xyXHJcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcclxyXHRcdFx0LyogcmVzZXQgaW5wdXQgZm9ybXMgKi9cclx0XHRcdCRzY29wZS5zZXhUaW1lICA9IG51bGw7XHJcdFx0XHQkc2NvcGUuc2V4VGFyZ2V0ID0gbnVsbDtcclx0XHR9KVxyXHRcdC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpe1xyXHRcdFx0aWYgKHN0YXR1cyA9PSA0MDEpXHJcdFx0XHR7XHJcdFx0XHRcdHN3YWwoXCJMb2ctaW4gZmFpbGVkXCIsIFwiUGxlYXNlIGxvZyBpblwiLCBcImVycm9yXCIpO1xyXHRcdFx0fVxyXHRcdFx0ZWxzZVxyXHRcdFx0e1xyXHRcdFx0XHRzd2FsKFwiUG9zdCBmYWlsZWRcIiwgXCJQbGVhc2UgY29tcGxldGUgdGhlIGZyb20gY29ycmVjdGx5XCIsIFwiZXJyb3JcIik7XHJcdFx0XHR9XHJcdFx0fSk7XHJcdH07XHJcclx0JHNjb3BlLnJlcXVlc3RGZXRjaCA9IGZ1bmN0aW9uKCkge1xyXHRcdFBvc3RzU3ZjLmZldGNoKF9wYWdlLCBfcGVyUGFnZSlcclx0XHQuc3VjY2VzcyhmdW5jdGlvbihwb3N0cyl7XHJcdFx0XHRfcGFnZSsrO1xyXHRcdFx0Y29uc29sZS5sb2coJ1Bvc3RzIGhhdmUgYmVlbiBsb2FkZWQgc3VjY2Vzc2Z1bGx5IGZvciBmcm9udCBwYWdlJyk7XHJcdFx0XHQkc2NvcGUucG9zdHMgPSAkc2NvcGUucG9zdHMuY29uY2F0KHBvc3RzKTtcclx0XHR9KTtcclx0fTtcclxyXHQkc2NvcGUucmVxdWVzdEZldGNoKCk7XHJ9KTtcclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG5cdHRoaXMuZmV0Y2hBbGwgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdH07XG5cblx0dGhpcy5mZXRjaCA9IGZ1bmN0aW9uKHBhZ2UsIHBlcnBhZ2Upe1xuXHRcdHZhciB1cmwgPSAnL2FwaS9wb3N0cy8nICsgcGFnZSArICc/cGVycGFnZT0nICsgcGVycGFnZTtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVybCk7XG5cdH07XG5cblx0dGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xuXHR9O1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9