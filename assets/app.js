angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,t,n){}]),angular.module("app").controller("DataVizCtrl",["$rootScope","$scope","$window",function(e,t,n){function r(){$(".data-visibility").addClass("active")}r()}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,t,n){function r(){$(".data-visibility").removeClass("active")}r();var a=$(".slide"),o=$(".slide-group"),l=$(".bullet"),i=a.length-1,s=0,c=!1;l.first().addClass("current");var u=function(){var e=$(".slide-node").clone();$(".slide-node").html("Loading! If you see this message for a while, please refresh the page"),$(".slide-node").replaceWith(e);var t=$(".slide-lines").clone();$(".slide-lines").html("Loading! If you see this message for a while, please refresh the page"),$(".slide-lines").replaceWith(t)},d=function(){window.clearInterval(f),c=!1;var e=l.index($(this));p(e),u()},p=function(e){c?s===i?s=0:s++:s=e,l.removeClass("current"),l.eq(s).addClass("current"),m(s)},m=function(e){o.animate({top:"-"+e+"00%"}),u()};l.on("click",d);var f=window.setInterval(p,8e4)}]),angular.module("app").controller("NumberCtrl",["$rootScope","$scope","$window",function(e,t,n){function r(e){function t(e,t,n,r,a){function o(t){e.html(s(t,p))}function l(e,t){var n=".",r=e+"";if(r.length<t)for(var a=t-r.length,o=0;a>o;o++)r="0"+r;var l=(l=r.length)>2?l%2:0;return(l?r.substr(0,l)+n:"")+r.substr(l).replace(/(\d{2})(?=\d)/g,"$1"+n)}function i(){n++;var e=n/c;e>=1?o(parseInt(t)):(o(parseInt(e*t)),setTimeout(i,d))}function s(e,t){for(var n=l(e,t),r=n.split(""),a=[],o=0;o<r.length;o++)a+="."==r[o]?"<span>.</span>":"<em>"+r[o]+"</em>";return a}var c=100,u=r,n=0,d=u/c,p=(t+"").length;e.html(s(0,p)),setTimeout(i,a)}var n=0,r=parseInt(e.attr("data-num")),a=parseInt(e.attr("time-duration")),o=parseInt(e.attr("time-delay"));t(e,r,n,a,o)}$("[data-num]").each(function(){r($(this))})}]),angular.module("app").config(["$routeProvider",function(e){e.when("/dataviz",{templateUrl:"/templates/dataviz.html",controller:"DataVizCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]);
//# sourceMappingURL=data:application/json;base64,