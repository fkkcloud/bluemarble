angular.module("app",["ngRoute","duScroll","infinite-scroll"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window","UserSvc",function(e,o,t,n){o.pageId={post:0,register:1,login:2,account:3},o.navCollapsed=!0,o.collapse=function(){o.navCollapsed=!0},o.moveToCurrentLocation=function(){function e(e){if(o.currentPageId==o.pageId.post){var t=e.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var n=new google.maps.LatLng(t.latitude,t.longitude);google.maps.event.trigger(o.map,"heading_changed",n),o.map.panTo(n),o.map.setZoom(15)}}function t(e){console.warn("ERROR("+e.code+"): "+e.message)}navigator.geolocation.getCurrentPosition(e,t),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},o.logout=function(){o.collapse(),o.currentUser=void 0,n.logout(),swal("","Successfully logged out")},e.$on("login",function(e,t){o.currentUser=t}),o.$on("loc",function(e,t){console.log(t);var n=t.lat(),a=t.lng();o.postLocation={lat:n,lon:a},console.log(o.postLocation)}),o.$on("pagechange",function(e,t){o.currentPageId=t}),o.$on("place",function(e,t){o.$$phase||o.$apply(function(){o.sexPlaceAutocompleted=t})}),o.$on("mapInit",function(e,t){o.map=t}),n.remainLogin()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/account",{controller:"AccountCtrl",templateUrl:"/templates/account.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc",function(e,o){var t=function(o,t,n){function a(e){for(var o,t=0;o=P[t];t++)o.setMap(null);P=[];var o=new google.maps.Marker({position:e,map:f,icon:h});P.push(o)}function l(){for(var e,o=0;e=P[o];o++)e.setMap(null);P=[]}function r(e){if(o.currentUser){S&&S.close();var t=new google.maps.Geocoder;o.$emit("loc",e),a(e),t.geocode({latLng:e},function(e,t){try{o.$emit("place",e[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),o.$emit("place","Location does not exists")}})}}function s(){var o=void 0;e.fetchAll().success(function(e){o=e;for(var t=0;t<o.length;t++){var n=o[t];if(n.hasOwnProperty("sexLocation")){var a=angular.fromJson(n.sexLocation),l=new google.maps.LatLng(a.lat,a.lon),r={position:l,map:f,title:"Sex",icon:w},s=new google.maps.Marker(r);$.push(s),google.maps.event.addListener(s,"click",function(e,o){return function(){void 0!==S&&S.close();var t='<div id="sexplace"><p> Target: '+o.sexTarget+"</p><p> Age: "+o.userAge+"</p></div>",n={content:t,pixelOffset:new google.maps.Size(-37.5,0)};S=new google.maps.InfoWindow(n),S.open(f,e)}}(s,n)),google.maps.event.addListener(s,"mouseout",function(){S&&S.close()})}}})}function i(){for(var e,o=0;e=$[o];o++)e.setMap(null);$=[]}function c(){var e=document.getElementById("pac-input"),o=document.getElementById("btn-curr");f.controls[google.maps.ControlPosition.TOP_LEFT].push(e),f.controls[google.maps.ControlPosition.TOP_RIGHT].push(o);var t=new google.maps.places.SearchBox(e);google.maps.event.addListener(t,"places_changed",function(){var e=t.getPlaces();if(0!=e.length){var o=e[0];r(o.geometry.location),window.localStorage.latitude=o.geometry.location.latitude,window.localStorage.longitude=o.geometry.location.longitude,f.panTo(o.geometry.location),f.setZoom(16)}})}function g(){google.maps.event.addListener(f,"click",function(e){r(e.latLng)})}function u(){google.maps.event.addListener(f,"heading_changed",function(e){r(e)})}function p(){google.maps.event.addListener(f,"center_changed",function(){window.localStorage.latitude=f.getCenter().lat(),window.localStorage.longitude=f.getCenter().lng()})}function d(){google.maps.event.addListener(f,"maptypeid_changed",function(){l(),i(),s()})}function m(){void 0===f&&(f=new google.maps.Map(t[0],L)),d(),o.$emit("mapInit",f),g(),c(),p(),u(),s()}var f,w={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,25)},h={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)};console.log("window.localStorage.latitude ",window.localStorage.latitude);var v=new google.maps.LatLng(34.05,-118.24);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(v=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),console.log("window.localStorage.latitude ",window.localStorage.latitude),console.log(v);var S,L={center:v,zoom:15,MapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1,streetViewControl:!1},P=[],$=[];m()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:t}}]),angular.module("app").service("UtilSvc",function(){var e=this;e.deg2rad=function(e){return e*(Math.PI/180)},e.getDistanceFromLatLonInKm=function(o,t,n,a){var l=6371,r=e.deg2rad(n-o),s=e.deg2rad(a-t),i=Math.sin(r/2)*Math.sin(r/2)+Math.cos(e.deg2rad(o))*Math.cos(e.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),c=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)),g=l*c;return g}}),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc","$window","$document",function(e,o,t,n){e.$emit("pagechange",e.pageId.post),e.posts=[];var a=0,l=10;e.moveToLoc=function(o){var t=e.posts[o],a=angular.fromJson(t.sexLocation),l=new google.maps.LatLng(a.lat,a.lon);e.map.panTo(l),e.map.setZoom(16);var r=0,s=480;n.scrollTop(r,s).then(function(){console&&console.log("You just scrolled to the top!")})},e.addPost=function(){var t=e.sexPlaceAutocompleted,n=e.postLocation;console.log("location:"+n.lat+","+n.lon+"\n place:"+t);var a=JSON.stringify(n);console.log(e.sexTime),o.create({userName:void 0,userAge:void 0,sexPlace:t,sexTime:e.sexTime,sexTarget:e.sexTarget,sexLocation:a}).success(function(o){var t="You wanted to have sex with "+o.sexTarget;swal("Great!",t,"success"),google.maps.event.trigger(e.map,"maptypeid_changed"),e.posts.unshift(o),e.sexTime=null,e.sexTarget=null}).error(function(e,o){401==o?swal("Log-in failed","Please log in","error"):swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){o.fetch(a,l).success(function(o){a++,console.log("Posts have been loaded successfully for front page"),e.posts=e.posts.concat(o)})},e.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetchAll=function(){return e.get("/api/posts")},this.fetch=function(o,t){var n="/api/posts/"+o+"?perpage="+t;return e.get(n)},this.create=function(o){return e.post("/api/posts",o)}}]),angular.module("app").controller("AccountCtrl",["$scope","$location","UserSvc",function(e,o,t){e.$emit("pagechange",e.pageId.account),e.changePassword=function(e,n){t.changePassword(e,n).then(function(){swal("","Password have been changed","success"),o.path("/")},function(e){401==e.status?swal("","Original password is wrong.","error"):swal("","Can not change password.","error")})}}]),angular.module("app").controller("LoginCtrl",["$rootScope","$scope","$location","UserSvc",function(e,o,t,n){o.$emit("pagechange",o.pageId.login),o.login=function(o,a){n.login(o,a).then(function(o){t.path("/"),e.$emit("login",o)},function(e){swal("Log-in failed!","Password/ID wrong","error")})}}]),angular.module("app").controller("RegisterCtrl",["$scope","$location","UserSvc",function(e,o,t){e.$emit("pagechange",e.pageId.register),e.register=function(n,a,l,r){t.register(n,a,l,r).then(function(t){swal("OK!","Successfully registered","success"),o.path("/"),e.$emit("login",t)},function(e){swal("Register failed!","Username already exists","error")})}}]),angular.module("app").service("UserSvc",["$http","$rootScope",function(e,o){var t=this;t.getUser=function(){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(e){return e.data},function(e){currentUser=void 0})},t.remainLogin=function(){if(console.log("Token:",localStorage.getItem("token")),console.log("Application has been launched"),"undefined"!=window.localStorage.getItem("token")){e.defaults.headers.common["X-Auth"]=window.localStorage.getItem("token"),console.log("Remain Login in process..");t.getUser().then(function(e){o.$emit("login",e)},function(e){console.log(e),currentUser=void 0})}},t.changePassword=function(o,t){return e.get("/api/users",{headers:{"X-Auth":e.defaults.headers.common["X-Auth"]}}).then(function(n){return e.post("/api/users/password_change",{password:t,newPassword:o,username:n.data.userName})})},t.login=function(o,n){return e.post("/api/sessions",{username:o,password:n}).then(function(o){return window.localStorage.token=o.data,e.defaults.headers.common["X-Auth"]=o.data,t.getUser()})},t.register=function(o,n,a,l){return e.post("/api/users",{userName:o,password:n,userdob:a,sexPos:l}).then(function(){return t.login(o,n)})},t.logout=function(){window.localStorage.longitude=void 0,window.localStorage.latitude=void 0,window.localStorage.token=void 0,e.defaults.headers.common["X-Auth"]=void 0}}]);
//# sourceMappingURL=data:application/json;base64,