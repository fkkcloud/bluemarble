angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){var e=function(){this.AdditiveColor=!0,this.Restart=function(){location.reload()},this.HideNodes=!1,this.HideNames=!1};RENDEROPTIONS=new e;var t=new dat.GUI,a=t.addFolder("Clusters"),r=a.add(RENDEROPTIONS,"HideNodes"),o=t.addFolder("MergePaths"),n=o.add(RENDEROPTIONS,"HideNodes"),l=o.add(RENDEROPTIONS,"HideNames");r.onFinishChange(function(e){NodeManagerCluster.toggleNodeVisibility(1==e?!1:!0)}),n.onFinishChange(function(e){if(1==e)for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeVisibility(!1);else for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeVisibility(!0)}),l.onFinishChange(function(e){if(1==e)for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeTextVisibility(!1);else for(var t=0;t<NodeManagerMergePaths.length;t++)for(var a=0;a<SELECTED_MERGEPATHIDS.length;a++)SELECTED_MERGEPATHIDS[a]===t&&NodeManagerMergePaths[t].toggleNodeTextVisibility(!0)}),t.add(RENDEROPTIONS,"Restart")}t.meanAge={value:0},t.mergePathIds={value:""},t.getMenuShow=function(){return t.show_menu},$(window).resize(function(){this.resizeTO&&clearTimeout(this.resizeTO),this.resizeTO=setTimeout(function(){$(this).trigger("resizeEnd")},200)}),$(window).bind("resizeEnd",function(){location.reload()}),t.resetClusters=function(){FRAME.value=0,PAGE_NUM.value=1,t.meanAge.value=0,TWEEN.removeAll(),EdgeManagerCluster.reset(),NodeManagerCluster.reset(),t.setClusterId(SELECTED_CLUSTER),t.updateMeanAge()},t.cleanMergePaths=function(){NodeManagerMergePaths[SELECTED_MERGEPATHID].clean()},t.resetMergePaths=function(){FRAME.value=0,PAGE_NUM.value=2,TWEEN.removeAll(),NodeManagerMergePaths[SELECTED_MERGEPATHID].reset(),EdgeManagerMergePaths[SELECTED_MERGEPATHID].reset()},t.setClusterId=function(e){if(SELECTED_CLUSTER=e,isNaN(e))return void("Not Clustered"==e?(SELECTED_CLUSTER=17,clearAllClusters(),EdgeManagerCluster.toggleShowByCluster(17),NodeManagerCluster.toggleShowByCluster(17)):viewAllClusters());for(var t=0;18>t;t++)EdgeManagerCluster.hideAll(),NodeManagerCluster.hideAll();EdgeManagerCluster.toggleShowByCluster(SELECTED_CLUSTER),NodeManagerCluster.toggleShowByCluster(SELECTED_CLUSTER)},t.updateMeanAge=function(){if(!(FRAME.value>620||1!=PAGE_NUM.value)){var e=mapRange([0,620],[35.4,90.5],FRAME.value);t.meanAge.value=Math.ceil(e),t.$apply(),requestAnimationFrame(t.updateMeanAge)}},r()}]),angular.module("app").config(["$routeProvider",function(e){e.when("/mergepaths",{templateUrl:"/templates/mergepaths.html",controller:"MergePathCtrl"}).when("/clusters",{templateUrl:"/templates/clusters.html",controller:"ClusterCtrl"}).when("/intro",{templateUrl:"/templates/intro.html",controller:"IntroCtrl"}).otherwise({redirectTo:"/intro"})}]),angular.module("app").controller("ClusterCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){PAGE_NUM.value=1,bCanvasLoaded&&$("#options-clusters").css("visibility","visible")}function o(){$(".data-visibility").addClass("active")}r(),$("#clusterid").val(SELECTED_CLUSTER),o(),$("#btn-reset-clusters").click(function(){t.resetClusters()}),t.updateMeanAge(),$("#clusterid").change(function(){var e=$("#clusterid").val();t.setClusterID(e)})}]),angular.module("app").controller("IntroCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){PAGE_NUM.value=0}function o(){$(".data-visibility").removeClass("active")}r(),o()}]),angular.module("app").controller("MergePathCtrl",["$rootScope","$scope","$window",function(e,t,a){function r(){PAGE_NUM.value=2,bCanvasLoaded&&$("#options-mergepaths").css("visibility","visible")}function o(){$(".data-visibility").addClass("active")}r(),o(),$("#btn-reset-mergepaths").click(function(){t.resetMergePaths()}),$("#btn-run-mergepaths").click(function(){var e=document.getElementById("textinfo-mergepathids").value;try{var a=parseInt(e);if(isNaN(a))for(var r=e.toLowerCase(),o=0;o<MERGEPATH_INITNODE_REF.length;o++){var n=MERGEPATH_INITNODE_REF[o];if(n==r){e=o,console.log("selected disease for",r," is id:",o);break}}}catch(l){return void console.log(l)}t.cleanMergePaths(),SELECTED_MERGEPATHID=e,t.mergePathIds.value=MERGEPATH_INITNODE_REF[e],t.$apply(),t.resetMergePaths()})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJDb250cm9sbGVycy9jbHVzdGVyLmN0cmwuanMiLCJDb250cm9sbGVycy9pbnRyby5jdHJsLmpzIiwiQ29udHJvbGxlcnMvbWVyZ2VwYXRoLmN0cmwuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkcm9vdFNjb3BlIiwiJHNjb3BlIiwiJHdpbmRvdyIsInNldERhdGFHdWlJbml0aWFsaXplIiwicmVuZGVyT3B0aW9uc1VJIiwidGhpcyIsIkFkZGl0aXZlQ29sb3IiLCJSZXN0YXJ0IiwibG9jYXRpb24iLCJyZWxvYWQiLCJIaWRlTm9kZXMiLCJIaWRlTmFtZXMiLCJSRU5ERVJPUFRJT05TIiwiZ3VpIiwiZGF0IiwiR1VJIiwiQ2x1c3RlcnNHcnAiLCJhZGRGb2xkZXIiLCJDbHVzdGVySGlkZU5vZGVzIiwiYWRkIiwiTWVyZ2VQYXRoR3JwIiwiTWVyZ2VQYXRoSGlkZU5vZGVzIiwiTWVyZ2VQYXRoSGlkZU5hbWVzIiwib25GaW5pc2hDaGFuZ2UiLCJ2YWwiLCJOb2RlTWFuYWdlckNsdXN0ZXIiLCJ0b2dnbGVOb2RlVmlzaWJpbGl0eSIsImkiLCJOb2RlTWFuYWdlck1lcmdlUGF0aHMiLCJsZW5ndGgiLCJqIiwiU0VMRUNURURfTUVSR0VQQVRISURTIiwidG9nZ2xlTm9kZVRleHRWaXNpYmlsaXR5IiwibWVhbkFnZSIsInZhbHVlIiwibWVyZ2VQYXRoSWRzIiwiZ2V0TWVudVNob3ciLCJzaG93X21lbnUiLCIkIiwid2luZG93IiwicmVzaXplIiwicmVzaXplVE8iLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidHJpZ2dlciIsImJpbmQiLCJyZXNldENsdXN0ZXJzIiwiRlJBTUUiLCJQQUdFX05VTSIsIlRXRUVOIiwicmVtb3ZlQWxsIiwiRWRnZU1hbmFnZXJDbHVzdGVyIiwicmVzZXQiLCJzZXRDbHVzdGVySWQiLCJTRUxFQ1RFRF9DTFVTVEVSIiwidXBkYXRlTWVhbkFnZSIsImNsZWFuTWVyZ2VQYXRocyIsIlNFTEVDVEVEX01FUkdFUEFUSElEIiwiY2xlYW4iLCJyZXNldE1lcmdlUGF0aHMiLCJFZGdlTWFuYWdlck1lcmdlUGF0aHMiLCJjbHVzdGVyaWQiLCJpc05hTiIsImNsZWFyQWxsQ2x1c3RlcnMiLCJ0b2dnbGVTaG93QnlDbHVzdGVyIiwidmlld0FsbENsdXN0ZXJzIiwiaGlkZUFsbCIsIm5ld01lYW5BZ2UiLCJtYXBSYW5nZSIsIk1hdGgiLCJjZWlsIiwiJGFwcGx5IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwic2V0UGFnZU51bSIsImJDYW52YXNMb2FkZWQiLCJjc3MiLCJzZXRWaXNpYmlsaXR5IiwiYWRkQ2xhc3MiLCJjbGljayIsImNoYW5nZSIsInNldENsdXN0ZXJJRCIsInJlbW92ZUNsYXNzIiwiaW5wdXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibWVyZ2VQYXRoSWQiLCJwYXJzZUludCIsImxvd2VyQ2FzZWREaXNlYXNlTmFtZSIsInRvTG93ZXJDYXNlIiwiTUVSR0VQQVRIX0lOSVROT0RFX1JFRiIsIm5hbWUiLCJjb25zb2xlIiwibG9nIiwiZXJyIl0sIm1hcHBpbmdzIjoiQUFDQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxhQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQWdHQSxRQUFBQyxLQUVBLEdBQUFDLEdBQUEsV0FFQUMsS0FBQUMsZUFBQSxFQUVBRCxLQUFBRSxRQUFBLFdBR0FDLFNBQUFDLFVBSUFKLEtBQUFLLFdBQUEsRUFFQUwsS0FBQU0sV0FBQSxFQUlBQyxlQUFBLEdBQUFSLEVBQ0EsSUFBQVMsR0FBQSxHQUFBQyxLQUFBQyxJQUVBQyxFQUFBSCxFQUFBSSxVQUFBLFlBQ0FDLEVBQUFGLEVB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LFdBRUEsR0FBQUksR0FBQUMsU0FBQUMsZUFBQSx5QkFBQXhELEtBR0EsS0FFQSxHQUFBeUQsR0FBQUMsU0FBQUosRUFDQSxJQUFBMUIsTUFBQTZCLEdBSUEsSUFBQSxHQUZBRSxHQUFBTCxFQUFBTSxjQUVBbkUsRUFBQSxFQUFBQSxFQUFBb0UsdUJBQUFsRSxPQUFBRixJQUFBLENBRUEsR0FBQXFFLEdBQUFELHVCQUFBcEUsRUFFQSxJQUFBcUUsR0FBQUgsRUFBQSxDQUVBTCxFQUFBN0QsRUFDQXNFLFFBQUFDLElBQUEsdUJBQUFMLEVBQUEsVUFBQWxFLEVBQ0EsU0FRQSxNQUFBd0UsR0FFQSxXQURBRixTQUFBQyxJQUFBQyxHQUlBbEcsRUFBQXVELGtCQUVBQyxxQkFBQStCLEVBRUF2RixFQUFBa0MsYUFBQUQsTUFBQTZELHVCQUFBUCxHQUNBdkYsRUFBQXNFLFNBRUF0RSxFQUFBMEQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuXHQnbmdSb3V0ZScsXG5dKTtcbiIsIlxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCAkd2luZG93KXtcblxuXHQkc2NvcGUubWVhbkFnZSA9IHsgdmFsdWUgOiAwIH07XG5cdCRzY29wZS5tZXJnZVBhdGhJZHMgPSB7IHZhbHVlIDogXCJcIn07XG5cblx0JHNjb3BlLmdldE1lbnVTaG93ID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJHNjb3BlLnNob3dfbWVudTtcblx0fVxuXG5cdC8vIGFzIHJlc2l6ZSwgcmUtaW5pdCBkYXRhc1xuXHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuICAgIGlmKHRoaXMucmVzaXplVE8pIGNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRPKTtcblx0ICAgIHRoaXMucmVzaXplVE8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICQodGhpcykudHJpZ2dlcigncmVzaXplRW5kJyk7XG5cdCAgICB9LCAyMDApO1xuXHR9KTtcblxuXHQkKHdpbmRvdykuYmluZCgncmVzaXplRW5kJywgZnVuY3Rpb24oKSB7XG5cdCAgICAvL2RvIHNvbWV0aGluZywgd2luZG93IGhhc24ndCBjaGFuZ2VkIHNpemUgaW4gNTAwbXNcblx0ICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuXHR9KTtcblxuXG5cdCRzY29wZS5yZXNldENsdXN0ZXJzID0gZnVuY3Rpb24oKXtcblxuICAgICAgXHRGUkFNRS52YWx1ZSAgICA9IDA7XG4gICAgICBcdFBBR0VfTlVNLnZhbHVlID0gMTtcblxuICAgICAgXHQkc2NvcGUubWVhbkFnZS52YWx1ZSA9IDA7XG5cbiAgICAgIFx0VFdFRU4ucmVtb3ZlQWxsKCk7IC8vIHJlc2V0IHR3ZWVuIGFuaW1hdGlvbnNcblxuICAgICAgXHRFZGdlTWFuYWdlckNsdXN0ZXIucmVzZXQoKTtcbiAgICAgIFx0Tm9kZU1hbmFnZXJDbHVzdGVyLnJlc2V0KCk7XG5cbiAgICAgIFx0JHNjb3BlLnNldENsdXN0ZXJJZChTRUxFQ1RFRF9DTFVTVEVSKTtcblxuICAgICAgXHQkc2NvcGUudXBkYXRlTWVhbkFnZSgpO1xuXHRcblx0fVxuXG5cdCRzY29wZS5jbGVhbk1lcmdlUGF0aHMgPSBmdW5jdGlvbigpe1xuXG5cdFx0Tm9kZU1hbmFnZXJNZXJnZVBhdGhzW1NFTEVDVEVEX01FUkdFUEFUSElEXS5jbGVhbigpO1xuXG5cdH1cblxuXHQkc2NvcGUucmVzZXRNZXJnZVBhdGhzID0gZnVuY3Rpb24oKXtcblx0XHRGUkFNRS52YWx1ZSAgICA9IDA7XG5cdFx0UEFHRV9OVU0udmFsdWUgPSAyO1xuXG5cdFx0VFdFRU4ucmVtb3ZlQWxsKCk7IC8vIHJlc2V0IHR3ZWVuIGFuaW1hdGlvbnNcblxuXHRcdE5vZGVNYW5hZ2VyTWVyZ2VQYXRoc1tTRUxFQ1RFRF9NRVJHRVBBVEhJRF0ucmVzZXQoKTtcblx0XHRFZGdlTWFuYWdlck1lcmdlUGF0aHNbU0VMRUNURURfTUVSR0VQQVRISURdLnJlc2V0KCk7XG5cblx0fVxuXG5cdCRzY29wZS5zZXRDbHVzdGVySWQgPSBmdW5jdGlvbihjbHVzdGVyaWQpe1xuXG5cdCAgICBTRUxFQ1RFRF9DTFVTVEVSID0gY2x1c3RlcmlkO1xuXG5cdCAgICBpZiAoaXNOYU4oY2x1c3RlcmlkKSl7XG5cblx0ICAgICAgaWYgKGNsdXN0ZXJpZCA9PSAnTm90IENsdXN0ZXJlZCcpe1xuXHQgICAgICAgIFNFTEVDVEVEX0NMVVNURVIgPSAxNztcblx0ICAgICAgICBjbGVhckFsbENsdXN0ZXJzKCk7XG5cdCAgICAgICAgRWRnZU1hbmFnZXJDbHVzdGVyLnRvZ2dsZVNob3dCeUNsdXN0ZXIoMTcpO1xuXHQgICAgICAgIE5vZGVNYW5hZ2VyQ2x1c3Rlci50b2dnbGVTaG93QnlDbHVzdGVyKDE3KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2aWV3QWxsQ2x1c3RlcnMoKTsgIFxuXHQgICAgICB9XG5cdCAgICAgIFxuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTg7IGkrKyl7XG5cblx0ICAgICAgRWRnZU1hbmFnZXJDbHVzdGVyLmhpZGVBbGwoKTtcblx0ICAgICAgTm9kZU1hbmFnZXJDbHVzdGVyLmhpZGVBbGwoKTtcblxuXHQgICAgfVxuXHQgICAgRWRnZU1hbmFnZXJDbHVzdGVyLnRvZ2dsZVNob3dCeUNsdXN0ZXIoU0VMRUNURURfQ0xVU1RFUik7XG5cdCAgICBOb2RlTWFuYWdlckNsdXN0ZXIudG9nZ2xlU2hvd0J5Q2x1c3RlcihTRUxFQ1RFRF9DTFVTVEVSKTtcblx0fVxuXG5cdCRzY29wZS51cGRhdGVNZWFuQWdlID0gZnVuY3Rpb24oKXtcblx0ICAgIGlmIChGUkFNRS52YWx1ZSA+IDYyMCB8fCBQQUdFX05VTS52YWx1ZSAhPSAxKVxuXHQgICAgICByZXR1cm47XG5cblx0ICAgIHZhciBuZXdNZWFuQWdlID0gbWFwUmFuZ2UoWzAsIDYyMC4wXSwgWzM1LjQsIDkwLjVdLCBGUkFNRS52YWx1ZSk7XG5cdCAgICAkc2NvcGUubWVhbkFnZS52YWx1ZSA9IE1hdGguY2VpbChuZXdNZWFuQWdlKTtcblx0ICAgICRzY29wZS4kYXBwbHkoKTtcblx0ICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgkc2NvcGUudXBkYXRlTWVhbkFnZSk7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXREYXRhR3VpSW5pdGlhbGl6ZSgpe1xuXG5cdCAgICB2YXIgcmVuZGVyT3B0aW9uc1VJID0gZnVuY3Rpb24oKSB7XG5cblx0ICAgICAgdGhpcy5BZGRpdGl2ZUNvbG9yID0gdHJ1ZTtcblxuXHQgICAgICB0aGlzLlJlc3RhcnQgPSBmdW5jdGlvbigpIHsgXG5cblx0ICAgICAgXHQgLy8gcmVzdGFydCB0aGUgcGFnZVxuXHQgICAgICBcdCBsb2NhdGlvbi5yZWxvYWQoKTtcblxuXHQgICAgICB9O1xuXG5cdCAgICAgIHRoaXMuSGlkZU5vZGVzID0gZmFsc2U7XG5cblx0ICAgICAgdGhpcy5IaWRlTmFtZXMgPSBmYWxzZTtcblxuXHQgICAgfTtcblxuXHQgICAgUkVOREVST1BUSU9OUyBcdD0gbmV3IHJlbmRlck9wdGlvbnNVSSgpO1xuXHQgICAgdmFyIGd1aSAgXHRcdD0gbmV3IGRhdC5HVUkoKTtcblxuXHQgICAgdmFyIENsdXN0ZXJzR3JwID0gZ3VpLmFkZEZvbGRlcignQ2x1c3RlcnMnKTtcblx0XHR2YXIgQ2x1c3RlckhpZGVOb2RlcyA9IENsdXN0ZXJzR3JwLmFkZChSRU5ERVJPUFRJT05TLCAnSGlkZU5vZGVzJyk7XG5cblx0XHR2YXIgTWVyZ2VQYXRoR3JwID0gZ3VpLmFkZEZvbGRlcignTWVyZ2VQYXRocycpO1xuXHRcdHZhciBNZXJnZVBhdGhIaWRlTm9kZXMgPSBNZXJnZVBhdGhHcnAuYWRkKFJFTkRFUk9QVElPTlMsICdIaWRlTm9kZXMnKTtcblx0XHR2YXIgTWVyZ2VQYXRoSGlkZU5hbWVzID0gTWVyZ2VQYXRoR3JwLmFkZChSRU5ERVJPUFRJT05TLCAnSGlkZU5hbWVzJyk7XG5cblx0ICAgIENsdXN0ZXJIaWRlTm9kZXMub25GaW5pc2hDaGFuZ2UoZnVuY3Rpb24odmFsKSB7XG5cdCAgICBcdGlmICh2YWwgPT0gdHJ1ZSkge1xuXHRcdCAgICAgICAgTm9kZU1hbmFnZXJDbHVzdGVyLnRvZ2dsZU5vZGVWaXNpYmlsaXR5KGZhbHNlKTtcblx0ICAgIFx0fVxuXHQgICAgXHRlbHNlIHtcblx0XHQgICAgICAgIE5vZGVNYW5hZ2VyQ2x1c3Rlci50b2dnbGVOb2RlVmlzaWJpbGl0eSh0cnVlKTtcblx0ICAgIFx0fVxuXHQgICAgfSk7XG5cblx0ICAgXHRNZXJnZVBhdGhIaWRlTm9kZXMub25GaW5pc2hDaGFuZ2UoZnVuY3Rpb24odmFsKSB7XG5cdCAgICBcdGlmICh2YWwgPT0gdHJ1ZSkge1xuXHQgICAgICAgIFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBOb2RlTWFuYWdlck1lcmdlUGF0aHMubGVuZ3RoOyBpKyspe1xuXG5cdFx0ICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgU0VMRUNURURfTUVSR0VQQVRISURTLmxlbmd0aDsgaisrKXtcblxuXHRcdCAgICAgICAgICAgIGlmIChTRUxFQ1RFRF9NRVJHRVBBVEhJRFNbal0gPT09IGkpXG5cdFx0ICAgICAgICAgICAgICBOb2RlTWFuYWdlck1lcmdlUGF0aHNbaV0udG9nZ2xlTm9kZVZpc2liaWxpdHkoZmFsc2UpO1xuXG5cdFx0ICAgICAgICAgIH1cblx0XHQgICAgICAgICAgXG5cdFx0ICAgICAgICB9XG5cdCAgICBcdH1cblx0ICAgIFx0ZWxzZSB7XG5cdCAgICAgICAgXHRmb3IgKHZhciBpID0gMDsgaSA8IE5vZGVNYW5hZ2VyTWVyZ2VQYXRocy5sZW5ndGg7IGkrKyl7XG5cblx0XHQgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBTRUxFQ1RFRF9NRVJHRVBBVEhJRFMubGVuZ3RoOyBqKyspe1xuXG5cdFx0ICAgICAgICAgICAgaWYgKFNFTEVDVEVEX01FUkdFUEFUSElEU1tqXSA9PT0gaSlcblx0XHQgICAgICAgICAgICAgIE5vZGVNYW5hZ2VyTWVyZ2VQYXRoc1tpXS50b2dnbGVOb2RlVmlzaWJpbGl0eSh0cnVlKTtcblxuXHRcdCAgICAgICAgICB9XG5cblx0XHQgICAgICAgIH1cblx0XHQgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIE1lcmdlUGF0aEhpZGVOYW1lcy5vbkZpbmlzaENoYW5nZShmdW5jdGlvbih2YWwpIHtcblx0ICAgIFx0aWYgKHZhbCA9PSB0cnVlKSB7XG5cdCAgICBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBOb2RlTWFuYWdlck1lcmdlUGF0aHMubGVuZ3RoOyBpKyspe1xuXG5cdFx0ICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgU0VMRUNURURfTUVSR0VQQVRISURTLmxlbmd0aDsgaisrKXtcblxuXHRcdCAgICAgICAgICAgIGlmIChTRUxFQ1RFRF9NRVJHRVBBVEhJRFNbal0gPT09IGkpXG5cdFx0ICAgICAgICAgICAgICBOb2RlTWFuYWdlck1lcmdlUGF0aHNbaV0udG9nZ2xlTm9kZVRleHRWaXNpYmlsaXR5KGZhbHNlKTtcblxuXHRcdCAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdCAgICBcdH1cblx0ICAgIFx0ZWxzZSB7XG5cdCAgICBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBOb2RlTWFuYWdlck1lcmdlUGF0aHMubGVuZ3RoOyBpKyspe1xuXG5cdFx0ICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgU0VMRUNURURfTUVSR0VQQVRISURTLmxlbmd0aDsgaisrKXtcblxuXHRcdCAgICAgICAgICAgIGlmIChTRUxFQ1RFRF9NRVJHRVBBVEhJRFNbal0gPT09IGkpXG5cdFx0ICAgICAgICAgICAgICBOb2RlTWFuYWdlck1lcmdlUGF0aHNbaV0udG9nZ2xlTm9kZVRleHRWaXNpYmlsaXR5KHRydWUpO1xuXG5cdFx0ICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0ICAgIFx0fVxuXHQgICAgfSk7XG5cblx0ICAgIGd1aS5hZGQoUkVOREVST1BUSU9OUywgJ1Jlc3RhcnQnKTtcblxuXHR9XG4gIFx0c2V0RGF0YUd1aUluaXRpYWxpemUoKTtcbn0pOyIsIlxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcil7XG5cdCRyb3V0ZVByb3ZpZGVyXG5cdC53aGVuKCcvbWVyZ2VwYXRocycsIFxuXHRcdHtcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9tZXJnZXBhdGhzLmh0bWwnLFxuXHRcdFx0Y29udHJvbGxlcjogJ01lcmdlUGF0aEN0cmwnXG5cdFx0fSlcblx0LndoZW4oJy9jbHVzdGVycycsIFxuXHRcdHtcblx0XHRcdHRlbXBsYXRlVXJsOiAnL3RlbXBsYXRlcy9jbHVzdGVycy5odG1sJyxcblx0XHRcdGNvbnRyb2xsZXI6ICdDbHVzdGVyQ3RybCdcblx0XHR9KVxuXHQud2hlbignL2ludHJvJywgXG5cdFx0e1xuXHRcdFx0dGVtcGxhdGVVcmw6ICcvdGVtcGxhdGVzL2ludHJvLmh0bWwnLFxuXHRcdFx0Y29udHJvbGxlcjogJ0ludHJvQ3RybCdcblx0XHR9KVxuXHQub3RoZXJ3aXNlKFxuXHRcdHtcbiAgIFx0XHRcdHJlZGlyZWN0VG86ICcvaW50cm8nXG5cdFx0fSk7XG5cbn0pO1xuIiwiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdDbHVzdGVyQ3RybCcsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJHdpbmRvdyl7XG5cbiAgZnVuY3Rpb24gc2V0UGFnZU51bSgpe1xuICAgIFBBR0VfTlVNLnZhbHVlID0gMTsgLy8gMSAtIGNsdXN0ZXJcblxuICAgIGlmIChiQ2FudmFzTG9hZGVkKVxuICAgICAgJCgnI29wdGlvbnMtY2x1c3RlcnMnKS5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICB9XG4gIHNldFBhZ2VOdW0oKTtcblxuXG4gICQoJyNjbHVzdGVyaWQnKS52YWwoU0VMRUNURURfQ0xVU1RFUik7XG5cblxuICBmdW5jdGlvbiBzZXRWaXNpYmlsaXR5KCl7XG4gICAgJCgnLmRhdGEtdmlzaWJpbGl0eScpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgfVxuICBzZXRWaXNpYmlsaXR5KCk7XG5cblxuICAvLyByZXNldCBhbmltYXRpb24uXG4gICQoJyNidG4tcmVzZXQtY2x1c3RlcnMnKS5jbGljayhmdW5jdGlvbigpIHtcblxuICAgICRzY29wZS5yZXNldENsdXN0ZXJzKCk7XG5cbiAgfSk7XG5cblxuICAkc2NvcGUudXBkYXRlTWVhbkFnZSgpO1xuICBcbiAgLypcbiAgLy9zZXQgaW5pdGlhbCBzdGF0ZS4gIGV4YW1wbGUgb2YgY2hlY2sgYm94IGV2ZW50XG4gICQoJyNjaGVja2JveC1oaWRlLW5vZGVzLWNsdXN0ZXJzJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgaWYoJCh0aGlzKS5pcyhcIjpjaGVja2VkXCIpKSB7XG4gICAgICAgIE5vZGVNYW5hZ2VyQ2x1c3Rlci50b2dnbGVOb2RlVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgIHtcbiAgICAgICAgTm9kZU1hbmFnZXJDbHVzdGVyLnRvZ2dsZU5vZGVWaXNpYmlsaXR5KGZhbHNlKTtcbiAgICAgIH1cbiAgfSk7XG4gICovXG5cbiAgJCgnI2NsdXN0ZXJpZCcpLmNoYW5nZShmdW5jdGlvbigpe1xuXG4gICAgdmFyIGNsdXN0ZXJpZCA9ICQoJyNjbHVzdGVyaWQnKS52YWwoKTtcblxuICAgICRzY29wZS5zZXRDbHVzdGVySUQoY2x1c3RlcmlkKTtcblxuICB9KVxuXG4gIC8vIGNsZWFyIGFsbCBjbHVzdGVyc1xuICBmdW5jdGlvbiBjbGVhckFsbENsdXN0ZXJzKCl7IC8vIOyngOq4iCDsnbTqsowgZ2xvYmFs66GcIOygleydmOuQnCDqsoPsnbjrjbAsIOyVhOuniOuPhCDtgbTroZzspazslrQg7JWI7JeQIOuEo+yWtOyEnCwg7J20IO2MjOydvCDslYjsl5DshJzrp4wg6rCA64ql7ZWcIGxvY2FsIHNwYWNl66GcIOyYruqyqOyVvCDtlaDrk6/si7bri6QuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxODsgaSsrKXtcblxuICAgICAgRWRnZU1hbmFnZXJDbHVzdGVyLmhpZGVBbGwoKTtcbiAgICAgIE5vZGVNYW5hZ2VyQ2x1c3Rlci5oaWRlQWxsKCk7XG5cbiAgICB9XG4gIH1cblxuICAvLyBjbGVhciBhbGwgY2x1c3RlcnNcbiAgZnVuY3Rpb24gdmlld0FsbENsdXN0ZXJzKCl7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxODsgaSsrKXtcblxuICAgICAgRWRnZU1hbmFnZXJDbHVzdGVyLnNob3dBbGwoKTtcbiAgICAgIE5vZGVNYW5hZ2VyQ2x1c3Rlci5zaG93QWxsKCk7XG5cbiAgICB9XG4gIH1cblxufSk7IiwiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdJbnRyb0N0cmwnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICR3aW5kb3cpe1xuXG5cdGZ1bmN0aW9uIHNldFBhZ2VOdW0oKXtcbiAgICBcdFBBR0VfTlVNLnZhbHVlID0gMDtcbiAgXHR9XG4gIFx0c2V0UGFnZU51bSgpO1xuXG5cblx0ZnVuY3Rpb24gc2V0VmlzaWJpbGl0eSgpe1xuXHRcdCQoJy5kYXRhLXZpc2liaWxpdHknKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdH1cblx0c2V0VmlzaWJpbGl0eSgpO1xuXG59KTsiLCJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ01lcmdlUGF0aEN0cmwnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICR3aW5kb3cpe1xuXG4gIGZ1bmN0aW9uIHNldFBhZ2VOdW0oKXtcblxuICAgIFBBR0VfTlVNLnZhbHVlID0gMjtcbiAgICAvLyRzY29wZS5yZXNldE1lcmdlUGF0aHMoKTtcbiAgICBcbiAgICBpZiAoYkNhbnZhc0xvYWRlZClcbiAgICAgICQoJyNvcHRpb25zLW1lcmdlcGF0aHMnKS5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXG4gIH1cbiAgc2V0UGFnZU51bSgpO1xuXG4gIGZ1bmN0aW9uIHNldFZpc2liaWxpdHkoKXtcblxuICAgICQoJy5kYXRhLXZpc2liaWxpdHknKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cbiAgfVxuICBzZXRWaXNpYmlsaXR5KCk7XG5cblxuICAvLyByZXNldCBhbmltYXRpb24uXG4gICQoJyNidG4tcmVzZXQtbWVyZ2VwYXRocycpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXG4gICAgJHNjb3BlLnJlc2V0TWVyZ2VQYXRocygpOyBcblxuICB9KTtcblxuXG4gICQoJyNidG4tcnVuLW1lcmdlcGF0aHMnKS5jbGljayhmdW5jdGlvbigpIHtcblxuICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dGluZm8tbWVyZ2VwYXRoaWRzXCIpLnZhbHVlO1xuXG4gICAgLy8gZGVhbCB3aXRoIGlucHV0IHRvIGZpbmQgbWVyZ2VwYXRoIVxuICAgIHRyeSB7XG5cbiAgICAgIHZhciBtZXJnZVBhdGhJZCA9IHBhcnNlSW50KGlucHV0KTtcbiAgICAgIGlmIChpc05hTihtZXJnZVBhdGhJZCkpe1xuXG4gICAgICAgIHZhciBsb3dlckNhc2VkRGlzZWFzZU5hbWUgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTUVSR0VQQVRIX0lOSVROT0RFX1JFRi5sZW5ndGg7IGkrKyl7XG5cbiAgICAgICAgICB2YXIgbmFtZSA9IE1FUkdFUEFUSF9JTklUTk9ERV9SRUZbaV07XG5cbiAgICAgICAgICBpZiAobmFtZSA9PSBsb3dlckNhc2VkRGlzZWFzZU5hbWUpe1xuXG4gICAgICAgICAgICBpbnB1dCA9IGk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0ZWQgZGlzZWFzZSBmb3InLCBsb3dlckNhc2VkRGlzZWFzZU5hbWUsICcgaXMgaWQ6JywgaSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIH0gXG5cbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuICAgIGNhdGNoKGVycikge1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAkc2NvcGUuY2xlYW5NZXJnZVBhdGhzKCk7XG5cbiAgICBTRUxFQ1RFRF9NRVJHRVBBVEhJRCA9IGlucHV0O1xuXG4gICAgJHNjb3BlLm1lcmdlUGF0aElkcy52YWx1ZSA9IE1FUkdFUEFUSF9JTklUTk9ERV9SRUZbaW5wdXRdO1xuICAgICRzY29wZS4kYXBwbHkoKTtcblxuICAgICRzY29wZS5yZXNldE1lcmdlUGF0aHMoKTtcblxuICB9KVxuXG4gIC8vc2V0IGluaXRpYWwgc3RhdGUuXG4gIC8qXG4gICQoJyNjaGVja2JveC1oaWRlLW5vZGVzLW1lcmdlcGF0aHMnKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICBpZigkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikpIHtcblxuICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOb2RlTWFuYWdlck1lcmdlUGF0aHMubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBTRUxFQ1RFRF9NRVJHRVBBVEhJRFMubGVuZ3RoOyBqKyspe1xuXG4gICAgICAgICAgICBpZiAoU0VMRUNURURfTUVSR0VQQVRISURTW2pdID09PSBpKVxuICAgICAgICAgICAgICBOb2RlTWFuYWdlck1lcmdlUGF0aHNbaV0udG9nZ2xlTm9kZVZpc2liaWxpdHkodHJ1ZSk7XG5cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICB9XG4gICAgICAgIFxuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTm9kZU1hbmFnZXJNZXJnZVBhdGhzLmxlbmd0aDsgaSsrKXtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgU0VMRUNURURfTUVSR0VQQVRISURTLmxlbmd0aDsgaisrKXtcblxuICAgICAgICAgICAgaWYgKFNFTEVDVEVEX01FUkdFUEFUSElEU1tqXSA9PT0gaSlcbiAgICAgICAgICAgICAgTm9kZU1hbmFnZXJNZXJnZVBhdGhzW2ldLnRvZ2dsZU5vZGVWaXNpYmlsaXR5KGZhbHNlKTtcblxuICAgICAgICAgIH1cblxuICAgICAgICAgfVxuXG4gICAgICB9XG4gIH0pO1xuXG4gIC8vc2V0IGluaXRpYWwgc3RhdGUuXG4gICQoJyNjaGVja2JveC1oaWRlLW5hbWVzLW1lcmdlcGF0aHMnKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICBpZigkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikpIHtcblxuICAgICAgICBOb2RlTWFuYWdlck1lcmdlUGF0aHNbU0VMRUNURURfTUVSR0VQQVRISURdLnRvZ2dsZU5vZGVUZXh0VmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgICAgXG4gICAgICB9XG4gICAgICBlbHNlXG4gICAgICB7XG5cbiAgICAgICAgTm9kZU1hbmFnZXJNZXJnZVBhdGhzW1NFTEVDVEVEX01FUkdFUEFUSElEXS50b2dnbGVOb2RlVGV4dFZpc2liaWxpdHkoZmFsc2UpO1xuXG4gICAgICAgICAgfVxuXG4gICAgICAgICB9XG5cbiAgICAgIH1cbiAgfSk7XG4qL1xuICBcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==